"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_pages-dir-node_components_Game_tsx";
exports.ids = ["_pages-dir-node_components_Game_tsx"];
exports.modules = {

/***/ "(pages-dir-node)/./components/Game.tsx":
/*!*****************************!*\
  !*** ./components/Game.tsx ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Game)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! phaser */ \"phaser\");\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(phaser__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _lib_phaser_GameScene__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/phaser/GameScene */ \"(pages-dir-node)/./lib/phaser/GameScene.ts\");\n/* harmony import */ var _lib_phaser_BattleScene__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lib/phaser/BattleScene */ \"(pages-dir-node)/./lib/phaser/BattleScene.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_phaser_GameScene__WEBPACK_IMPORTED_MODULE_3__]);\n_lib_phaser_GameScene__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/* __next_internal_client_entry_do_not_use__ default auto */ \n\n\n\n\nfunction Game({ className = \"\", tileSize = 32, mapWidth = 50, mapHeight = 38, playerSpeed = 200, initialX, initialY, onPokemonSpotted, onPokemonCleared, onSpawnsUpdate, playerPokemon }) {\n    const gameRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const phaserGameRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"Game.useEffect\": ()=>{\n            if (!gameRef.current) return;\n            const getSize = {\n                \"Game.useEffect.getSize\": ()=>({\n                        w: gameRef.current.clientWidth,\n                        h: gameRef.current.clientHeight\n                    })\n            }[\"Game.useEffect.getSize\"];\n            const { w, h } = getSize();\n            const config = {\n                type: phaser__WEBPACK_IMPORTED_MODULE_1__.AUTO,\n                width: Math.max(320, w),\n                height: Math.max(240, h),\n                parent: gameRef.current,\n                backgroundColor: \"#0b0e14\",\n                physics: {\n                    default: \"arcade\",\n                    arcade: {\n                        gravity: {\n                            x: 0,\n                            y: 0\n                        },\n                        debug: false\n                    }\n                },\n                scene: [\n                    _lib_phaser_GameScene__WEBPACK_IMPORTED_MODULE_3__.GameScene,\n                    _lib_phaser_BattleScene__WEBPACK_IMPORTED_MODULE_4__.BattleScene\n                ],\n                scale: {\n                    mode: phaser__WEBPACK_IMPORTED_MODULE_1__.Scale.RESIZE,\n                    autoCenter: phaser__WEBPACK_IMPORTED_MODULE_1__.Scale.CENTER_BOTH\n                }\n            };\n            phaserGameRef.current = new phaser__WEBPACK_IMPORTED_MODULE_1__.Game(config);\n            const startOrRestart = {\n                \"Game.useEffect.startOrRestart\": ()=>{\n                    const game = phaserGameRef.current;\n                    const data = {\n                        tileSize,\n                        mapWidth,\n                        mapHeight,\n                        playerSpeed,\n                        initialX,\n                        initialY,\n                        onPokemonSpotted,\n                        onPokemonCleared,\n                        onSpawnsUpdate,\n                        playerPokemon\n                    };\n                    const mgr = game.scene;\n                    if (mgr.isActive(\"GameScene\")) {\n                        mgr.stop(\"GameScene\");\n                        mgr.start(\"GameScene\", data);\n                    } else {\n                        mgr.start(\"GameScene\", data);\n                    }\n                }\n            }[\"Game.useEffect.startOrRestart\"];\n            if (phaserGameRef.current.isBooted) startOrRestart();\n            else phaserGameRef.current.events.once(phaser__WEBPACK_IMPORTED_MODULE_1__.Core.Events.READY, startOrRestart);\n            const ro = new ResizeObserver({\n                \"Game.useEffect\": ()=>{\n                    if (!phaserGameRef.current || !gameRef.current) return;\n                    const { w: nw, h: nh } = getSize();\n                    phaserGameRef.current.scale.resize(Math.max(320, nw), Math.max(240, nh));\n                }\n            }[\"Game.useEffect\"]);\n            ro.observe(gameRef.current);\n            return ({\n                \"Game.useEffect\": ()=>{\n                    ro.disconnect();\n                    if (phaserGameRef.current) {\n                        phaserGameRef.current.destroy(true);\n                        phaserGameRef.current = null;\n                    }\n                }\n            })[\"Game.useEffect\"];\n        }\n    }[\"Game.useEffect\"], [\n        tileSize,\n        mapWidth,\n        mapHeight,\n        playerSpeed,\n        initialX,\n        initialY,\n        onPokemonSpotted,\n        onPokemonCleared,\n        onSpawnsUpdate,\n        playerPokemon\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: gameRef,\n        className: `game-container ${className}`,\n        style: {\n            width: \"100%\",\n            height: \"100%\"\n        }\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\Sahith\\\\OneDrive\\\\Desktop\\\\yokaihunt\\\\frontend\\\\components\\\\Game.tsx\",\n        lineNumber: 109,\n        columnNumber: 5\n    }, this);\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1ub2RlKS8uL2NvbXBvbmVudHMvR2FtZS50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7OztBQUVpQztBQUNTO0FBQ1U7QUFDSTtBQWdCekMsU0FBU0ssS0FBSyxFQUMzQkMsWUFBWSxFQUFFLEVBQ2RDLFdBQVcsRUFBRSxFQUNiQyxXQUFXLEVBQUUsRUFDYkMsWUFBWSxFQUFFLEVBQ2RDLGNBQWMsR0FBRyxFQUNqQkMsUUFBUSxFQUNSQyxRQUFRLEVBQ1JDLGdCQUFnQixFQUNoQkMsZ0JBQWdCLEVBQ2hCQyxjQUFjLEVBQ2RDLGFBQWEsRUFDSDtJQUNWLE1BQU1DLFVBQVVmLDZDQUFNQSxDQUFpQjtJQUN2QyxNQUFNZ0IsZ0JBQWdCaEIsNkNBQU1BLENBQXFCO0lBRWpERCxnREFBU0E7MEJBQUM7WUFDUixJQUFJLENBQUNnQixRQUFRRSxPQUFPLEVBQUU7WUFFdEIsTUFBTUM7MENBQVUsSUFBTzt3QkFBRUMsR0FBR0osUUFBUUUsT0FBTyxDQUFFRyxXQUFXO3dCQUFFQyxHQUFHTixRQUFRRSxPQUFPLENBQUVLLFlBQVk7b0JBQUM7O1lBQzNGLE1BQU0sRUFBRUgsQ0FBQyxFQUFFRSxDQUFDLEVBQUUsR0FBR0g7WUFFakIsTUFBTUssU0FBdUM7Z0JBQzNDQyxNQUFNMUIsd0NBQVc7Z0JBQ2pCNEIsT0FBT0MsS0FBS0MsR0FBRyxDQUFDLEtBQUtUO2dCQUNyQlUsUUFBUUYsS0FBS0MsR0FBRyxDQUFDLEtBQUtQO2dCQUN0QlMsUUFBUWYsUUFBUUUsT0FBTztnQkFDdkJjLGlCQUFpQjtnQkFDakJDLFNBQVM7b0JBQ1BDLFNBQVM7b0JBQ1RDLFFBQVE7d0JBQ05DLFNBQVM7NEJBQUVDLEdBQUc7NEJBQUdDLEdBQUc7d0JBQUU7d0JBQ3RCQyxPQUFPO29CQUNUO2dCQUNGO2dCQUNBQyxPQUFPO29CQUFDdEMsNERBQVNBO29CQUFFQyxnRUFBV0E7aUJBQUM7Z0JBQy9Cc0MsT0FBTztvQkFDTEMsTUFBTTNDLHlDQUFZLENBQUM2QyxNQUFNO29CQUN6QkMsWUFBWTlDLHlDQUFZLENBQUMrQyxXQUFXO2dCQUN0QztZQUNGO1lBRUE3QixjQUFjQyxPQUFPLEdBQUcsSUFBSW5CLHdDQUFXLENBQUN5QjtZQUV4QyxNQUFNdUI7aURBQWlCO29CQUNyQixNQUFNQyxPQUFPL0IsY0FBY0MsT0FBTztvQkFDbEMsTUFBTStCLE9BQU87d0JBQ1gzQzt3QkFDQUM7d0JBQ0FDO3dCQUNBQzt3QkFDQUM7d0JBQ0FDO3dCQUNBQzt3QkFDQUM7d0JBQ0FDO3dCQUNBQztvQkFDRjtvQkFDQSxNQUFNbUMsTUFBTUYsS0FBS1IsS0FBSztvQkFDdEIsSUFBSVUsSUFBSUMsUUFBUSxDQUFDLGNBQWM7d0JBQzdCRCxJQUFJRSxJQUFJLENBQUM7d0JBQ1RGLElBQUlHLEtBQUssQ0FBQyxhQUFhSjtvQkFDekIsT0FBTzt3QkFDTEMsSUFBSUcsS0FBSyxDQUFDLGFBQWFKO29CQUN6QjtnQkFDRjs7WUFFQSxJQUFJaEMsY0FBY0MsT0FBTyxDQUFDb0MsUUFBUSxFQUFFUDtpQkFDL0I5QixjQUFjQyxPQUFPLENBQUNxQyxNQUFNLENBQUNDLElBQUksQ0FBQ3pELHdDQUFXLENBQUMyRCxNQUFNLENBQUNDLEtBQUssRUFBRVo7WUFFakUsTUFBTWEsS0FBSyxJQUFJQztrQ0FBZTtvQkFDNUIsSUFBSSxDQUFDNUMsY0FBY0MsT0FBTyxJQUFJLENBQUNGLFFBQVFFLE9BQU8sRUFBRTtvQkFDaEQsTUFBTSxFQUFFRSxHQUFHMEMsRUFBRSxFQUFFeEMsR0FBR3lDLEVBQUUsRUFBRSxHQUFHNUM7b0JBQ3pCRixjQUFjQyxPQUFPLENBQUN1QixLQUFLLENBQUN1QixNQUFNLENBQUNwQyxLQUFLQyxHQUFHLENBQUMsS0FBS2lDLEtBQUtsQyxLQUFLQyxHQUFHLENBQUMsS0FBS2tDO2dCQUN0RTs7WUFDQUgsR0FBR0ssT0FBTyxDQUFDakQsUUFBUUUsT0FBTztZQUUxQjtrQ0FBTztvQkFDTDBDLEdBQUdNLFVBQVU7b0JBQ2IsSUFBSWpELGNBQWNDLE9BQU8sRUFBRTt3QkFDekJELGNBQWNDLE9BQU8sQ0FBQ2lELE9BQU8sQ0FBQzt3QkFDOUJsRCxjQUFjQyxPQUFPLEdBQUc7b0JBQzFCO2dCQUNGOztRQUNGO3lCQUFHO1FBQUNaO1FBQVVDO1FBQVVDO1FBQVdDO1FBQWFDO1FBQVVDO1FBQVVDO1FBQWtCQztRQUFrQkM7UUFBZ0JDO0tBQWM7SUFFdEkscUJBQ0UsOERBQUNxRDtRQUNDQyxLQUFLckQ7UUFDTFgsV0FBVyxDQUFDLGVBQWUsRUFBRUEsV0FBVztRQUN4Q2lFLE9BQU87WUFBRTNDLE9BQU87WUFBUUcsUUFBUTtRQUFPOzs7Ozs7QUFHN0MiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcU2FoaXRoXFxPbmVEcml2ZVxcRGVza3RvcFxceW9rYWlodW50XFxmcm9udGVuZFxcY29tcG9uZW50c1xcR2FtZS50c3giXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2UgY2xpZW50XCI7XHJcblxyXG5pbXBvcnQgKiBhcyBQaGFzZXIgZnJvbSBcInBoYXNlclwiO1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBHYW1lU2NlbmUgfSBmcm9tIFwiLi4vbGliL3BoYXNlci9HYW1lU2NlbmVcIjtcclxuaW1wb3J0IHsgQmF0dGxlU2NlbmUgfSBmcm9tIFwiLi4vbGliL3BoYXNlci9CYXR0bGVTY2VuZVwiO1xyXG5cclxuaW50ZXJmYWNlIEdhbWVQcm9wcyB7XHJcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xyXG4gIHRpbGVTaXplPzogbnVtYmVyO1xyXG4gIG1hcFdpZHRoPzogbnVtYmVyO1xyXG4gIG1hcEhlaWdodD86IG51bWJlcjtcclxuICBwbGF5ZXJTcGVlZD86IG51bWJlcjtcclxuICBpbml0aWFsWD86IG51bWJlcjtcclxuICBpbml0aWFsWT86IG51bWJlcjtcclxuICBvblBva2Vtb25TcG90dGVkPzogKHBva2Vtb246IHsgbmFtZTogc3RyaW5nOyBzcHJpdGVVcmw6IHN0cmluZzsgcG9rZUlkOiBudW1iZXIgfSkgPT4gdm9pZDtcclxuICBvblBva2Vtb25DbGVhcmVkPzogKCkgPT4gdm9pZDtcclxuICBvblNwYXduc1VwZGF0ZT86IChzcGF3bnM6IGFueVtdKSA9PiB2b2lkO1xyXG4gIHBsYXllclBva2Vtb24/OiBhbnk7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIEdhbWUoe1xyXG4gIGNsYXNzTmFtZSA9IFwiXCIsXHJcbiAgdGlsZVNpemUgPSAzMixcclxuICBtYXBXaWR0aCA9IDUwLFxyXG4gIG1hcEhlaWdodCA9IDM4LFxyXG4gIHBsYXllclNwZWVkID0gMjAwLFxyXG4gIGluaXRpYWxYLFxyXG4gIGluaXRpYWxZLFxyXG4gIG9uUG9rZW1vblNwb3R0ZWQsXHJcbiAgb25Qb2tlbW9uQ2xlYXJlZCxcclxuICBvblNwYXduc1VwZGF0ZSxcclxuICBwbGF5ZXJQb2tlbW9uLFxyXG59OiBHYW1lUHJvcHMpIHtcclxuICBjb25zdCBnYW1lUmVmID0gdXNlUmVmPEhUTUxEaXZFbGVtZW50PihudWxsKTtcclxuICBjb25zdCBwaGFzZXJHYW1lUmVmID0gdXNlUmVmPFBoYXNlci5HYW1lIHwgbnVsbD4obnVsbCk7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAoIWdhbWVSZWYuY3VycmVudCkgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IGdldFNpemUgPSAoKSA9PiAoeyB3OiBnYW1lUmVmLmN1cnJlbnQhLmNsaWVudFdpZHRoLCBoOiBnYW1lUmVmLmN1cnJlbnQhLmNsaWVudEhlaWdodCB9KTtcclxuICAgIGNvbnN0IHsgdywgaCB9ID0gZ2V0U2l6ZSgpO1xyXG5cclxuICAgIGNvbnN0IGNvbmZpZzogUGhhc2VyLlR5cGVzLkNvcmUuR2FtZUNvbmZpZyA9IHtcclxuICAgICAgdHlwZTogUGhhc2VyLkFVVE8sXHJcbiAgICAgIHdpZHRoOiBNYXRoLm1heCgzMjAsIHcpLFxyXG4gICAgICBoZWlnaHQ6IE1hdGgubWF4KDI0MCwgaCksXHJcbiAgICAgIHBhcmVudDogZ2FtZVJlZi5jdXJyZW50LFxyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiIzBiMGUxNFwiLFxyXG4gICAgICBwaHlzaWNzOiB7XHJcbiAgICAgICAgZGVmYXVsdDogXCJhcmNhZGVcIixcclxuICAgICAgICBhcmNhZGU6IHtcclxuICAgICAgICAgIGdyYXZpdHk6IHsgeDogMCwgeTogMCB9LFxyXG4gICAgICAgICAgZGVidWc6IGZhbHNlLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICAgIHNjZW5lOiBbR2FtZVNjZW5lLCBCYXR0bGVTY2VuZV0sXHJcbiAgICAgIHNjYWxlOiB7XHJcbiAgICAgICAgbW9kZTogUGhhc2VyLlNjYWxlLlJFU0laRSxcclxuICAgICAgICBhdXRvQ2VudGVyOiBQaGFzZXIuU2NhbGUuQ0VOVEVSX0JPVEgsXHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG5cclxuICAgIHBoYXNlckdhbWVSZWYuY3VycmVudCA9IG5ldyBQaGFzZXIuR2FtZShjb25maWcpO1xyXG5cclxuICAgIGNvbnN0IHN0YXJ0T3JSZXN0YXJ0ID0gKCkgPT4ge1xyXG4gICAgICBjb25zdCBnYW1lID0gcGhhc2VyR2FtZVJlZi5jdXJyZW50IGFzIFBoYXNlci5HYW1lO1xyXG4gICAgICBjb25zdCBkYXRhID0ge1xyXG4gICAgICAgIHRpbGVTaXplLFxyXG4gICAgICAgIG1hcFdpZHRoLFxyXG4gICAgICAgIG1hcEhlaWdodCxcclxuICAgICAgICBwbGF5ZXJTcGVlZCxcclxuICAgICAgICBpbml0aWFsWCxcclxuICAgICAgICBpbml0aWFsWSxcclxuICAgICAgICBvblBva2Vtb25TcG90dGVkLFxyXG4gICAgICAgIG9uUG9rZW1vbkNsZWFyZWQsXHJcbiAgICAgICAgb25TcGF3bnNVcGRhdGUsXHJcbiAgICAgICAgcGxheWVyUG9rZW1vbixcclxuICAgICAgfTtcclxuICAgICAgY29uc3QgbWdyID0gZ2FtZS5zY2VuZTtcclxuICAgICAgaWYgKG1nci5pc0FjdGl2ZShcIkdhbWVTY2VuZVwiKSkge1xyXG4gICAgICAgIG1nci5zdG9wKFwiR2FtZVNjZW5lXCIpO1xyXG4gICAgICAgIG1nci5zdGFydChcIkdhbWVTY2VuZVwiLCBkYXRhKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBtZ3Iuc3RhcnQoXCJHYW1lU2NlbmVcIiwgZGF0YSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgaWYgKHBoYXNlckdhbWVSZWYuY3VycmVudC5pc0Jvb3RlZCkgc3RhcnRPclJlc3RhcnQoKTtcclxuICAgIGVsc2UgcGhhc2VyR2FtZVJlZi5jdXJyZW50LmV2ZW50cy5vbmNlKFBoYXNlci5Db3JlLkV2ZW50cy5SRUFEWSwgc3RhcnRPclJlc3RhcnQpO1xyXG5cclxuICAgIGNvbnN0IHJvID0gbmV3IFJlc2l6ZU9ic2VydmVyKCgpID0+IHtcclxuICAgICAgaWYgKCFwaGFzZXJHYW1lUmVmLmN1cnJlbnQgfHwgIWdhbWVSZWYuY3VycmVudCkgcmV0dXJuO1xyXG4gICAgICBjb25zdCB7IHc6IG53LCBoOiBuaCB9ID0gZ2V0U2l6ZSgpO1xyXG4gICAgICBwaGFzZXJHYW1lUmVmLmN1cnJlbnQuc2NhbGUucmVzaXplKE1hdGgubWF4KDMyMCwgbncpLCBNYXRoLm1heCgyNDAsIG5oKSk7XHJcbiAgICB9KTtcclxuICAgIHJvLm9ic2VydmUoZ2FtZVJlZi5jdXJyZW50KTtcclxuXHJcbiAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICByby5kaXNjb25uZWN0KCk7XHJcbiAgICAgIGlmIChwaGFzZXJHYW1lUmVmLmN1cnJlbnQpIHtcclxuICAgICAgICBwaGFzZXJHYW1lUmVmLmN1cnJlbnQuZGVzdHJveSh0cnVlKTtcclxuICAgICAgICBwaGFzZXJHYW1lUmVmLmN1cnJlbnQgPSBudWxsO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH0sIFt0aWxlU2l6ZSwgbWFwV2lkdGgsIG1hcEhlaWdodCwgcGxheWVyU3BlZWQsIGluaXRpYWxYLCBpbml0aWFsWSwgb25Qb2tlbW9uU3BvdHRlZCwgb25Qb2tlbW9uQ2xlYXJlZCwgb25TcGF3bnNVcGRhdGUsIHBsYXllclBva2Vtb25dKTtcclxuXHJcbiAgcmV0dXJuIChcclxuICAgIDxkaXZcclxuICAgICAgcmVmPXtnYW1lUmVmfVxyXG4gICAgICBjbGFzc05hbWU9e2BnYW1lLWNvbnRhaW5lciAke2NsYXNzTmFtZX1gfVxyXG4gICAgICBzdHlsZT17eyB3aWR0aDogXCIxMDAlXCIsIGhlaWdodDogXCIxMDAlXCIgfX1cclxuICAgIC8+XHJcbiAgKTtcclxufVxyXG4iXSwibmFtZXMiOlsiUGhhc2VyIiwidXNlRWZmZWN0IiwidXNlUmVmIiwiR2FtZVNjZW5lIiwiQmF0dGxlU2NlbmUiLCJHYW1lIiwiY2xhc3NOYW1lIiwidGlsZVNpemUiLCJtYXBXaWR0aCIsIm1hcEhlaWdodCIsInBsYXllclNwZWVkIiwiaW5pdGlhbFgiLCJpbml0aWFsWSIsIm9uUG9rZW1vblNwb3R0ZWQiLCJvblBva2Vtb25DbGVhcmVkIiwib25TcGF3bnNVcGRhdGUiLCJwbGF5ZXJQb2tlbW9uIiwiZ2FtZVJlZiIsInBoYXNlckdhbWVSZWYiLCJjdXJyZW50IiwiZ2V0U2l6ZSIsInciLCJjbGllbnRXaWR0aCIsImgiLCJjbGllbnRIZWlnaHQiLCJjb25maWciLCJ0eXBlIiwiQVVUTyIsIndpZHRoIiwiTWF0aCIsIm1heCIsImhlaWdodCIsInBhcmVudCIsImJhY2tncm91bmRDb2xvciIsInBoeXNpY3MiLCJkZWZhdWx0IiwiYXJjYWRlIiwiZ3Jhdml0eSIsIngiLCJ5IiwiZGVidWciLCJzY2VuZSIsInNjYWxlIiwibW9kZSIsIlNjYWxlIiwiUkVTSVpFIiwiYXV0b0NlbnRlciIsIkNFTlRFUl9CT1RIIiwic3RhcnRPclJlc3RhcnQiLCJnYW1lIiwiZGF0YSIsIm1nciIsImlzQWN0aXZlIiwic3RvcCIsInN0YXJ0IiwiaXNCb290ZWQiLCJldmVudHMiLCJvbmNlIiwiQ29yZSIsIkV2ZW50cyIsIlJFQURZIiwicm8iLCJSZXNpemVPYnNlcnZlciIsIm53IiwibmgiLCJyZXNpemUiLCJvYnNlcnZlIiwiZGlzY29ubmVjdCIsImRlc3Ryb3kiLCJkaXYiLCJyZWYiLCJzdHlsZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(pages-dir-node)/./components/Game.tsx\n");

/***/ }),

/***/ "(pages-dir-node)/./lib/biomes.ts":
/*!***********************!*\
  !*** ./lib/biomes.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BIOMES: () => (/* binding */ BIOMES)\n/* harmony export */ });\nconst BIOMES = {\n    grassland: {\n        id: \"grassland\",\n        name: \"Grassland\",\n        environmentColor: 0x87cc5c,\n        tileSet: {\n            ground: \"tilesheet\",\n            obstacle: \"tilesheet\"\n        },\n        pokemonPool: [\n            \"grass\",\n            \"bug\",\n            \"normal\",\n            \"flying\"\n        ],\n        weather: \"sun\"\n    },\n    desert: {\n        id: \"desert\",\n        name: \"Desert\",\n        environmentColor: 0xdeb887,\n        tileSet: {\n            ground: \"tilesheet\",\n            obstacle: \"tilesheet\"\n        },\n        pokemonPool: [\n            \"ground\",\n            \"rock\",\n            \"fire\"\n        ],\n        weather: \"sun\"\n    },\n    lake: {\n        id: \"lake\",\n        name: \"Lake\",\n        environmentColor: 0x66a3ff,\n        tileSet: {\n            ground: \"tilesheet\",\n            obstacle: \"tilesheet\"\n        },\n        pokemonPool: [\n            \"water\",\n            \"dragon\",\n            \"fairy\"\n        ],\n        weather: \"fog\"\n    },\n    city: {\n        id: \"city\",\n        name: \"City\",\n        environmentColor: 0x999999,\n        tileSet: {\n            ground: \"tilesheet\",\n            obstacle: \"tilesheet\"\n        },\n        pokemonPool: [\n            \"electric\",\n            \"normal\",\n            \"steel\",\n            \"fighting\"\n        ],\n        weather: \"none\"\n    },\n    mountain: {\n        id: \"mountain\",\n        name: \"Mountain\",\n        environmentColor: 0xb0c4de,\n        tileSet: {\n            ground: \"tilesheet\",\n            obstacle: \"tilesheet\"\n        },\n        pokemonPool: [\n            \"rock\",\n            \"ground\",\n            \"ice\",\n            \"dragon\"\n        ],\n        weather: \"snow\"\n    },\n    cave: {\n        id: \"cave\",\n        name: \"Cave\",\n        environmentColor: 0x444444,\n        tileSet: {\n            ground: \"tilesheet\",\n            obstacle: \"tilesheet\"\n        },\n        pokemonPool: [\n            \"rock\",\n            \"ground\",\n            \"poison\",\n            \"dark\"\n        ],\n        weather: \"fog\"\n    },\n    forest: {\n        id: \"forest\",\n        name: \"Forest\",\n        environmentColor: 0x2f6f4f,\n        tileSet: {\n            ground: \"tilesheet\",\n            obstacle: \"tilesheet\"\n        },\n        pokemonPool: [\n            \"grass\",\n            \"bug\",\n            \"fairy\"\n        ],\n        weather: \"fog\"\n    },\n    snowfield: {\n        id: \"snowfield\",\n        name: \"Snowfield\",\n        environmentColor: 0xe0f7ff,\n        tileSet: {\n            ground: \"tilesheet\",\n            obstacle: \"tilesheet\"\n        },\n        pokemonPool: [\n            \"ice\",\n            \"water\"\n        ],\n        weather: \"snow\"\n    },\n    tower: {\n        id: \"tower\",\n        name: \"Ancient Tower\",\n        environmentColor: 0x551a8b,\n        tileSet: {\n            ground: \"tilesheet\",\n            obstacle: \"tilesheet\"\n        },\n        pokemonPool: [\n            \"ghost\",\n            \"dark\"\n        ],\n        weather: \"fog\"\n    },\n    lab: {\n        id: \"lab\",\n        name: \"Research Lab\",\n        environmentColor: 0xccccff,\n        tileSet: {\n            ground: \"tilesheet\",\n            obstacle: \"tilesheet\"\n        },\n        pokemonPool: [\n            \"electric\",\n            \"steel\",\n            \"psychic\"\n        ],\n        weather: \"none\"\n    },\n    temple: {\n        id: \"temple\",\n        name: \"Desert Temple\",\n        environmentColor: 0xc2b280,\n        tileSet: {\n            ground: \"tilesheet\",\n            obstacle: \"tilesheet\"\n        },\n        pokemonPool: [\n            \"ground\",\n            \"rock\",\n            \"fire\"\n        ],\n        weather: \"sun\"\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1ub2RlKS8uL2xpYi9iaW9tZXMudHMiLCJtYXBwaW5ncyI6Ijs7OztBQWNPLE1BQU1BLFNBQW9DO0lBQy9DQyxXQUFXO1FBQ1RDLElBQUk7UUFDSkMsTUFBTTtRQUNOQyxrQkFBa0I7UUFDbEJDLFNBQVM7WUFBRUMsUUFBUTtZQUFhQyxVQUFVO1FBQVk7UUFDdERDLGFBQWE7WUFBQztZQUFTO1lBQU87WUFBVTtTQUFTO1FBQ2pEQyxTQUFTO0lBQ1g7SUFDQUMsUUFBUTtRQUNOUixJQUFJO1FBQ0pDLE1BQU07UUFDTkMsa0JBQWtCO1FBQ2xCQyxTQUFTO1lBQUVDLFFBQVE7WUFBYUMsVUFBVTtRQUFZO1FBQ3REQyxhQUFhO1lBQUM7WUFBVTtZQUFRO1NBQU87UUFDdkNDLFNBQVM7SUFDWDtJQUNBRSxNQUFNO1FBQ0pULElBQUk7UUFDSkMsTUFBTTtRQUNOQyxrQkFBa0I7UUFDbEJDLFNBQVM7WUFBRUMsUUFBUTtZQUFhQyxVQUFVO1FBQVk7UUFDdERDLGFBQWE7WUFBQztZQUFTO1lBQVU7U0FBUTtRQUN6Q0MsU0FBUztJQUNYO0lBQ0FHLE1BQU07UUFDSlYsSUFBSTtRQUNKQyxNQUFNO1FBQ05DLGtCQUFrQjtRQUNsQkMsU0FBUztZQUFFQyxRQUFRO1lBQWFDLFVBQVU7UUFBWTtRQUN0REMsYUFBYTtZQUFDO1lBQVk7WUFBVTtZQUFTO1NBQVc7UUFDeERDLFNBQVM7SUFDWDtJQUNBSSxVQUFVO1FBQ1JYLElBQUk7UUFDSkMsTUFBTTtRQUNOQyxrQkFBa0I7UUFDbEJDLFNBQVM7WUFBRUMsUUFBUTtZQUFhQyxVQUFVO1FBQVk7UUFDdERDLGFBQWE7WUFBQztZQUFRO1lBQVU7WUFBTztTQUFTO1FBQ2hEQyxTQUFTO0lBQ1g7SUFDQUssTUFBTTtRQUNKWixJQUFJO1FBQ0pDLE1BQU07UUFDTkMsa0JBQWtCO1FBQ2xCQyxTQUFTO1lBQUVDLFFBQVE7WUFBYUMsVUFBVTtRQUFZO1FBQ3REQyxhQUFhO1lBQUM7WUFBUTtZQUFVO1lBQVU7U0FBTztRQUNqREMsU0FBUztJQUNYO0lBQ0FNLFFBQVE7UUFDTmIsSUFBSTtRQUNKQyxNQUFNO1FBQ05DLGtCQUFrQjtRQUNsQkMsU0FBUztZQUFFQyxRQUFRO1lBQWFDLFVBQVU7UUFBWTtRQUN0REMsYUFBYTtZQUFDO1lBQVM7WUFBTztTQUFRO1FBQ3RDQyxTQUFTO0lBQ1g7SUFDQU8sV0FBVztRQUNUZCxJQUFJO1FBQ0pDLE1BQU07UUFDTkMsa0JBQWtCO1FBQ2xCQyxTQUFTO1lBQUVDLFFBQVE7WUFBYUMsVUFBVTtRQUFZO1FBQ3REQyxhQUFhO1lBQUM7WUFBTztTQUFRO1FBQzdCQyxTQUFTO0lBQ1g7SUFDQVEsT0FBTztRQUNMZixJQUFJO1FBQ0pDLE1BQU07UUFDTkMsa0JBQWtCO1FBQ2xCQyxTQUFTO1lBQUVDLFFBQVE7WUFBYUMsVUFBVTtRQUFZO1FBQ3REQyxhQUFhO1lBQUM7WUFBUztTQUFPO1FBQzlCQyxTQUFTO0lBQ1g7SUFDQVMsS0FBSztRQUNIaEIsSUFBSTtRQUNKQyxNQUFNO1FBQ05DLGtCQUFrQjtRQUNsQkMsU0FBUztZQUFFQyxRQUFRO1lBQWFDLFVBQVU7UUFBWTtRQUN0REMsYUFBYTtZQUFDO1lBQVk7WUFBUztTQUFVO1FBQzdDQyxTQUFTO0lBQ1g7SUFDQVUsUUFBUTtRQUNOakIsSUFBSTtRQUNKQyxNQUFNO1FBQ05DLGtCQUFrQjtRQUNsQkMsU0FBUztZQUFFQyxRQUFRO1lBQWFDLFVBQVU7UUFBWTtRQUN0REMsYUFBYTtZQUFDO1lBQVU7WUFBUTtTQUFPO1FBQ3ZDQyxTQUFTO0lBQ1g7QUFDRixFQUFFIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFNhaGl0aFxcT25lRHJpdmVcXERlc2t0b3BcXHlva2FpaHVudFxcZnJvbnRlbmRcXGxpYlxcYmlvbWVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB0eXBlIEJpb21lSWQgPSBcImdyYXNzbGFuZFwiIHwgXCJkZXNlcnRcIiB8IFwibGFrZVwiIHwgXCJjaXR5XCIgfCBcIm1vdW50YWluXCIgfCBcImNhdmVcIiB8IFwiZm9yZXN0XCIgfCBcInNub3dmaWVsZFwiIHwgXCJ0b3dlclwiIHwgXCJsYWJcIiB8IFwidGVtcGxlXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEJpb21lRGVmIHtcclxuICBpZDogQmlvbWVJZDtcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgZW52aXJvbm1lbnRDb2xvcjogbnVtYmVyOyAvLyBoZXggY29sb3IgZm9yIG92ZXJsYXlcclxuICB0aWxlU2V0OiB7XHJcbiAgICBncm91bmQ6IHN0cmluZzsgLy8ga2V5IHVzZWQgaW4gUGhhc2VyIHRleHR1cmVzIG1hbmFnZXJcclxuICAgIG9ic3RhY2xlOiBzdHJpbmc7XHJcbiAgfTtcclxuICBwb2tlbW9uUG9vbDogc3RyaW5nW107IC8vIHR5cGUgbmFtZXMgdG8gcHJlZmVyXHJcbiAgd2VhdGhlcj86IFwiZm9nXCIgfCBcInNub3dcIiB8IFwic3VuXCIgfCBcIm5vbmVcIjtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEJJT01FUzogUmVjb3JkPEJpb21lSWQsIEJpb21lRGVmPiA9IHtcclxuICBncmFzc2xhbmQ6IHtcclxuICAgIGlkOiBcImdyYXNzbGFuZFwiLFxyXG4gICAgbmFtZTogXCJHcmFzc2xhbmRcIixcclxuICAgIGVudmlyb25tZW50Q29sb3I6IDB4ODdjYzVjLFxyXG4gICAgdGlsZVNldDogeyBncm91bmQ6IFwidGlsZXNoZWV0XCIsIG9ic3RhY2xlOiBcInRpbGVzaGVldFwiIH0sXHJcbiAgICBwb2tlbW9uUG9vbDogW1wiZ3Jhc3NcIiwgXCJidWdcIiwgXCJub3JtYWxcIiwgXCJmbHlpbmdcIl0sXHJcbiAgICB3ZWF0aGVyOiBcInN1blwiLFxyXG4gIH0sXHJcbiAgZGVzZXJ0OiB7XHJcbiAgICBpZDogXCJkZXNlcnRcIixcclxuICAgIG5hbWU6IFwiRGVzZXJ0XCIsXHJcbiAgICBlbnZpcm9ubWVudENvbG9yOiAweGRlYjg4NyxcclxuICAgIHRpbGVTZXQ6IHsgZ3JvdW5kOiBcInRpbGVzaGVldFwiLCBvYnN0YWNsZTogXCJ0aWxlc2hlZXRcIiB9LFxyXG4gICAgcG9rZW1vblBvb2w6IFtcImdyb3VuZFwiLCBcInJvY2tcIiwgXCJmaXJlXCJdLFxyXG4gICAgd2VhdGhlcjogXCJzdW5cIixcclxuICB9LFxyXG4gIGxha2U6IHtcclxuICAgIGlkOiBcImxha2VcIixcclxuICAgIG5hbWU6IFwiTGFrZVwiLFxyXG4gICAgZW52aXJvbm1lbnRDb2xvcjogMHg2NmEzZmYsXHJcbiAgICB0aWxlU2V0OiB7IGdyb3VuZDogXCJ0aWxlc2hlZXRcIiwgb2JzdGFjbGU6IFwidGlsZXNoZWV0XCIgfSxcclxuICAgIHBva2Vtb25Qb29sOiBbXCJ3YXRlclwiLCBcImRyYWdvblwiLCBcImZhaXJ5XCJdLFxyXG4gICAgd2VhdGhlcjogXCJmb2dcIixcclxuICB9LFxyXG4gIGNpdHk6IHtcclxuICAgIGlkOiBcImNpdHlcIixcclxuICAgIG5hbWU6IFwiQ2l0eVwiLFxyXG4gICAgZW52aXJvbm1lbnRDb2xvcjogMHg5OTk5OTksXHJcbiAgICB0aWxlU2V0OiB7IGdyb3VuZDogXCJ0aWxlc2hlZXRcIiwgb2JzdGFjbGU6IFwidGlsZXNoZWV0XCIgfSxcclxuICAgIHBva2Vtb25Qb29sOiBbXCJlbGVjdHJpY1wiLCBcIm5vcm1hbFwiLCBcInN0ZWVsXCIsIFwiZmlnaHRpbmdcIl0sXHJcbiAgICB3ZWF0aGVyOiBcIm5vbmVcIixcclxuICB9LFxyXG4gIG1vdW50YWluOiB7XHJcbiAgICBpZDogXCJtb3VudGFpblwiLFxyXG4gICAgbmFtZTogXCJNb3VudGFpblwiLFxyXG4gICAgZW52aXJvbm1lbnRDb2xvcjogMHhiMGM0ZGUsXHJcbiAgICB0aWxlU2V0OiB7IGdyb3VuZDogXCJ0aWxlc2hlZXRcIiwgb2JzdGFjbGU6IFwidGlsZXNoZWV0XCIgfSxcclxuICAgIHBva2Vtb25Qb29sOiBbXCJyb2NrXCIsIFwiZ3JvdW5kXCIsIFwiaWNlXCIsIFwiZHJhZ29uXCJdLFxyXG4gICAgd2VhdGhlcjogXCJzbm93XCIsXHJcbiAgfSxcclxuICBjYXZlOiB7XHJcbiAgICBpZDogXCJjYXZlXCIsXHJcbiAgICBuYW1lOiBcIkNhdmVcIixcclxuICAgIGVudmlyb25tZW50Q29sb3I6IDB4NDQ0NDQ0LFxyXG4gICAgdGlsZVNldDogeyBncm91bmQ6IFwidGlsZXNoZWV0XCIsIG9ic3RhY2xlOiBcInRpbGVzaGVldFwiIH0sXHJcbiAgICBwb2tlbW9uUG9vbDogW1wicm9ja1wiLCBcImdyb3VuZFwiLCBcInBvaXNvblwiLCBcImRhcmtcIl0sXHJcbiAgICB3ZWF0aGVyOiBcImZvZ1wiLFxyXG4gIH0sXHJcbiAgZm9yZXN0OiB7XHJcbiAgICBpZDogXCJmb3Jlc3RcIixcclxuICAgIG5hbWU6IFwiRm9yZXN0XCIsXHJcbiAgICBlbnZpcm9ubWVudENvbG9yOiAweDJmNmY0ZixcclxuICAgIHRpbGVTZXQ6IHsgZ3JvdW5kOiBcInRpbGVzaGVldFwiLCBvYnN0YWNsZTogXCJ0aWxlc2hlZXRcIiB9LFxyXG4gICAgcG9rZW1vblBvb2w6IFtcImdyYXNzXCIsIFwiYnVnXCIsIFwiZmFpcnlcIl0sXHJcbiAgICB3ZWF0aGVyOiBcImZvZ1wiLFxyXG4gIH0sXHJcbiAgc25vd2ZpZWxkOiB7XHJcbiAgICBpZDogXCJzbm93ZmllbGRcIixcclxuICAgIG5hbWU6IFwiU25vd2ZpZWxkXCIsXHJcbiAgICBlbnZpcm9ubWVudENvbG9yOiAweGUwZjdmZixcclxuICAgIHRpbGVTZXQ6IHsgZ3JvdW5kOiBcInRpbGVzaGVldFwiLCBvYnN0YWNsZTogXCJ0aWxlc2hlZXRcIiB9LFxyXG4gICAgcG9rZW1vblBvb2w6IFtcImljZVwiLCBcIndhdGVyXCJdLFxyXG4gICAgd2VhdGhlcjogXCJzbm93XCIsXHJcbiAgfSxcclxuICB0b3dlcjoge1xyXG4gICAgaWQ6IFwidG93ZXJcIixcclxuICAgIG5hbWU6IFwiQW5jaWVudCBUb3dlclwiLFxyXG4gICAgZW52aXJvbm1lbnRDb2xvcjogMHg1NTFhOGIsXHJcbiAgICB0aWxlU2V0OiB7IGdyb3VuZDogXCJ0aWxlc2hlZXRcIiwgb2JzdGFjbGU6IFwidGlsZXNoZWV0XCIgfSxcclxuICAgIHBva2Vtb25Qb29sOiBbXCJnaG9zdFwiLCBcImRhcmtcIl0sXHJcbiAgICB3ZWF0aGVyOiBcImZvZ1wiLFxyXG4gIH0sXHJcbiAgbGFiOiB7XHJcbiAgICBpZDogXCJsYWJcIixcclxuICAgIG5hbWU6IFwiUmVzZWFyY2ggTGFiXCIsXHJcbiAgICBlbnZpcm9ubWVudENvbG9yOiAweGNjY2NmZixcclxuICAgIHRpbGVTZXQ6IHsgZ3JvdW5kOiBcInRpbGVzaGVldFwiLCBvYnN0YWNsZTogXCJ0aWxlc2hlZXRcIiB9LFxyXG4gICAgcG9rZW1vblBvb2w6IFtcImVsZWN0cmljXCIsIFwic3RlZWxcIiwgXCJwc3ljaGljXCJdLFxyXG4gICAgd2VhdGhlcjogXCJub25lXCIsXHJcbiAgfSxcclxuICB0ZW1wbGU6IHtcclxuICAgIGlkOiBcInRlbXBsZVwiLFxyXG4gICAgbmFtZTogXCJEZXNlcnQgVGVtcGxlXCIsXHJcbiAgICBlbnZpcm9ubWVudENvbG9yOiAweGMyYjI4MCxcclxuICAgIHRpbGVTZXQ6IHsgZ3JvdW5kOiBcInRpbGVzaGVldFwiLCBvYnN0YWNsZTogXCJ0aWxlc2hlZXRcIiB9LFxyXG4gICAgcG9rZW1vblBvb2w6IFtcImdyb3VuZFwiLCBcInJvY2tcIiwgXCJmaXJlXCJdLFxyXG4gICAgd2VhdGhlcjogXCJzdW5cIixcclxuICB9LFxyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgU3RydWN0dXJlVHlwZSA9IFwiaG91c2VcIiB8IFwidG93ZXJcIiB8IFwibGFiXCIgfCBcInRlbXBsZVwiO1xyXG5leHBvcnQgaW50ZXJmYWNlIFN0cnVjdHVyZURlZiB7IGlkOiBzdHJpbmc7IHR5cGU6IFN0cnVjdHVyZVR5cGU7IGNvbDogbnVtYmVyOyByb3c6IG51bWJlcjsgeDogbnVtYmVyOyB5OiBudW1iZXI7IH1cclxuIl0sIm5hbWVzIjpbIkJJT01FUyIsImdyYXNzbGFuZCIsImlkIiwibmFtZSIsImVudmlyb25tZW50Q29sb3IiLCJ0aWxlU2V0IiwiZ3JvdW5kIiwib2JzdGFjbGUiLCJwb2tlbW9uUG9vbCIsIndlYXRoZXIiLCJkZXNlcnQiLCJsYWtlIiwiY2l0eSIsIm1vdW50YWluIiwiY2F2ZSIsImZvcmVzdCIsInNub3dmaWVsZCIsInRvd2VyIiwibGFiIiwidGVtcGxlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-node)/./lib/biomes.ts\n");

/***/ }),

/***/ "(pages-dir-node)/./lib/mapZones.ts":
/*!*************************!*\
  !*** ./lib/mapZones.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BIOME_TYPE_POOLS: () => (/* binding */ BIOME_TYPE_POOLS),\n/* harmony export */   ZONE_TILES: () => (/* binding */ ZONE_TILES),\n/* harmony export */   generateZones: () => (/* binding */ generateZones),\n/* harmony export */   getAdjacentZoneCoords: () => (/* binding */ getAdjacentZoneCoords),\n/* harmony export */   getZoneForTile: () => (/* binding */ getZoneForTile)\n/* harmony export */ });\nconst ZONE_TILES = 10; // 10x10 tiles per zone\n// Simple deterministic biome layout over an R x C grid\nfunction generateZones(cols, rows) {\n    const zones = [];\n    for(let r = 0; r < rows; r++){\n        for(let c = 0; c < cols; c++){\n            let biome = \"grassland\";\n            const edge = r === 0 || c === 0 || r === rows - 1 || c === cols - 1;\n            if (r === 0) biome = \"mountain\"; // top ridge\n            else if (r === rows - 1) biome = \"beach\"; // bottom shore\n            else if ((r === Math.floor(rows / 2) || r === Math.floor(rows / 2) - 1) && (c === Math.floor(cols / 2) || c === Math.floor(cols / 2) - 1)) biome = \"lake\"; // 2x2 lake\n            else if (edge && (r === 1 || c === 1 || r === rows - 2 || c === cols - 2)) biome = \"cave\"; // near edges\n            else if ((r + c) % 9 === 0) biome = \"city\"; // a few city blocks\n            else if ((r + 2 * c) % 6 === 0) biome = \"forest\";\n            else if (r % 5 === 0 && c % 3 === 0) biome = \"desert\";\n            else if ((r - c) % 8 === 0) biome = \"snowfield\";\n            else biome = \"grassland\";\n            zones.push({\n                id: `${c},${r}`,\n                col: c,\n                row: r,\n                biome\n            });\n        }\n    }\n    return zones;\n}\nfunction getZoneForTile(tileX, tileY, zoneCols, zoneRows) {\n    const col = Math.max(0, Math.min(zoneCols - 1, Math.floor(tileX / ZONE_TILES)));\n    const row = Math.max(0, Math.min(zoneRows - 1, Math.floor(tileY / ZONE_TILES)));\n    return {\n        col,\n        row,\n        id: `${col},${row}`\n    };\n}\nfunction getAdjacentZoneCoords(col, row, zoneCols, zoneRows, radius = 1) {\n    const out = [];\n    for(let dy = -radius; dy <= radius; dy++){\n        for(let dx = -radius; dx <= radius; dx++){\n            const nc = col + dx;\n            const nr = row + dy;\n            if (nc < 0 || nr < 0 || nc >= zoneCols || nr >= zoneRows) continue;\n            out.push({\n                col: nc,\n                row: nr,\n                id: `${nc},${nr}`\n            });\n        }\n    }\n    return out;\n}\nconst BIOME_TYPE_POOLS = {\n    grassland: [\n        \"grass\",\n        \"bug\",\n        \"normal\",\n        \"flying\"\n    ],\n    cave: [\n        \"rock\",\n        \"ground\",\n        \"poison\",\n        \"dark\"\n    ],\n    beach: [\n        \"water\",\n        \"flying\"\n    ],\n    city: [\n        \"electric\",\n        \"normal\",\n        \"steel\",\n        \"fighting\"\n    ],\n    mountain: [\n        \"rock\",\n        \"ground\",\n        \"ice\",\n        \"dragon\"\n    ],\n    lake: [\n        \"water\",\n        \"dragon\",\n        \"fairy\"\n    ],\n    desert: [\n        \"ground\",\n        \"rock\",\n        \"fire\"\n    ],\n    forest: [\n        \"grass\",\n        \"bug\",\n        \"fairy\"\n    ],\n    snowfield: [\n        \"ice\",\n        \"water\",\n        \"fairy\"\n    ]\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1ub2RlKS8uL2xpYi9tYXBab25lcy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUVPLE1BQU1BLGFBQWEsR0FBRyxDQUFDLHVCQUF1QjtBQVNyRCx1REFBdUQ7QUFDaEQsU0FBU0MsY0FBY0MsSUFBWSxFQUFFQyxJQUFZO0lBQ3RELE1BQU1DLFFBQWdCLEVBQUU7SUFDeEIsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlGLE1BQU1FLElBQUs7UUFDN0IsSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlKLE1BQU1JLElBQUs7WUFDN0IsSUFBSUMsUUFBZTtZQUNuQixNQUFNQyxPQUFPSCxNQUFNLEtBQUtDLE1BQU0sS0FBS0QsTUFBTUYsT0FBTyxLQUFLRyxNQUFNSixPQUFPO1lBQ2xFLElBQUlHLE1BQU0sR0FBR0UsUUFBUSxZQUFZLFlBQVk7aUJBQ3hDLElBQUlGLE1BQU1GLE9BQU8sR0FBR0ksUUFBUSxTQUFTLGVBQWU7aUJBQ3BELElBQUksQ0FBQ0YsTUFBTUksS0FBS0MsS0FBSyxDQUFDUCxPQUFPLE1BQU1FLE1BQU1JLEtBQUtDLEtBQUssQ0FBQ1AsT0FBTyxLQUFLLE1BQzNERyxDQUFBQSxNQUFNRyxLQUFLQyxLQUFLLENBQUNSLE9BQU8sTUFBTUksTUFBTUcsS0FBS0MsS0FBSyxDQUFDUixPQUFPLEtBQUssSUFBSUssUUFBUSxRQUFRLFdBQVc7aUJBQy9GLElBQUlDLFFBQVNILENBQUFBLE1BQU0sS0FBS0MsTUFBTSxLQUFLRCxNQUFNRixPQUFPLEtBQUtHLE1BQU1KLE9BQU8sSUFBSUssUUFBUSxRQUFRLGFBQWE7aUJBQ25HLElBQUksQ0FBQ0YsSUFBSUMsQ0FBQUEsSUFBSyxNQUFNLEdBQUdDLFFBQVEsUUFBUSxvQkFBb0I7aUJBQzNELElBQUksQ0FBQ0YsSUFBSSxJQUFJQyxDQUFBQSxJQUFLLE1BQU0sR0FBR0MsUUFBUTtpQkFDbkMsSUFBSUYsSUFBSSxNQUFNLEtBQUtDLElBQUksTUFBTSxHQUFHQyxRQUFRO2lCQUN4QyxJQUFJLENBQUNGLElBQUlDLENBQUFBLElBQUssTUFBTSxHQUFHQyxRQUFRO2lCQUMvQkEsUUFBUTtZQUViSCxNQUFNTyxJQUFJLENBQUM7Z0JBQUVDLElBQUksR0FBR04sRUFBRSxDQUFDLEVBQUVELEdBQUc7Z0JBQUVRLEtBQUtQO2dCQUFHUSxLQUFLVDtnQkFBR0U7WUFBTTtRQUN0RDtJQUNGO0lBQ0EsT0FBT0g7QUFDVDtBQUVPLFNBQVNXLGVBQWVDLEtBQWEsRUFBRUMsS0FBYSxFQUFFQyxRQUFnQixFQUFFQyxRQUFnQjtJQUM3RixNQUFNTixNQUFNSixLQUFLVyxHQUFHLENBQUMsR0FBR1gsS0FBS1ksR0FBRyxDQUFDSCxXQUFXLEdBQUdULEtBQUtDLEtBQUssQ0FBQ00sUUFBUWhCO0lBQ2xFLE1BQU1jLE1BQU1MLEtBQUtXLEdBQUcsQ0FBQyxHQUFHWCxLQUFLWSxHQUFHLENBQUNGLFdBQVcsR0FBR1YsS0FBS0MsS0FBSyxDQUFDTyxRQUFRakI7SUFDbEUsT0FBTztRQUFFYTtRQUFLQztRQUFLRixJQUFJLEdBQUdDLElBQUksQ0FBQyxFQUFFQyxLQUFLO0lBQUM7QUFDekM7QUFFTyxTQUFTUSxzQkFBc0JULEdBQVcsRUFBRUMsR0FBVyxFQUFFSSxRQUFnQixFQUFFQyxRQUFnQixFQUFFSSxTQUFTLENBQUM7SUFDNUcsTUFBTUMsTUFBa0QsRUFBRTtJQUMxRCxJQUFLLElBQUlDLEtBQUssQ0FBQ0YsUUFBUUUsTUFBTUYsUUFBUUUsS0FBTTtRQUN6QyxJQUFLLElBQUlDLEtBQUssQ0FBQ0gsUUFBUUcsTUFBTUgsUUFBUUcsS0FBTTtZQUN6QyxNQUFNQyxLQUFLZCxNQUFNYTtZQUFJLE1BQU1FLEtBQUtkLE1BQU1XO1lBQ3RDLElBQUlFLEtBQUssS0FBS0MsS0FBSyxLQUFLRCxNQUFNVCxZQUFZVSxNQUFNVCxVQUFVO1lBQzFESyxJQUFJYixJQUFJLENBQUM7Z0JBQUVFLEtBQUtjO2dCQUFJYixLQUFLYztnQkFBSWhCLElBQUksR0FBR2UsR0FBRyxDQUFDLEVBQUVDLElBQUk7WUFBQztRQUNqRDtJQUNGO0lBQ0EsT0FBT0o7QUFDVDtBQUVPLE1BQU1LLG1CQUE0QztJQUN2REMsV0FBVztRQUFDO1FBQVM7UUFBTztRQUFVO0tBQVM7SUFDL0NDLE1BQU07UUFBQztRQUFRO1FBQVU7UUFBVTtLQUFPO0lBQzFDQyxPQUFPO1FBQUM7UUFBUztLQUFTO0lBQzFCQyxNQUFNO1FBQUM7UUFBWTtRQUFVO1FBQVM7S0FBVztJQUNqREMsVUFBVTtRQUFDO1FBQVE7UUFBVTtRQUFPO0tBQVM7SUFDN0NDLE1BQU07UUFBQztRQUFTO1FBQVU7S0FBUTtJQUNsQ0MsUUFBUTtRQUFDO1FBQVU7UUFBUTtLQUFPO0lBQ2xDQyxRQUFRO1FBQUM7UUFBUztRQUFPO0tBQVE7SUFDakNDLFdBQVc7UUFBQztRQUFPO1FBQVM7S0FBUTtBQUN0QyxFQUFFIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFNhaGl0aFxcT25lRHJpdmVcXERlc2t0b3BcXHlva2FpaHVudFxcZnJvbnRlbmRcXGxpYlxcbWFwWm9uZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHR5cGUgQmlvbWUgPSBcImdyYXNzbGFuZFwiIHwgXCJjYXZlXCIgfCBcImJlYWNoXCIgfCBcImNpdHlcIiB8IFwibW91bnRhaW5cIiB8IFwibGFrZVwiIHwgXCJkZXNlcnRcIiB8IFwiZm9yZXN0XCIgfCBcInNub3dmaWVsZFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFpPTkVfVElMRVMgPSAxMDsgLy8gMTB4MTAgdGlsZXMgcGVyIHpvbmVcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgWm9uZSB7XHJcbiAgaWQ6IHN0cmluZzsgLy8gXCJjLHJcIlxyXG4gIGNvbDogbnVtYmVyO1xyXG4gIHJvdzogbnVtYmVyO1xyXG4gIGJpb21lOiBCaW9tZTtcclxufVxyXG5cclxuLy8gU2ltcGxlIGRldGVybWluaXN0aWMgYmlvbWUgbGF5b3V0IG92ZXIgYW4gUiB4IEMgZ3JpZFxyXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVab25lcyhjb2xzOiBudW1iZXIsIHJvd3M6IG51bWJlcik6IFpvbmVbXSB7XHJcbiAgY29uc3Qgem9uZXM6IFpvbmVbXSA9IFtdO1xyXG4gIGZvciAobGV0IHIgPSAwOyByIDwgcm93czsgcisrKSB7XHJcbiAgICBmb3IgKGxldCBjID0gMDsgYyA8IGNvbHM7IGMrKykge1xyXG4gICAgICBsZXQgYmlvbWU6IEJpb21lID0gXCJncmFzc2xhbmRcIjtcclxuICAgICAgY29uc3QgZWRnZSA9IHIgPT09IDAgfHwgYyA9PT0gMCB8fCByID09PSByb3dzIC0gMSB8fCBjID09PSBjb2xzIC0gMTtcclxuICAgICAgaWYgKHIgPT09IDApIGJpb21lID0gXCJtb3VudGFpblwiOyAvLyB0b3AgcmlkZ2VcclxuICAgICAgZWxzZSBpZiAociA9PT0gcm93cyAtIDEpIGJpb21lID0gXCJiZWFjaFwiOyAvLyBib3R0b20gc2hvcmVcclxuICAgICAgZWxzZSBpZiAoKHIgPT09IE1hdGguZmxvb3Iocm93cyAvIDIpIHx8IHIgPT09IE1hdGguZmxvb3Iocm93cyAvIDIpIC0gMSkgJiZcclxuICAgICAgICAgICAgICAgKGMgPT09IE1hdGguZmxvb3IoY29scyAvIDIpIHx8IGMgPT09IE1hdGguZmxvb3IoY29scyAvIDIpIC0gMSkpIGJpb21lID0gXCJsYWtlXCI7IC8vIDJ4MiBsYWtlXHJcbiAgICAgIGVsc2UgaWYgKGVkZ2UgJiYgKHIgPT09IDEgfHwgYyA9PT0gMSB8fCByID09PSByb3dzIC0gMiB8fCBjID09PSBjb2xzIC0gMikpIGJpb21lID0gXCJjYXZlXCI7IC8vIG5lYXIgZWRnZXNcclxuICAgICAgZWxzZSBpZiAoKHIgKyBjKSAlIDkgPT09IDApIGJpb21lID0gXCJjaXR5XCI7IC8vIGEgZmV3IGNpdHkgYmxvY2tzXHJcbiAgICAgIGVsc2UgaWYgKChyICsgMiAqIGMpICUgNiA9PT0gMCkgYmlvbWUgPSBcImZvcmVzdFwiO1xyXG4gICAgICBlbHNlIGlmIChyICUgNSA9PT0gMCAmJiBjICUgMyA9PT0gMCkgYmlvbWUgPSBcImRlc2VydFwiO1xyXG4gICAgICBlbHNlIGlmICgociAtIGMpICUgOCA9PT0gMCkgYmlvbWUgPSBcInNub3dmaWVsZFwiO1xyXG4gICAgICBlbHNlIGJpb21lID0gXCJncmFzc2xhbmRcIjtcclxuXHJcbiAgICAgIHpvbmVzLnB1c2goeyBpZDogYCR7Y30sJHtyfWAsIGNvbDogYywgcm93OiByLCBiaW9tZSB9KTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHpvbmVzO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Wm9uZUZvclRpbGUodGlsZVg6IG51bWJlciwgdGlsZVk6IG51bWJlciwgem9uZUNvbHM6IG51bWJlciwgem9uZVJvd3M6IG51bWJlcik6IHsgY29sOiBudW1iZXI7IHJvdzogbnVtYmVyOyBpZDogc3RyaW5nIH0ge1xyXG4gIGNvbnN0IGNvbCA9IE1hdGgubWF4KDAsIE1hdGgubWluKHpvbmVDb2xzIC0gMSwgTWF0aC5mbG9vcih0aWxlWCAvIFpPTkVfVElMRVMpKSk7XHJcbiAgY29uc3Qgcm93ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oem9uZVJvd3MgLSAxLCBNYXRoLmZsb29yKHRpbGVZIC8gWk9ORV9USUxFUykpKTtcclxuICByZXR1cm4geyBjb2wsIHJvdywgaWQ6IGAke2NvbH0sJHtyb3d9YCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWRqYWNlbnRab25lQ29vcmRzKGNvbDogbnVtYmVyLCByb3c6IG51bWJlciwgem9uZUNvbHM6IG51bWJlciwgem9uZVJvd3M6IG51bWJlciwgcmFkaXVzID0gMSkge1xyXG4gIGNvbnN0IG91dDogeyBjb2w6IG51bWJlcjsgcm93OiBudW1iZXI7IGlkOiBzdHJpbmcgfVtdID0gW107XHJcbiAgZm9yIChsZXQgZHkgPSAtcmFkaXVzOyBkeSA8PSByYWRpdXM7IGR5KyspIHtcclxuICAgIGZvciAobGV0IGR4ID0gLXJhZGl1czsgZHggPD0gcmFkaXVzOyBkeCsrKSB7XHJcbiAgICAgIGNvbnN0IG5jID0gY29sICsgZHg7IGNvbnN0IG5yID0gcm93ICsgZHk7XHJcbiAgICAgIGlmIChuYyA8IDAgfHwgbnIgPCAwIHx8IG5jID49IHpvbmVDb2xzIHx8IG5yID49IHpvbmVSb3dzKSBjb250aW51ZTtcclxuICAgICAgb3V0LnB1c2goeyBjb2w6IG5jLCByb3c6IG5yLCBpZDogYCR7bmN9LCR7bnJ9YCB9KTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEJJT01FX1RZUEVfUE9PTFM6IFJlY29yZDxCaW9tZSwgc3RyaW5nW10+ID0ge1xyXG4gIGdyYXNzbGFuZDogW1wiZ3Jhc3NcIiwgXCJidWdcIiwgXCJub3JtYWxcIiwgXCJmbHlpbmdcIl0sXHJcbiAgY2F2ZTogW1wicm9ja1wiLCBcImdyb3VuZFwiLCBcInBvaXNvblwiLCBcImRhcmtcIl0sXHJcbiAgYmVhY2g6IFtcIndhdGVyXCIsIFwiZmx5aW5nXCJdLFxyXG4gIGNpdHk6IFtcImVsZWN0cmljXCIsIFwibm9ybWFsXCIsIFwic3RlZWxcIiwgXCJmaWdodGluZ1wiXSxcclxuICBtb3VudGFpbjogW1wicm9ja1wiLCBcImdyb3VuZFwiLCBcImljZVwiLCBcImRyYWdvblwiXSxcclxuICBsYWtlOiBbXCJ3YXRlclwiLCBcImRyYWdvblwiLCBcImZhaXJ5XCJdLFxyXG4gIGRlc2VydDogW1wiZ3JvdW5kXCIsIFwicm9ja1wiLCBcImZpcmVcIl0sXHJcbiAgZm9yZXN0OiBbXCJncmFzc1wiLCBcImJ1Z1wiLCBcImZhaXJ5XCJdLFxyXG4gIHNub3dmaWVsZDogW1wiaWNlXCIsIFwid2F0ZXJcIiwgXCJmYWlyeVwiXSxcclxufTtcclxuIl0sIm5hbWVzIjpbIlpPTkVfVElMRVMiLCJnZW5lcmF0ZVpvbmVzIiwiY29scyIsInJvd3MiLCJ6b25lcyIsInIiLCJjIiwiYmlvbWUiLCJlZGdlIiwiTWF0aCIsImZsb29yIiwicHVzaCIsImlkIiwiY29sIiwicm93IiwiZ2V0Wm9uZUZvclRpbGUiLCJ0aWxlWCIsInRpbGVZIiwiem9uZUNvbHMiLCJ6b25lUm93cyIsIm1heCIsIm1pbiIsImdldEFkamFjZW50Wm9uZUNvb3JkcyIsInJhZGl1cyIsIm91dCIsImR5IiwiZHgiLCJuYyIsIm5yIiwiQklPTUVfVFlQRV9QT09MUyIsImdyYXNzbGFuZCIsImNhdmUiLCJiZWFjaCIsImNpdHkiLCJtb3VudGFpbiIsImxha2UiLCJkZXNlcnQiLCJmb3Jlc3QiLCJzbm93ZmllbGQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-node)/./lib/mapZones.ts\n");

/***/ }),

/***/ "(pages-dir-node)/./lib/phaser/BattleScene.ts":
/*!***********************************!*\
  !*** ./lib/phaser/BattleScene.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BattleScene: () => (/* binding */ BattleScene)\n/* harmony export */ });\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! phaser */ \"phaser\");\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(phaser__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _typeEffectiveness__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../typeEffectiveness */ \"(pages-dir-node)/./lib/typeEffectiveness.ts\");\n\n\nclass BattleScene extends phaser__WEBPACK_IMPORTED_MODULE_0__.Scene {\n    constructor(){\n        super(\"BattleScene\"), this.wildHp = 0, this.wildMaxHp = 0, this.wildLevel = 5, this.playerHp = 0, this.playerMaxHp = 0, this.playerTeam = [], this.trainerLevel = 1, // Battle state\n        this.isPlayerTurn = true, this.battleInProgress = false, this.lastDamageInfo = null, this.floatingTexts = [];\n    }\n    init(data) {\n        this.wildPokemon = data.wildPokemon;\n        this.playerPokemon = data.playerPokemon;\n        this.playerTeam = data.playerTeam || [];\n        this.trainerLevel = data.trainerLevel || 1;\n        // Calculate wild Pokemon HP with level scaling\n        this.wildLevel = this.wildPokemon.level || 5;\n        const wildHpStat = this.wildPokemon.data?.stats?.find((s)=>s.stat.name === 'hp')?.base_stat || 50;\n        this.wildMaxHp = Math.floor(wildHpStat * 2 * this.wildLevel / 100 + this.wildLevel + 10);\n        this.wildHp = this.wildMaxHp;\n        this.playerMaxHp = this.playerPokemon.maxHp;\n        this.playerHp = this.playerPokemon.currentHp;\n        this.isPlayerTurn = true;\n        this.battleInProgress = false;\n    }\n    async preload() {\n        // Load Pokémon sprites if not already loaded\n        if (!this.textures.exists(`wild-${this.wildPokemon.pokeId}`)) {\n            await new Promise((resolve)=>{\n                this.load.once(phaser__WEBPACK_IMPORTED_MODULE_0__.Loader.Events.COMPLETE, ()=>resolve());\n                this.load.image(`wild-${this.wildPokemon.pokeId}`, this.wildPokemon.spriteUrl);\n                this.load.start();\n            });\n        }\n        if (!this.textures.exists(`player-${this.playerPokemon.pokeId}`)) {\n            await new Promise((resolve)=>{\n                this.load.once(phaser__WEBPACK_IMPORTED_MODULE_0__.Loader.Events.COMPLETE, ()=>resolve());\n                this.load.image(`player-${this.playerPokemon.pokeId}`, this.playerPokemon.spriteUrl);\n                this.load.start();\n            });\n        }\n    }\n    create() {\n        const { width, height } = this.scale;\n        // Background\n        this.add.rectangle(width / 2, height / 2, width, height, 0x87CEEB).setOrigin(0.5);\n        // Hide any lingering map UI by drawing an opaque footer (prevents DOM overlap perception)\n        this.add.rectangle(width / 2, height - 18, width, 36, 0x000000, 0.2).setDepth(5);\n        // Wild Pokémon (enemy, top right)\n        this.wildSprite = this.add.image(width * 0.75, height * 0.3, `wild-${this.wildPokemon.pokeId}`).setScale(2).setFlipX(false);\n        // Player Pokémon (bottom left, back sprite)\n        this.playerSprite = this.add.image(width * 0.25, height * 0.65, `player-${this.playerPokemon.pokeId}`).setScale(2).setFlipX(true);\n        this.createUI();\n        this.toast(`A wild ${this.capitalize(this.wildPokemon.name)} appeared!`, 1500);\n    }\n    createUI() {\n        const { width, height } = this.scale;\n        // Battle UI Container\n        this.battleUI = this.add.container(0, 0);\n        // Wild Pokémon HP Bar (top left)\n        const wildHpBg = this.add.rectangle(20, 20, 200, 20, 0x333333).setOrigin(0);\n        this.wildHpBar = this.add.rectangle(22, 22, 196, 16, 0x00ff00).setOrigin(0);\n        this.wildHpText = this.add.text(20, 45, `${this.capitalize(this.wildPokemon.name)} HP: ${this.wildHp}/${this.wildMaxHp}`, {\n            fontSize: '14px',\n            color: '#000'\n        });\n        // Player Pokémon HP Bar (bottom right)\n        const playerHpBg = this.add.rectangle(width - 220, height - 80, 200, 20, 0x333333).setOrigin(0);\n        this.playerHpBar = this.add.rectangle(width - 218, height - 78, 196, 16, 0x00ff00).setOrigin(0);\n        this.playerHpText = this.add.text(width - 220, height - 55, `${this.capitalize(this.playerPokemon.name)} Lv.${this.playerPokemon.level} HP: ${this.playerHp}/${this.playerMaxHp}`, {\n            fontSize: '14px',\n            color: '#000'\n        });\n        // Minimal status toast (top-right), no big dialog box\n        this.battleText = this.add.text(width - 360, 12, '', {\n            fontSize: '14px',\n            color: '#000',\n            backgroundColor: '#ffffffe6',\n            padding: {\n                x: 10,\n                y: 6\n            },\n            wordWrap: {\n                width: 340\n            }\n        }).setDepth(1002).setVisible(false);\n        // Action buttons (placed at right-middle as vertical stack)\n        this.createActionButtons();\n        this.battleUI.add([\n            wildHpBg,\n            this.wildHpBar,\n            this.wildHpText,\n            playerHpBg,\n            this.playerHpBar,\n            this.playerHpText\n        ]);\n    }\n    createActionButtons() {\n        const { width, height } = this.scale;\n        this.actionButtons = this.add.container(0, 0);\n        const baseX = width - 120;\n        const baseY = height / 2 - 100;\n        const vGap = 34;\n        const buttonData = [\n            {\n                text: 'FIGHT',\n                x: baseX,\n                y: baseY + vGap * 0,\n                action: ()=>this.showMoveSelection()\n            },\n            {\n                text: 'SWITCH',\n                x: baseX,\n                y: baseY + vGap * 1,\n                action: ()=>this.showTeamSelection()\n            },\n            {\n                text: 'BAG',\n                x: baseX,\n                y: baseY + vGap * 2,\n                action: ()=>this.openBag()\n            },\n            {\n                text: 'CATCH',\n                x: baseX,\n                y: baseY + vGap * 3,\n                action: ()=>this.attemptCatch()\n            },\n            {\n                text: 'RUN',\n                x: baseX,\n                y: baseY + vGap * 4,\n                action: ()=>this.runAway()\n            }\n        ];\n        buttonData.forEach((btn)=>{\n            const button = this.add.text(btn.x, btn.y, btn.text, {\n                fontSize: '14px',\n                color: '#fff',\n                backgroundColor: '#333',\n                padding: {\n                    x: 8,\n                    y: 4\n                }\n            }).setInteractive({\n                useHandCursor: true\n            }).on('pointerdown', btn.action);\n            this.actionButtons?.add(button);\n        });\n        if (this.actionButtons) this.battleUI?.add(this.actionButtons);\n    }\n    showMoveSelection() {\n        if (!this.isPlayerTurn || this.battleInProgress) return;\n        // Hide main action buttons\n        if (this.actionButtons) this.actionButtons.setVisible(false);\n        const { width, height } = this.scale;\n        const moves = this.getPlayerMoves();\n        // Create move selection container\n        const moveContainer = this.add.container(0, 0);\n        // Background for move selection (right-center panel)\n        const panelW = 300;\n        const panelH = 140;\n        const moveBg = this.add.rectangle(width - panelW - 20, height / 2 - panelH / 2, panelW, panelH, 0x222222, 0.95).setOrigin(0);\n        moveContainer.add(moveBg);\n        // Display up to 4 moves in a 2x2 grid\n        moves.slice(0, 4).forEach((move, index)=>{\n            const col = index % 2;\n            const row = Math.floor(index / 2);\n            const x = width - panelW - 10 + col * 150;\n            const y = height / 2 - panelH / 2 + 10 + row * 60;\n            const moveButton = this.add.text(x, y, move.name.toUpperCase(), {\n                fontSize: '13px',\n                color: '#fff',\n                backgroundColor: this.getMoveTypeColor(move.type),\n                padding: {\n                    x: 10,\n                    y: 6\n                }\n            }).setInteractive({\n                useHandCursor: true\n            }).on('pointerdown', ()=>{\n                moveContainer.destroy();\n                if (this.actionButtons) this.actionButtons.setVisible(true);\n                this.useMove(move);\n            });\n            moveContainer.add(moveButton);\n        });\n        // Back button\n        const backButton = this.add.text(width - panelW, height / 2 + panelH / 2 + 8, 'BACK', {\n            fontSize: '12px',\n            color: '#fff',\n            backgroundColor: '#666',\n            padding: {\n                x: 8,\n                y: 4\n            }\n        }).setInteractive({\n            useHandCursor: true\n        }).on('pointerdown', ()=>{\n            moveContainer.destroy();\n            if (this.actionButtons) this.actionButtons.setVisible(true);\n        });\n        moveContainer.add(backButton);\n        this.battleUI?.add(moveContainer);\n    }\n    showTeamSelection() {\n        if (!this.isPlayerTurn || this.battleInProgress) return;\n        if (this.playerTeam.length === 0) {\n            // Try lazy-load team from trainer storage\n            this.loadTrainerTeam().then(()=>this.internalShowTeamSelection());\n            return;\n        }\n        this.internalShowTeamSelection();\n    }\n    internalShowTeamSelection() {\n        // Hide main action buttons\n        if (this.actionButtons) this.actionButtons.setVisible(false);\n        const { width, height } = this.scale;\n        // Create team selection container\n        const teamContainer = this.add.container(0, 0);\n        // Background for team selection\n        const teamBg = this.add.rectangle(width / 2 - 200, height / 2 - 150, 400, 300, 0x222222, 0.95).setOrigin(0);\n        teamContainer.add(teamBg);\n        const title = this.add.text(width / 2, height / 2 - 130, 'Choose Pokemon', {\n            fontSize: '18px',\n            color: '#fff',\n            fontStyle: 'bold'\n        }).setOrigin(0.5);\n        teamContainer.add(title);\n        // Display team members\n        this.playerTeam.forEach((pokemon, index)=>{\n            const y = height / 2 - 90 + index * 50;\n            const currentHp = pokemon.currentHp || pokemon.maxHp || 100;\n            const maxHp = pokemon.maxHp || 100;\n            const isFainted = currentHp <= 0;\n            const isCurrent = pokemon.id === this.playerPokemon.pokeId;\n            const pokemonButton = this.add.text(width / 2 - 180, y, `${this.capitalize(pokemon.name)} Lv.${pokemon.level || 1}  HP: ${currentHp}/${maxHp}`, {\n                fontSize: '14px',\n                color: isFainted ? '#666' : isCurrent ? '#ffd700' : '#fff',\n                backgroundColor: isCurrent ? '#444' : '#333',\n                padding: {\n                    x: 10,\n                    y: 6\n                }\n            }).setOrigin(0);\n            if (!isFainted && !isCurrent) {\n                pokemonButton.setInteractive({\n                    useHandCursor: true\n                }).on('pointerdown', ()=>{\n                    teamContainer.destroy();\n                    if (this.actionButtons) this.actionButtons.setVisible(true);\n                    this.switchPokemon(pokemon);\n                });\n            }\n            teamContainer.add(pokemonButton);\n        });\n        // Back button\n        const backButton = this.add.text(width / 2, height / 2 + 130, 'BACK', {\n            fontSize: '14px',\n            color: '#fff',\n            backgroundColor: '#666',\n            padding: {\n                x: 15,\n                y: 8\n            }\n        }).setOrigin(0.5).setInteractive({\n            useHandCursor: true\n        }).on('pointerdown', ()=>{\n            teamContainer.destroy();\n            if (this.actionButtons) this.actionButtons.setVisible(true);\n        });\n        teamContainer.add(backButton);\n        teamContainer.setDepth(1001);\n        this.battleUI?.add(teamContainer);\n    }\n    getPlayerMoves() {\n        // Get moves from Pokemon data\n        const moves = this.playerPokemon.data?.moves || [];\n        // If Pokemon has no moves, provide default moves based on type or generic attacks\n        if (moves.length === 0) {\n            // Fallback moves if Pokemon has no move data\n            const types = this.playerPokemon.data?.types || [];\n            const primaryType = types[0]?.type?.name || 'normal';\n            return [\n                {\n                    name: 'Tackle',\n                    type: 'normal'\n                },\n                {\n                    name: 'Scratch',\n                    type: 'normal'\n                },\n                {\n                    name: this.getTypedMove(primaryType),\n                    type: primaryType\n                },\n                {\n                    name: 'Quick Attack',\n                    type: 'normal'\n                }\n            ];\n        }\n        // Filter to get learned moves (simplified - just take first 4)\n        return moves.slice(0, 4).map((m)=>({\n                name: m.move.name.replace(/-/g, ' '),\n                url: m.move.url,\n                type: 'normal' // Default type, would need to fetch move details for actual type\n            }));\n    }\n    getTypedMove(type) {\n        const typeMoves = {\n            fire: 'Ember',\n            water: 'Water Gun',\n            grass: 'Vine Whip',\n            electric: 'Thunder Shock',\n            ice: 'Powder Snow',\n            fighting: 'Karate Chop',\n            poison: 'Poison Sting',\n            ground: 'Mud Slap',\n            flying: 'Gust',\n            psychic: 'Confusion',\n            bug: 'Bug Bite',\n            rock: 'Rock Throw',\n            ghost: 'Lick',\n            dragon: 'Dragon Breath',\n            dark: 'Bite',\n            steel: 'Metal Claw',\n            fairy: 'Fairy Wind',\n            normal: 'Tackle'\n        };\n        return typeMoves[type] || 'Tackle';\n    }\n    getMoveTypeColor(type) {\n        const colors = {\n            normal: '#A8A878',\n            fire: '#F08030',\n            water: '#6890F0',\n            grass: '#78C850',\n            electric: '#F8D030',\n            ice: '#98D8D8',\n            fighting: '#C03028',\n            poison: '#A040A0',\n            ground: '#E0C068',\n            flying: '#A890F0',\n            psychic: '#F85888',\n            bug: '#A8B820',\n            rock: '#B8A038',\n            ghost: '#705898',\n            dragon: '#7038F8',\n            dark: '#705848',\n            steel: '#B8B8D0',\n            fairy: '#EE99AC'\n        };\n        return colors[type] || colors.normal;\n    }\n    useMove(move) {\n        if (this.battleInProgress) return;\n        this.battleInProgress = true;\n        this.isPlayerTurn = false;\n        // Get move data\n        const moveData = (0,_typeEffectiveness__WEBPACK_IMPORTED_MODULE_1__.getMoveData)(move.name);\n        const playerAttack = this.getStatValue(this.playerPokemon.data, moveData.category === 'physical' ? 'attack' : 'special-attack');\n        const wildDefense = this.getStatValue(this.wildPokemon.data, moveData.category === 'physical' ? 'defense' : 'special-defense');\n        // Get Pokemon types\n        const wildTypes = (this.wildPokemon.data?.types || []).map((t)=>t.type.name);\n        // Calculate damage with type effectiveness\n        const damageResult = (0,_typeEffectiveness__WEBPACK_IMPORTED_MODULE_1__.calculateDamage)(this.playerPokemon.level, moveData.power, playerAttack, wildDefense, moveData.type, wildTypes);\n        const damage = damageResult.damage;\n        this.wildHp = Math.max(0, this.wildHp - damage);\n        // Update battle text\n        let battleMsg = `${this.capitalize(this.playerPokemon.name)} used ${moveData.name}!`;\n        this.updateBattleText(battleMsg);\n        // Show floating damage text on wild Pokemon\n        this.time.delayedCall(500, ()=>{\n            this.showFloatingText(`-${damage} HP`, this.wildSprite.x, this.wildSprite.y - 30, '#ff4444');\n            if (damageResult.effectivenessText) {\n                this.time.delayedCall(300, ()=>{\n                    this.showFloatingText(damageResult.effectivenessText, this.wildSprite.x, this.wildSprite.y - 50, '#ffff00');\n                });\n            }\n        });\n        this.updateHpBars();\n        if (this.wildHp <= 0) {\n            this.time.delayedCall(2000, ()=>{\n                this.battleInProgress = false;\n                this.wildDefeated();\n            });\n        } else {\n            this.time.delayedCall(2000, ()=>{\n                this.battleInProgress = false;\n                this.wildAttack();\n            });\n        }\n    }\n    switchPokemon(newPokemon) {\n        if (this.battleInProgress) return;\n        this.battleInProgress = true;\n        // Update player Pokemon\n        this.playerPokemon = {\n            name: newPokemon.name,\n            pokeId: newPokemon.id,\n            data: newPokemon.data,\n            spriteUrl: newPokemon.sprite,\n            level: newPokemon.level || 1,\n            currentHp: newPokemon.currentHp || newPokemon.maxHp,\n            maxHp: newPokemon.maxHp\n        };\n        this.playerHp = this.playerPokemon.currentHp;\n        this.playerMaxHp = this.playerPokemon.maxHp;\n        // Update sprite\n        if (this.playerSprite) {\n            this.playerSprite.setTexture(`player-${newPokemon.id}`);\n        }\n        this.updateBattleText(`Go, ${this.capitalize(newPokemon.name)}!`);\n        this.updateHpBars();\n        // Wild Pokemon attacks after switch\n        this.time.delayedCall(2000, ()=>{\n            this.battleInProgress = false;\n            this.wildAttack();\n        });\n    }\n    playerAttack() {\n        const playerAttack = this.getStatValue(this.playerPokemon.data, 'attack');\n        const wildDefense = this.getStatValue(this.wildPokemon.data, 'defense');\n        const baseDamage = Math.max(1, playerAttack - wildDefense);\n        const damage = Math.floor(baseDamage * (0.8 + Math.random() * 0.4)); // 0.8-1.2 multiplier\n        this.wildHp = Math.max(0, this.wildHp - damage);\n        this.updateBattleText(`${this.capitalize(this.playerPokemon.name)} attacks! Dealt ${damage} damage!`);\n        this.updateHpBars();\n        if (this.wildHp <= 0) {\n            this.wildDefeated();\n        } else {\n            this.time.delayedCall(1500, ()=>this.wildAttack());\n        }\n    }\n    wildAttack() {\n        if (this.battleInProgress) return;\n        this.battleInProgress = true;\n        // Pick a random move type based on wild Pokemon's types\n        const wildTypes = (this.wildPokemon.data?.types || []).map((t)=>t.type.name);\n        const attackType = wildTypes[0] || 'normal';\n        const movePower = 50; // Base move power for wild Pokemon\n        const wildAttack = this.getStatValue(this.wildPokemon.data, 'attack');\n        const playerDefense = this.getStatValue(this.playerPokemon.data, 'defense');\n        // Get player Pokemon types\n        const playerTypes = (this.playerPokemon.data?.types || []).map((t)=>t.type.name);\n        // Calculate damage with type effectiveness\n        const damageResult = (0,_typeEffectiveness__WEBPACK_IMPORTED_MODULE_1__.calculateDamage)(this.wildLevel, movePower, wildAttack, playerDefense, attackType, playerTypes);\n        const damage = damageResult.damage;\n        this.playerHp = Math.max(0, this.playerHp - damage);\n        this.updateBattleText(`Wild ${this.capitalize(this.wildPokemon.name)} attacks!`);\n        // Show floating damage text on player Pokemon\n        this.time.delayedCall(500, ()=>{\n            this.showFloatingText(`-${damage} HP`, this.playerSprite.x, this.playerSprite.y - 30, '#ff4444');\n            if (damageResult.effectivenessText) {\n                this.time.delayedCall(300, ()=>{\n                    this.showFloatingText(damageResult.effectivenessText, this.playerSprite.x, this.playerSprite.y - 50, '#ffff00');\n                });\n            }\n        });\n        this.updateHpBars();\n        if (this.playerHp <= 0) {\n            this.time.delayedCall(2000, ()=>{\n                this.battleInProgress = false;\n                this.playerDefeated();\n            });\n        } else {\n            this.time.delayedCall(1500, ()=>{\n                this.battleInProgress = false;\n                this.isPlayerTurn = true;\n            });\n        }\n    }\n    showFloatingText(text, x, y, color) {\n        const floatingText = this.add.text(x, y, text, {\n            fontSize: '20px',\n            color: color,\n            fontStyle: 'bold',\n            stroke: '#000',\n            strokeThickness: 4\n        }).setOrigin(0.5).setDepth(2000);\n        this.floatingTexts.push(floatingText);\n        // Animate floating text\n        this.tweens.add({\n            targets: floatingText,\n            y: y - 50,\n            alpha: 0,\n            duration: 1500,\n            ease: 'Power2',\n            onComplete: ()=>{\n                floatingText.destroy();\n                const index = this.floatingTexts.indexOf(floatingText);\n                if (index > -1) this.floatingTexts.splice(index, 1);\n            }\n        });\n    }\n    async attemptCatch() {\n        const catchRate = this.wildHp < this.wildMaxHp * 0.2 ? 0.8 : 0.3; // Higher rate if HP < 20%\n        if (Math.random() < catchRate) {\n            this.updateBattleText(`Gotcha! ${this.capitalize(this.wildPokemon.name)} was caught!`);\n            // Mint NFT on blockchain\n            await this.mintCaughtPokemonNFT();\n            // Save caught pokemon to trainer storage\n            try {\n                const wallet =  false ? 0 : null;\n                if (wallet) {\n                    const { saveTrainer } = await __webpack_require__.e(/*! import() */ \"_pages-dir-node_src_services_trainer_ts\").then(__webpack_require__.bind(__webpack_require__, /*! ../../src/services/trainer */ \"(pages-dir-node)/./src/services/trainer.ts\"));\n                    const caught = {\n                        name: this.wildPokemon.name,\n                        level: this.wildLevel,\n                        hp: this.wildMaxHp,\n                        attack: this.getStatValue(this.wildPokemon.data, 'attack'),\n                        defense: this.getStatValue(this.wildPokemon.data, 'defense'),\n                        moves: (this.wildPokemon.data?.moves || []).slice(0, 4).map((m)=>m.move?.name?.replace(/-/g, ' ')).filter(Boolean),\n                        rarity: this.determineRarity(this.wildPokemon.data),\n                        caughtAt: new Date()\n                    };\n                    await saveTrainer({\n                        walletAddress: wallet,\n                        storageAppend: [\n                            caught\n                        ]\n                    });\n                    // Add to local team cache so SWITCH can use it immediately\n                    this.playerTeam.push({\n                        id: this.wildPokemon.pokeId,\n                        name: this.wildPokemon.name,\n                        data: this.wildPokemon.data,\n                        sprite: this.wildPokemon.spriteUrl,\n                        level: this.wildLevel,\n                        maxHp: this.wildMaxHp,\n                        currentHp: this.wildMaxHp\n                    });\n                }\n            } catch  {}\n            this.time.delayedCall(2000, ()=>this.endBattle(true));\n        } else {\n            this.updateBattleText(`${this.capitalize(this.wildPokemon.name)} broke free!`);\n            this.time.delayedCall(1500, ()=>this.wildAttack());\n        }\n    }\n    async mintCaughtPokemonNFT() {\n        try {\n            // Get wallet address from localStorage or wallet manager\n            const walletAddress = this.getWalletAddress();\n            if (!walletAddress) {\n                console.warn('No wallet connected. Pokemon caught but not minted as NFT.');\n                return;\n            }\n            this.updateBattleText('Minting your NFT on blockchain...');\n            // Determine rarity based on stats\n            const rarity = this.determineRarity(this.wildPokemon.data);\n            const isLegendary = this.checkIfLegendary(this.wildPokemon.pokeId);\n            const pokemonData = {\n                name: this.wildPokemon.name,\n                pokeId: this.wildPokemon.pokeId,\n                rarity,\n                level: 1,\n                isLegendary,\n                stats: this.wildPokemon.data.stats,\n                types: this.wildPokemon.data.types,\n                imageUrl: this.wildPokemon.spriteUrl,\n                ...this.wildPokemon.data\n            };\n            const response = await fetch('/api/mint/pokemon', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'x-wallet-address': walletAddress\n                },\n                body: JSON.stringify({\n                    walletAddress,\n                    pokemon: pokemonData\n                })\n            });\n            const result = await response.json();\n            if (result.success) {\n                this.updateBattleText(`✅ ${this.capitalize(this.wildPokemon.name)} minted as NFT #${result.nft.assetId}!\\nTx: ${result.nft.txId.substring(0, 10)}...`);\n                // Show popup with transaction details\n                this.showNFTMintedPopup(result.nft);\n            } else {\n                console.error('Failed to mint NFT:', result.error);\n                this.updateBattleText(`Caught ${this.capitalize(this.wildPokemon.name)}! (NFT minting failed)`);\n            }\n        } catch (error) {\n            console.error('Error minting NFT:', error);\n            this.updateBattleText(`Caught ${this.capitalize(this.wildPokemon.name)}!`);\n        }\n    }\n    showNFTMintedPopup(nft) {\n        const { width, height } = this.scale;\n        // Create popup container\n        const popup = this.add.container(width / 2, height / 2);\n        // Background\n        const bg = this.add.rectangle(0, 0, 400, 250, 0x000000, 0.9);\n        const border = this.add.rectangle(0, 0, 400, 250, 0xffd700).setStrokeStyle(4, 0xffd700);\n        // Title\n        const title = this.add.text(0, -90, '🎉 NFT Minted!', {\n            fontSize: '24px',\n            color: '#ffd700',\n            fontStyle: 'bold'\n        }).setOrigin(0.5);\n        // Pokemon name\n        const pokemonName = this.add.text(0, -50, `${this.capitalize(nft.name)}`, {\n            fontSize: '20px',\n            color: '#fff'\n        }).setOrigin(0.5);\n        // Asset ID\n        const assetIdText = this.add.text(0, -20, `Asset ID: ${nft.assetId}`, {\n            fontSize: '14px',\n            color: '#aaa'\n        }).setOrigin(0.5);\n        // Tx hash (shortened)\n        const txHashText = this.add.text(0, 5, `Tx: ${nft.txId.substring(0, 20)}...`, {\n            fontSize: '12px',\n            color: '#888'\n        }).setOrigin(0.5);\n        // Explorer link hint\n        const explorerText = this.add.text(0, 30, 'View on AlgoExplorer (TestNet)', {\n            fontSize: '12px',\n            color: '#4da6ff',\n            fontStyle: 'italic'\n        }).setOrigin(0.5);\n        // Rarity badge\n        const rarityBadge = this.add.text(0, 60, `⭐ ${nft.rarity || 'Common'}`, {\n            fontSize: '14px',\n            color: '#ffd700',\n            backgroundColor: '#333',\n            padding: {\n                x: 10,\n                y: 5\n            }\n        }).setOrigin(0.5);\n        // OK button\n        const okButton = this.add.text(0, 100, 'OK', {\n            fontSize: '18px',\n            color: '#fff',\n            backgroundColor: '#4CAF50',\n            padding: {\n                x: 30,\n                y: 10\n            }\n        }).setOrigin(0.5).setInteractive({\n            useHandCursor: true\n        }).on('pointerdown', ()=>{\n            popup.destroy();\n        });\n        popup.add([\n            bg,\n            border,\n            title,\n            pokemonName,\n            assetIdText,\n            txHashText,\n            explorerText,\n            rarityBadge,\n            okButton\n        ]);\n        popup.setDepth(1000);\n        // Auto-dismiss after 10 seconds\n        this.time.delayedCall(10000, ()=>{\n            if (popup.scene) popup.destroy();\n        });\n    }\n    determineRarity(pokemonData) {\n        const totalStats = pokemonData.stats?.reduce((sum, stat)=>sum + stat.base_stat, 0) || 0;\n        if (totalStats > 600) return 'Legendary';\n        if (totalStats > 500) return 'Rare';\n        if (totalStats > 400) return 'Uncommon';\n        return 'Common';\n    }\n    checkIfLegendary(pokeId) {\n        const legendaryIds = [\n            150,\n            144,\n            145,\n            146,\n            243,\n            244,\n            245,\n            249,\n            250,\n            382,\n            383,\n            384,\n            480,\n            481,\n            482,\n            483,\n            484,\n            487\n        ];\n        return legendaryIds.includes(pokeId);\n    }\n    getWalletAddress() {\n        // Try to get from wallet manager\n        if (false) {}\n        return null;\n    }\n    getUserId() {\n        // Get user ID from session/auth\n        if (false) {}\n        return null;\n    }\n    openBag() {\n        this.updateBattleText(\"You rummage through your bag...\");\n        // TODO: Implement bag/item usage\n        this.time.delayedCall(1000, ()=>this.wildAttack());\n    }\n    runAway() {\n        this.updateBattleText(\"You ran away safely!\");\n        this.time.delayedCall(1500, ()=>this.endBattle(false));\n    }\n    async wildDefeated() {\n        // Calculate EXP based on wild Pokemon level and base stats\n        const baseExp = this.wildPokemon.data?.base_experience || 50;\n        const expGained = 10 + this.wildLevel * 2;\n        this.updateBattleText(`Wild ${this.capitalize(this.wildPokemon.name)} fainted! ${this.capitalize(this.playerPokemon.name)} gained ${expGained} EXP!`);\n        // Update local cache and backend XP sync\n        try {\n            const wallet =  false ? 0 : null;\n            if (wallet) {\n                const cur = parseInt(localStorage.getItem('trainer_exp') || '0');\n                const newTotal = cur + expGained;\n                localStorage.setItem('trainer_exp', String(newTotal));\n                const { xpSync } = await __webpack_require__.e(/*! import() */ \"_pages-dir-node_src_services_trainer_ts\").then(__webpack_require__.bind(__webpack_require__, /*! ../../src/services/trainer */ \"(pages-dir-node)/./src/services/trainer.ts\"));\n                await xpSync({\n                    walletAddress: wallet,\n                    newXP: newTotal\n                });\n                window.dispatchEvent(new CustomEvent('trainer-xp-update', {\n                    detail: {\n                        newXP: newTotal\n                    }\n                }));\n            }\n        } catch  {}\n        // 25% auto-catch chance\n        if (Math.random() < 0.25) {\n            await this.attemptCatch();\n        }\n        this.time.delayedCall(3000, ()=>this.endBattle(true));\n    }\n    playerDefeated() {\n        this.updateBattleText(`${this.capitalize(this.playerPokemon.name)} fainted! You lost the battle!`);\n        this.time.delayedCall(3000, ()=>this.endBattle(false));\n    }\n    endBattle(victory) {\n        // Return to GameScene\n        this.scene.start(\"GameScene\");\n    }\n    updateHpBars() {\n        if (this.wildHpBar && this.wildHpText) {\n            const wildHpPercent = this.wildHp / this.wildMaxHp;\n            this.wildHpBar.width = 196 * wildHpPercent;\n            this.wildHpBar.fillColor = wildHpPercent > 0.5 ? 0x00ff00 : wildHpPercent > 0.2 ? 0xffff00 : 0xff0000;\n            this.wildHpText.setText(`${this.capitalize(this.wildPokemon.name)} HP: ${this.wildHp}/${this.wildMaxHp}`);\n        }\n        if (this.playerHpBar && this.playerHpText) {\n            const playerHpPercent = this.playerHp / this.playerMaxHp;\n            this.playerHpBar.width = 196 * playerHpPercent;\n            this.playerHpBar.fillColor = playerHpPercent > 0.5 ? 0x00ff00 : playerHpPercent > 0.2 ? 0xffff00 : 0xff0000;\n            this.playerHpText.setText(`${this.capitalize(this.playerPokemon.name)} Lv.${this.playerPokemon.level} HP: ${this.playerHp}/${this.playerMaxHp}`);\n        }\n    }\n    updateBattleText(text) {\n        if (!this.battleText) return;\n        this.battleText.setText(text);\n    }\n    async loadTrainerTeam() {\n        try {\n            const wallet =  false ? 0 : null;\n            if (!wallet) return;\n            const res = await fetch(`/api/trainer/load/${encodeURIComponent(wallet)}`, {\n                headers: {\n                    'x-wallet-address': wallet\n                }\n            });\n            if (!res.ok) return;\n            const data = await res.json();\n            const trainer = data?.trainer;\n            const fromStorage = (trainer?.storage || []).slice(0, 6).map((p)=>({\n                    id: p.pokeId || p.id || 0,\n                    name: p.name,\n                    data: this.wildPokemon?.data,\n                    sprite: p.image_url || this.playerPokemon.spriteUrl,\n                    level: p.level || 1,\n                    maxHp: p.hp || 50,\n                    currentHp: p.hp || 50\n                }));\n            if (fromStorage.length) this.playerTeam = fromStorage;\n        } catch  {}\n    }\n    getStatValue(pokemonData, statName) {\n        const stat = pokemonData?.stats?.find((s)=>s.stat.name === statName);\n        return stat?.base_stat || 50;\n    }\n    capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./lib/phaser/BattleScene.ts\n");

/***/ }),

/***/ "(pages-dir-node)/./lib/phaser/GameScene.ts":
/*!*********************************!*\
  !*** ./lib/phaser/GameScene.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GameScene: () => (/* binding */ GameScene)\n/* harmony export */ });\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! phaser */ \"phaser\");\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(phaser__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! socket.io-client */ \"socket.io-client\");\n/* harmony import */ var _spawnUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../spawnUtils */ \"(pages-dir-node)/./lib/spawnUtils.ts\");\n/* harmony import */ var _mapZones__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../mapZones */ \"(pages-dir-node)/./lib/mapZones.ts\");\n/* harmony import */ var _biomes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../biomes */ \"(pages-dir-node)/./lib/biomes.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([socket_io_client__WEBPACK_IMPORTED_MODULE_1__]);\nsocket_io_client__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\nfunction capitalize(s) {\n    return (s || \"\").charAt(0).toUpperCase() + (s || \"\").slice(1);\n}\nclass GameScene extends phaser__WEBPACK_IMPORTED_MODULE_0__.Scene {\n    constructor(){\n        super(\"GameScene\"), this.configData = {\n            tileSize: 32,\n            mapWidth: 50,\n            mapHeight: 38,\n            playerSpeed: 200\n        }, this.playerSpeed = 200, // Cached map dimensions\n        this.mapWidthTiles = 0, this.mapHeightTiles = 0, this.tileSizePx = 32, this.others = new Map(), this.lastSent = 0, // UI (sidebar) - removed in favor of React/Next UI\n        this.lastStatusAt = 0, this.miniW = 160, this.miniH = 160, // Structures\n        this.structures = [], this.insideStructure = {\n            active: false,\n            type: null\n        };\n    }\n    init(data) {\n        this.configData = {\n            ...this.configData,\n            ...data\n        };\n        if (this.configData.playerSpeed) this.playerSpeed = this.configData.playerSpeed;\n    }\n    preload() {\n        // Generate a simple 2-tile spritesheet (grass, wall) programmatically\n        const { tileSize } = this.configData;\n        const width = tileSize * 2;\n        const height = tileSize;\n        // Check if texture already exists, destroy it first\n        if (this.textures.exists(\"tilesheet\")) {\n            this.textures.remove(\"tilesheet\");\n        }\n        const sheet = this.textures.createCanvas(\"tilesheet\", width, height);\n        if (!sheet) {\n            throw new Error(\"Failed to create canvas texture 'tilesheet'\");\n        }\n        const ctx = sheet.getContext();\n        if (!ctx) {\n            throw new Error(\"Failed to get 2D rendering context from canvas 'tilesheet'\");\n        }\n        // Grass tile (index 0)\n        ctx.fillStyle = \"#2d6a4f\";\n        ctx.fillRect(0, 0, tileSize, tileSize);\n        // sprinkle dots\n        ctx.fillStyle = \"#40916c\";\n        for(let i = 0; i < 30; i++){\n            const x = Math.random() * (tileSize - 2);\n            const y = Math.random() * (tileSize - 2);\n            ctx.fillRect(x, y, 2, 2);\n        }\n        // Wall tile (index 1)\n        ctx.fillStyle = \"#6c757d\";\n        ctx.fillRect(tileSize, 0, tileSize, tileSize);\n        ctx.strokeStyle = \"#495057\";\n        for(let i = 0; i < tileSize; i += 4){\n            ctx.beginPath();\n            ctx.moveTo(tileSize, i + 0.5);\n            ctx.lineTo(tileSize * 2, i + 0.5);\n            ctx.stroke();\n        }\n        sheet.refresh();\n        // Generate a player texture (circle)\n        if (this.textures.exists(\"player\")) {\n            this.textures.remove(\"player\");\n        }\n        const g = this.make.graphics({\n            x: 0,\n            y: 0\n        });\n        g.fillStyle(0xffd166, 1);\n        g.fillCircle(tileSize / 2, tileSize / 2, tileSize * 0.4);\n        g.lineStyle(2, 0x073b4c, 1);\n        g.strokeCircle(tileSize / 2, tileSize / 2, tileSize * 0.4);\n        g.generateTexture(\"player\", tileSize, tileSize);\n        g.destroy();\n    }\n    create() {\n        const { tileSize, mapWidth, mapHeight } = this.configData;\n        this.tileSizePx = tileSize;\n        this.mapWidthTiles = mapWidth;\n        this.mapHeightTiles = mapHeight;\n        // Create a blank tilemap and a dynamic layer using our generated spritesheet\n        const map = this.make.tilemap({\n            tileWidth: tileSize,\n            tileHeight: tileSize,\n            width: mapWidth,\n            height: mapHeight\n        });\n        const tileset = map.addTilesetImage(\"tiles\", \"tilesheet\", tileSize, tileSize, 0, 0);\n        if (!tileset) throw new Error(\"Failed to create tileset from tilesheet\");\n        const layer = map.createBlankLayer(\"ground\", tileset, 0, 0);\n        if (!layer) throw new Error(\"Failed to create blank ground layer\");\n        this.groundLayer = layer;\n        // Fill ground (index 0) and carve walls (index 1) along the border + a few random obstacles\n        this.groundLayer.fill(0, 0, 0, mapWidth, mapHeight);\n        for(let x = 0; x < mapWidth; x++){\n            this.groundLayer.putTileAt(1, x, 0);\n            this.groundLayer.putTileAt(1, x, mapHeight - 1);\n        }\n        for(let y = 0; y < mapHeight; y++){\n            this.groundLayer.putTileAt(1, 0, y);\n            this.groundLayer.putTileAt(1, mapWidth - 1, y);\n        }\n        // random obstacles\n        for(let i = 0; i < Math.floor(mapWidth * mapHeight * 0.05); i++){\n            const rx = phaser__WEBPACK_IMPORTED_MODULE_0__.Math.Between(1, mapWidth - 2);\n            const ry = phaser__WEBPACK_IMPORTED_MODULE_0__.Math.Between(1, mapHeight - 2);\n            this.groundLayer.putTileAt(1, rx, ry);\n        }\n        // Enable collisions for wall tiles (index 1)\n        this.groundLayer.setCollision(1, true);\n        // Player setup\n        const startX = this.configData.initialX ?? tileSize * 2;\n        const startY = this.configData.initialY ?? tileSize * 2;\n        this.player = this.physics.add.sprite(startX, startY, \"player\");\n        this.player.setDepth(10);\n        this.player.setCollideWorldBounds(true);\n        // Camera and world bounds\n        const worldWidth = mapWidth * tileSize;\n        const worldHeight = mapHeight * tileSize;\n        this.cameras.main.setBounds(0, 0, worldWidth, worldHeight);\n        this.cameras.main.startFollow(this.player, true, 0.1, 0.1);\n        this.physics.world.setBounds(0, 0, worldWidth, worldHeight);\n        // Collide player with walls\n        this.physics.add.collider(this.player, this.groundLayer);\n        // Input\n        this.cursors = this.input.keyboard?.createCursorKeys();\n        this.wasd = this.input.keyboard?.addKeys({\n            W: phaser__WEBPACK_IMPORTED_MODULE_0__.Input.Keyboard.KeyCodes.W,\n            A: phaser__WEBPACK_IMPORTED_MODULE_0__.Input.Keyboard.KeyCodes.A,\n            S: phaser__WEBPACK_IMPORTED_MODULE_0__.Input.Keyboard.KeyCodes.S,\n            D: phaser__WEBPACK_IMPORTED_MODULE_0__.Input.Keyboard.KeyCodes.D\n        });\n        this.enterKey = this.input.keyboard?.addKey(phaser__WEBPACK_IMPORTED_MODULE_0__.Input.Keyboard.KeyCodes.ENTER);\n        // Multiplayer socket (kept from your original)\n        this.initMultiplayer();\n        // Environment overlay\n        this.envOverlay = this.add.rectangle(0, 0, this.scale.width, this.scale.height, 0xffffff, 0.08).setOrigin(0).setScrollFactor(0).setDepth(900);\n        // Minimap overlay (no grid lines)\n        this.createMiniMap();\n        // HUD (Level + XP)\n        this.createHUD();\n        // Zone-aware spawn manager with trainer level\n        const trainerLevel = this.configData.trainerLevel || 1;\n        this.spawnManager = new _spawnUtils__WEBPACK_IMPORTED_MODULE_2__.SpawnManager(this, tileSize, mapWidth, mapHeight, trainerLevel);\n        this.spawnManager.on(\"spawned\", (rec)=>{\n            this.addMiniMarker(rec.key, rec.position.x, rec.position.y);\n            this.statusOnce(`A wild ${capitalize(rec.name)} appeared near you!`, 800);\n            this.configData.onPokemonSpotted?.({\n                name: rec.name,\n                spriteUrl: rec.spriteUrl,\n                pokeId: rec.pokeId\n            });\n            this.pushSpawnsToUI();\n        });\n        this.spawnManager.on(\"despawned\", (_key)=>{\n            this.removeMiniMarker(_key);\n            if (this.spawnManager.getActiveSpawns().length === 0) this.configData.onPokemonCleared?.();\n            this.pushSpawnsToUI();\n        });\n        this.spawnManager.on(\"spawnClicked\", async (key)=>{\n            await this.startBattleFromKey(key);\n        });\n        this.spawnManager.on(\"zoneChanged\", (z)=>{\n            this.highlightMiniZone();\n            const czx = (z.col * _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES + _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES / 2) * tileSize;\n            const czy = (z.row * _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES + _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES / 2) * tileSize;\n            const cam = this.cameras.main;\n            cam.stopFollow();\n            cam.pan(czx, czy, 300, \"Sine.easeInOut\", true, (camera, progress)=>{\n                if (progress === 1) cam.startFollow(this.player, true, 0.1, 0.1);\n            });\n            // apply biome environment tint\n            const zones = (0,_mapZones__WEBPACK_IMPORTED_MODULE_3__.generateZones)(Math.floor(this.mapWidthTiles / _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES), Math.floor(this.mapHeightTiles / _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES));\n            const meta = zones.find((q)=>q.id === `${z.col},${z.row}`);\n            if (meta) this.applyBiome(meta.biome);\n        });\n        this.generateStructures();\n        this.spawnManager.start();\n        // Load trainer data if wallet connected\n        this.initTrainerPersistence();\n        // Autosave every ~2.5 minutes\n        this.autosaveTimer = this.time.addEvent({\n            delay: 150000,\n            loop: true,\n            callback: ()=>this.autosave(\"interval\")\n        });\n        // Save on unload\n        if (false) {}\n    }\n    update() {\n        if (!this.player || !this.player.body) return;\n        const speed = this.playerSpeed;\n        let vx = 0;\n        let vy = 0;\n        // Arrow keys\n        if (this.cursors?.left?.isDown) vx -= 1;\n        if (this.cursors?.right?.isDown) vx += 1;\n        if (this.cursors?.up?.isDown) vy -= 1;\n        if (this.cursors?.down?.isDown) vy += 1;\n        // WASD\n        if (this.wasd?.A?.isDown) vx -= 1;\n        if (this.wasd?.D?.isDown) vx += 1;\n        if (this.wasd?.W?.isDown) vy -= 1;\n        if (this.wasd?.S?.isDown) vy += 1;\n        const body = this.player.body;\n        if (vx === 0 && vy === 0) {\n            body.setVelocity(0, 0);\n        } else {\n            const len = Math.hypot(vx, vy) || 1;\n            body.setVelocity(vx / len * speed, vy / len * speed);\n        }\n        // Keep UI + minimap pinned\n        if (this.mini) this.mini.setScrollFactor(0);\n        // Throttled position sync (multiplayer)\n        const now = this.time.now;\n        if (this.socket && now - this.lastSent > 100) {\n            this.socket.emit(\"move\", {\n                x: this.player.x,\n                y: this.player.y\n            });\n            this.lastSent = now;\n        }\n        // Update zone tracking for spawns/minimap\n        this.spawnManager?.updatePlayerPos(this.player.x, this.player.y);\n        // Battle when near and Enter pressed (compat)\n        if (this.enterKey && phaser__WEBPACK_IMPORTED_MODULE_0__.Input.Keyboard.JustDown(this.enterKey)) {\n            const nearest = this.getNearestActive(64);\n            if (nearest) this.startBattleFromKey(nearest.key);\n        }\n    }\n    // ---- UI helpers ----\n    statusOnce(_text, cooldownMs = 800) {\n        const now = this.time.now;\n        if (now - this.lastStatusAt < cooldownMs) return;\n        this.lastStatusAt = now;\n    // React sidebar now handles messaging\n    }\n    createHUD() {\n        const w = 220;\n        const h = 14;\n        // Place HUD below minimap to avoid overlap\n        const y = (this.miniH || 160) + 20;\n        this.hud = this.add.container(12, y).setScrollFactor(0).setDepth(2000);\n        const bg = this.add.rectangle(0, 0, w, h + 16, 0x000000, 0.5).setOrigin(0);\n        this.hudBarBg = this.add.rectangle(10, 8, w - 20, h, 0x333333, 1).setOrigin(0);\n        this.hudBarFg = this.add.rectangle(10, 8, 0, h, 0x2ecc71, 1).setOrigin(0);\n        this.hudText = this.add.text(12, -8, 'Lv.1 0/100 XP', {\n            fontSize: '12px',\n            color: '#fff'\n        });\n        this.hud.add([\n            bg,\n            this.hudBarBg,\n            this.hudBarFg,\n            this.hudText\n        ]);\n    }\n    updateHUD(level, currentXP, nextLevelXP) {\n        const w = this.hudBarBg?.width || 200;\n        const pct = Math.max(0, Math.min(1, nextLevelXP ? currentXP / nextLevelXP : 0));\n        if (this.hudBarFg) this.hudBarFg.width = Math.floor(w * pct);\n        if (this.hudText) this.hudText.setText(`Lv.${level} ${currentXP}/${nextLevelXP} XP`);\n    }\n    async initTrainerPersistence() {\n        try {\n            const wallet =  false ? 0 : null;\n            if (!wallet) return;\n            const { loadTrainer, autosaveTrainer } = await __webpack_require__.e(/*! import() */ \"_pages-dir-node_src_services_trainer_ts\").then(__webpack_require__.bind(__webpack_require__, /*! ../../src/services/trainer */ \"(pages-dir-node)/./src/services/trainer.ts\"));\n            const { flushQueue } = await __webpack_require__.e(/*! import() */ \"_pages-dir-node_src_services_saveQueue_ts\").then(__webpack_require__.bind(__webpack_require__, /*! ../../src/services/saveQueue */ \"(pages-dir-node)/./src/services/saveQueue.ts\"));\n            // try to flush any queued saves first\n            try {\n                await flushQueue();\n            } catch  {}\n            const res = await loadTrainer(wallet).catch(()=>null);\n            if (res?.trainer) {\n                const t = res.trainer;\n                if (t?.location) {\n                    this.player.setPosition(t.location.x || this.player.x, t.location.y || this.player.y);\n                }\n                if (typeof t.level === 'number') this.configData.trainerLevel = t.level;\n                this.updateHUD(t.level || 1, t.currentXP || 0, t.nextLevelXP || 100);\n                this.showSavedToast('Trainer data loaded successfully!');\n            } else {\n                // create initial snapshot\n                await autosaveTrainer({\n                    walletAddress: wallet,\n                    level: 1,\n                    xp: 0,\n                    location: {\n                        x: this.player.x,\n                        y: this.player.y,\n                        biome: 'grassland'\n                    }\n                });\n            }\n        } catch  {}\n    }\n    async autosave(reason) {\n        try {\n            const wallet =  false ? 0 : null;\n            if (!wallet) return;\n            const { autosaveTrainer } = await __webpack_require__.e(/*! import() */ \"_pages-dir-node_src_services_trainer_ts\").then(__webpack_require__.bind(__webpack_require__, /*! ../../src/services/trainer */ \"(pages-dir-node)/./src/services/trainer.ts\"));\n            const xp =  false ? 0 : 0;\n            await autosaveTrainer({\n                walletAddress: wallet,\n                xp,\n                level: this.configData.trainerLevel || 1,\n                location: {\n                    x: this.player.x,\n                    y: this.player.y\n                }\n            });\n            this.showSavedToast('Progress Saved');\n        } catch (e) {\n            // enqueue offline save\n            try {\n                const base = (process.env.NEXT_PUBLIC_BACKEND_URL || 'http://localhost:4000') + '/api/autosave';\n                const { enqueueSave } = await __webpack_require__.e(/*! import() */ \"_pages-dir-node_src_services_saveQueue_ts\").then(__webpack_require__.bind(__webpack_require__, /*! ../../src/services/saveQueue */ \"(pages-dir-node)/./src/services/saveQueue.ts\"));\n                const wallet =  false ? 0 : undefined;\n                await enqueueSave({\n                    url: base,\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        ...wallet ? {\n                            'x-wallet-address': wallet\n                        } : {}\n                    },\n                    body: {\n                        walletAddress: wallet,\n                        level: this.configData.trainerLevel || 1,\n                        location: {\n                            x: this.player.x,\n                            y: this.player.y\n                        }\n                    }\n                });\n            } catch  {}\n        }\n    }\n    showSavedToast(text) {\n        if (this.toast) {\n            this.toast.destroy();\n            this.toast = undefined;\n        }\n        const t = this.add.text(12, this.scale.height - 28, `💾 ${text}`, {\n            fontSize: '14px',\n            color: '#0f0',\n            backgroundColor: '#000',\n            padding: {\n                x: 8,\n                y: 4\n            }\n        }).setScrollFactor(0).setDepth(2000);\n        this.toast = t;\n        this.time.delayedCall(1600, ()=>{\n            if (t.scene) t.destroy();\n            if (this.toast === t) this.toast = undefined;\n        });\n    }\n    // ---- Multiplayer (kept) ----\n    initMultiplayer() {\n        if (this.socket) return; // already connected\n        const socket = (0,socket_io_client__WEBPACK_IMPORTED_MODULE_1__.io)(\"http://localhost:4000\", {\n            transports: [\n                \"websocket\"\n            ],\n            autoConnect: true\n        });\n        this.socket = socket;\n        socket.on(\"connect\", ()=>{\n            this.myId = socket.id;\n        });\n        socket.on(\"initState\", (payload)=>{\n            Object.entries(payload.players).forEach(([id, pos])=>{\n                if (id === this.myId) return;\n                this.spawnOther(id, pos.x, pos.y);\n            });\n        });\n        socket.on(\"playerJoined\", ({ id, x, y })=>{\n            if (id === this.myId) return;\n            this.spawnOther(id, x, y);\n        });\n        socket.on(\"playerMoved\", ({ id, x, y })=>{\n            const sprite = this.others.get(id);\n            if (sprite) {\n                sprite.x = x;\n                sprite.y = y;\n            }\n        });\n        socket.on(\"playerLeft\", ({ id })=>{\n            const sprite = this.others.get(id);\n            if (sprite) {\n                sprite.destroy();\n                this.others.delete(id);\n            }\n        });\n        this.events.once(phaser__WEBPACK_IMPORTED_MODULE_0__.Scenes.Events.SHUTDOWN, ()=>{\n            socket.removeAllListeners();\n            socket.disconnect();\n            this.socket = undefined;\n            this.myId = undefined;\n            this.others.forEach((s)=>s.destroy());\n            this.others.clear();\n        });\n    }\n    spawnOther(id, x, y) {\n        const s = this.add.sprite(x, y, \"player\").setTint(0x118ab2);\n        s.setDepth(5);\n        this.others.set(id, s);\n    }\n    // ---- Minimap ----\n    createMiniMap() {\n        // Place top-left inside gameplay area (away from right sidebar)\n        const baseX = 12;\n        const baseY = 12;\n        this.mini = this.add.container(baseX, baseY).setDepth(1000);\n        this.mini.setScrollFactor(0);\n        const bg = this.add.rectangle(0, 0, this.miniW, this.miniH, 0x111111, 0.6).setOrigin(0);\n        this.miniGfx = this.add.graphics();\n        this.miniMarkers = this.add.container(0, 0);\n        this.miniBuildings = this.add.container(0, 0);\n        this.miniHighlight = this.add.graphics();\n        // no grid lines to keep zones invisible\n        const cols = Math.max(1, Math.floor(this.mapWidthTiles / _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES));\n        const rows = Math.max(1, Math.floor(this.mapHeightTiles / _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES));\n        this.miniGfx.clear();\n        this.miniGfx.lineStyle(1, 0x333333, 0.8);\n        this.miniGfx.strokeRect(0, 0, this.miniW, this.miniH);\n        // clickable zone\n        const hit = this.add.zone(0, 0, this.miniW, this.miniH).setOrigin(0).setInteractive({\n            useHandCursor: true\n        });\n        hit.on('pointerdown', (_pointer, localX, localY)=>{\n            const zc = Math.floor(localX / (this.miniW / cols));\n            const zr = Math.floor(localY / (this.miniH / rows));\n            const cx = (zc * _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES + _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES / 2) * this.tileSizePx;\n            const cy = (zr * _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES + _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES / 2) * this.tileSizePx;\n            const cam = this.cameras.main;\n            cam.stopFollow();\n            cam.pan(cx, cy, 300, 'Sine.easeInOut', true, (camera, progress)=>{\n                if (progress === 1) cam.startFollow(this.player, true, 0.1, 0.1);\n            });\n        });\n        this.mini.add([\n            bg,\n            this.miniGfx,\n            this.miniHighlight,\n            this.miniBuildings,\n            this.miniMarkers,\n            hit\n        ]);\n        this.highlightMiniZone();\n    }\n    highlightMiniZone() {\n        if (!this.miniHighlight) return;\n        const grid = this.spawnManager?.getZoneGrid();\n        const cols = grid?.cols ?? Math.max(1, Math.floor(this.mapWidthTiles / _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES));\n        const rows = grid?.rows ?? Math.max(1, Math.floor(this.mapHeightTiles / _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES));\n        const cur = this.spawnManager?.getCurrentZone();\n        if (!cur) return;\n        const cw = this.miniW / cols;\n        const ch = this.miniH / rows;\n        this.miniHighlight.clear();\n        this.miniHighlight.lineStyle(2, 0xffff66, 1);\n        this.miniHighlight.strokeRect(cur.col * cw, cur.row * ch, cw, ch);\n    }\n    worldToMini(x, y) {\n        const sx = this.miniW / (this.mapWidthTiles * this.tileSizePx);\n        const sy = this.miniH / (this.mapHeightTiles * this.tileSizePx);\n        return {\n            x: x * sx,\n            y: y * sy\n        };\n    }\n    addMiniMarker(key, wx, wy) {\n        if (!this.miniMarkers) return;\n        const pt = this.worldToMini(wx, wy);\n        const dot = this.add.rectangle(pt.x, pt.y, 4, 4, 0xffffff, 1).setOrigin(0.5);\n        dot.name = key;\n        this.miniMarkers.add(dot);\n    }\n    removeMiniMarker(key) {\n        if (!this.miniMarkers) return;\n        const list = this.miniMarkers.list;\n        const found = list.find((ch)=>ch.name === key);\n        if (found) found.destroy();\n    }\n    getNearestActive(radius) {\n        if (!this.spawnManager) return null;\n        let best = null;\n        let bestD = Number.POSITIVE_INFINITY;\n        this.spawnManager.getActiveSpawns().forEach((rec)=>{\n            const d = phaser__WEBPACK_IMPORTED_MODULE_0__.Math.Distance.Between(this.player.x, this.player.y, rec.position.x, rec.position.y);\n            if (d < radius && d < bestD) {\n                bestD = d;\n                best = rec;\n            }\n        });\n        return best;\n    }\n    async startBattleFromKey(key) {\n        if (!this.spawnManager) return;\n        const rec = this.spawnManager.getActiveSpawns().find((r)=>r.key === key);\n        if (!rec) return;\n        if (!this.configData.playerPokemon) {\n            this.statusOnce('You need a Pokémon to battle!', 800);\n            return;\n        }\n        try {\n            const pokeRes = await fetch(`https://pokeapi.co/api/v2/pokemon/${rec.pokeId}`);\n            const pokeData = await pokeRes.json();\n            this.spawnManager.despawn(key);\n            // Transform player Pokemon to match BattleScene expected format\n            const playerPoke = this.configData.playerPokemon;\n            const hpStat = playerPoke.data?.stats?.find((s)=>s.stat.name === 'hp')?.base_stat || 50;\n            const maxHp = Math.floor(hpStat * 1.5 * (playerPoke.level || 1));\n            this.scene.start('BattleScene', {\n                wildPokemon: {\n                    name: rec.name,\n                    pokeId: rec.pokeId,\n                    data: pokeData,\n                    spriteUrl: rec.spriteUrl,\n                    level: rec.level\n                },\n                playerPokemon: {\n                    name: playerPoke.name || playerPoke.displayName,\n                    pokeId: playerPoke.id,\n                    data: playerPoke.data,\n                    spriteUrl: playerPoke.sprite,\n                    level: playerPoke.level || 1,\n                    maxHp: maxHp,\n                    currentHp: maxHp\n                },\n                trainerLevel: this.configData.trainerLevel || 1\n            });\n        } catch  {}\n    }\n    // ---- Structures ----\n    generateStructures() {\n        const cols = Math.max(1, Math.floor(this.mapWidthTiles / _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES));\n        const rows = Math.max(1, Math.floor(this.mapHeightTiles / _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES));\n        const zones = (0,_mapZones__WEBPACK_IMPORTED_MODULE_3__.generateZones)(cols, rows);\n        const choose = (arr)=>arr[Math.floor(Math.random() * arr.length)];\n        const byBiome = {\n            city: [\n                \"lab\",\n                \"house\"\n            ],\n            mountain: [\n                \"temple\",\n                \"house\"\n            ],\n            forest: [\n                \"house\",\n                \"tower\"\n            ],\n            desert: [\n                \"temple\"\n            ],\n            lake: [\n                \"tower\"\n            ],\n            grassland: [\n                \"house\"\n            ],\n            cave: [\n                \"tower\"\n            ],\n            snowfield: [\n                \"house\",\n                \"temple\"\n            ]\n        };\n        this.structures = [];\n        zones.forEach((z)=>{\n            if (Math.random() > 0.12) return; // ~12% of zones have a building\n            const types = byBiome[z.biome] || [\n                \"house\"\n            ];\n            const type = choose(types);\n            const startX = z.col * _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES * this.tileSizePx;\n            const startY = z.row * _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES * this.tileSizePx;\n            const x = startX + 16 + Math.random() * (_mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES * this.tileSizePx - 32);\n            const y = startY + 16 + Math.random() * (_mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES * this.tileSizePx - 32);\n            const id = `b-${z.id}-${type}-${Math.floor(x)}-${Math.floor(y)}`;\n            this.structures.push({\n                id,\n                type,\n                col: z.col,\n                row: z.row,\n                x,\n                y\n            });\n        });\n        // render\n        this.structures.forEach((s)=>{\n            const color = s.type === \"lab\" ? 0xcfe3ff : s.type === \"tower\" ? 0x6b4e9b : s.type === \"temple\" ? 0xc2b280 : 0xd3d3d3;\n            const building = this.add.rectangle(s.x, s.y, 32, 24, color, 1).setOrigin(0.5).setDepth(15);\n            this.physics.add.existing(building, true);\n            const door = this.add.rectangle(s.x, s.y + 12, 10, 6, 0x000000, 0.8).setDepth(16);\n            this.physics.add.existing(door, true);\n            this.physics.add.overlap(this.player, door, ()=>this.enterStructure(s));\n            // minimap marker\n            if (this.miniBuildings) {\n                const pt = this.worldToMini(s.x, s.y);\n                const sq = this.add.rectangle(pt.x, pt.y, 5, 5, 0xffe066, 1).setOrigin(0.5);\n                this.miniBuildings.add(sq);\n            }\n        });\n    }\n    enterStructure(s) {\n        if (this.insideStructure.active) return;\n        this.insideStructure = {\n            active: true,\n            type: s.type\n        };\n        // override spawn pool based on structure -> use BIOMES mapping\n        const b = s.type === \"tower\" ? _biomes__WEBPACK_IMPORTED_MODULE_4__.BIOMES.tower : s.type === \"lab\" ? _biomes__WEBPACK_IMPORTED_MODULE_4__.BIOMES.lab : _biomes__WEBPACK_IMPORTED_MODULE_4__.BIOMES.temple;\n        this.applyBiome(b.id);\n        this.spawnManager?.setOverrideTypes(b.pokemonPool);\n    }\n    exitStructure() {\n        if (!this.insideStructure.active) return;\n        this.insideStructure = {\n            active: false,\n            type: null\n        };\n        // clear override and re-apply zone biome color\n        this.spawnManager?.setOverrideTypes(null);\n        const cur = this.spawnManager?.getCurrentZone();\n        if (cur) {\n            const zones = (0,_mapZones__WEBPACK_IMPORTED_MODULE_3__.generateZones)(Math.floor(this.mapWidthTiles / _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES), Math.floor(this.mapHeightTiles / _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES));\n            const meta = zones.find((q)=>q.id === `${cur.col},${cur.row}`);\n            if (meta) this.applyBiome(meta.biome);\n        }\n    }\n    applyBiome(id) {\n        const def = _biomes__WEBPACK_IMPORTED_MODULE_4__.BIOMES[id];\n        if (!def) return;\n        if (this.envOverlay) {\n            const target = def.environmentColor;\n            const from = this.envOverlay.fillColor ?? 0xffffff;\n            const o = {\n                t: 0\n            };\n            this.tweens.add({\n                targets: o,\n                t: 1,\n                duration: 400,\n                onUpdate: ()=>{\n                    const c = phaser__WEBPACK_IMPORTED_MODULE_0__.Display.Color.Interpolate.ColorWithColor(phaser__WEBPACK_IMPORTED_MODULE_0__.Display.Color.IntegerToColor(from), phaser__WEBPACK_IMPORTED_MODULE_0__.Display.Color.IntegerToColor(target), 100, Math.floor(o.t * 100));\n                    const hex = phaser__WEBPACK_IMPORTED_MODULE_0__.Display.Color.GetColor(c.r, c.g, c.b);\n                    this.envOverlay.setFillStyle(hex, 0.08);\n                }\n            });\n        }\n    }\n    pushSpawnsToUI() {\n        if (!this.configData.onSpawnsUpdate || !this.spawnManager) return;\n        const spawns = this.spawnManager.getActiveSpawns().map((r)=>({\n                key: r.key,\n                name: r.name,\n                pokeId: r.pokeId,\n                spriteUrl: r.spriteUrl,\n                position: r.position,\n                level: r.level,\n                rarity: r.rarity,\n                distance: phaser__WEBPACK_IMPORTED_MODULE_0__.Math.Distance.Between(this.player.x, this.player.y, r.position.x, r.position.y)\n            }));\n        this.configData.onSpawnsUpdate(spawns);\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./lib/phaser/GameScene.ts\n");

/***/ }),

/***/ "(pages-dir-node)/./lib/spawnUtils.ts":
/*!***************************!*\
  !*** ./lib/spawnUtils.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SpawnManager: () => (/* binding */ SpawnManager)\n/* harmony export */ });\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! phaser */ \"phaser\");\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(phaser__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _mapZones__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mapZones */ \"(pages-dir-node)/./lib/mapZones.ts\");\n\n\nconst MAX_ACTIVE = 8; // 7-8 active Pokemon per 10x10 grid area\n// Weighted rarity distribution (as per requirements)\nconst RARITY_WEIGHTS = {\n    common: 0.60,\n    uncommon: 0.25,\n    rare: 0.10,\n    epic: 0.04,\n    legendary: 0.01\n};\n// Legendary Pokemon IDs (require level >= 20)\nconst LEGENDARY_IDS = [\n    // Gen 1\n    144,\n    145,\n    146,\n    150,\n    151,\n    // Gen 2\n    243,\n    244,\n    245,\n    249,\n    250,\n    251,\n    // Gen 3\n    377,\n    378,\n    379,\n    380,\n    381,\n    382,\n    383,\n    384,\n    385,\n    386,\n    // Gen 4\n    480,\n    481,\n    482,\n    483,\n    484,\n    487,\n    488,\n    489,\n    490,\n    491\n];\n// Mythical Pokemon (also require level >= 20)\nconst MYTHICAL_IDS = [\n    151,\n    251,\n    385,\n    386,\n    489,\n    490,\n    491,\n    492,\n    493,\n    494\n];\n// Common Pokemon by type - Complete list from all generations\nconst COMMON_POKEMON_BY_TYPE = {\n    // Normal type - Common across all generations\n    normal: [\n        16,\n        19,\n        161,\n        163,\n        263,\n        396,\n        399,\n        504,\n        506,\n        519,\n        659,\n        734,\n        819\n    ],\n    // Grass type - Common starters and wild Pokemon\n    grass: [\n        1,\n        43,\n        69,\n        102,\n        152,\n        187,\n        252,\n        285,\n        387,\n        495,\n        548,\n        650,\n        672,\n        722,\n        810\n    ],\n    // Bug type - Most common type in Pokemon games\n    bug: [\n        10,\n        11,\n        13,\n        14,\n        165,\n        167,\n        265,\n        266,\n        268,\n        290,\n        412,\n        540,\n        595,\n        664,\n        736,\n        824\n    ],\n    // Flying type - Birds and common flyers\n    flying: [\n        16,\n        21,\n        41,\n        163,\n        276,\n        278,\n        396,\n        519,\n        521,\n        661,\n        714,\n        731,\n        821\n    ],\n    // Water type - Common water Pokemon\n    water: [\n        7,\n        54,\n        60,\n        72,\n        116,\n        118,\n        129,\n        158,\n        183,\n        258,\n        318,\n        393,\n        456,\n        501,\n        550,\n        656,\n        728,\n        771,\n        816\n    ],\n    // Fire type - Common fire Pokemon\n    fire: [\n        4,\n        37,\n        58,\n        77,\n        155,\n        218,\n        255,\n        322,\n        390,\n        498,\n        513,\n        653,\n        725,\n        813\n    ],\n    // Electric type - Common electric Pokemon\n    electric: [\n        25,\n        81,\n        100,\n        172,\n        179,\n        309,\n        311,\n        312,\n        403,\n        417,\n        522,\n        587,\n        702,\n        777,\n        835\n    ],\n    // Rock type - Common rock Pokemon\n    rock: [\n        74,\n        95,\n        138,\n        140,\n        213,\n        299,\n        304,\n        408,\n        410,\n        524,\n        557,\n        688,\n        696,\n        744,\n        837\n    ],\n    // Ground type - Common ground Pokemon\n    ground: [\n        27,\n        50,\n        104,\n        207,\n        231,\n        328,\n        449,\n        529,\n        551,\n        659,\n        749,\n        843\n    ],\n    // Poison type - Common poison Pokemon\n    poison: [\n        23,\n        29,\n        32,\n        41,\n        88,\n        109,\n        316,\n        336,\n        451,\n        453,\n        543,\n        568,\n        757,\n        848\n    ],\n    // Fighting type - Common fighting Pokemon\n    fighting: [\n        56,\n        66,\n        236,\n        296,\n        307,\n        447,\n        532,\n        538,\n        539,\n        674,\n        739,\n        759\n    ],\n    // Psychic type - Common psychic Pokemon\n    psychic: [\n        63,\n        96,\n        122,\n        177,\n        280,\n        307,\n        433,\n        517,\n        527,\n        605,\n        677,\n        765,\n        856\n    ],\n    // Ice type - Common ice Pokemon\n    ice: [\n        86,\n        215,\n        220,\n        361,\n        363,\n        459,\n        582,\n        613,\n        712,\n        872\n    ],\n    // Ghost type - Common ghost Pokemon\n    ghost: [\n        92,\n        200,\n        353,\n        355,\n        425,\n        562,\n        607,\n        708,\n        710,\n        778,\n        854\n    ],\n    // Dragon type - Less common but still available\n    dragon: [\n        147,\n        371,\n        443,\n        610,\n        633,\n        704,\n        780,\n        782,\n        884\n    ],\n    // Dark type - Common dark Pokemon\n    dark: [\n        198,\n        228,\n        261,\n        302,\n        434,\n        509,\n        624,\n        629,\n        686,\n        827,\n        859\n    ],\n    // Steel type - Common steel Pokemon\n    steel: [\n        81,\n        95,\n        304,\n        436,\n        597,\n        599,\n        707,\n        808,\n        878\n    ],\n    // Fairy type - Common fairy Pokemon (Gen 6+)\n    fairy: [\n        35,\n        39,\n        174,\n        183,\n        280,\n        439,\n        546,\n        682,\n        684,\n        702,\n        868\n    ]\n};\n// Get common IDs for type\nfunction getCommonIdsForType(type) {\n    return COMMON_POKEMON_BY_TYPE[type] || [\n        16,\n        19,\n        43\n    ]; // Default to Pidgey, Rattata, Caterpie\n}\n/**\r\n * Pick rarity based on weighted distribution and trainer level\r\n */ function pickRarity(trainerLevel) {\n    const r = Math.random();\n    let cumulative = 0;\n    // Legendary/Mythic require trainer level >= 20\n    const canSpawnLegendary = trainerLevel >= 20;\n    // Adjust weights if legendary not available\n    const weights = {\n        ...RARITY_WEIGHTS\n    };\n    if (!canSpawnLegendary) {\n        // Redistribute legendary weight to other rarities\n        const redistribution = weights.legendary / 4;\n        weights.common += redistribution;\n        weights.uncommon += redistribution;\n        weights.rare += redistribution;\n        weights.epic += redistribution;\n        weights.legendary = 0;\n    }\n    // Slightly increase better spawn chances with level\n    const levelBonus = Math.min(trainerLevel * 0.005, 0.1); // Max 10% bonus at level 20\n    weights.rare += levelBonus;\n    weights.epic += levelBonus / 2;\n    weights.common -= levelBonus * 1.5; // Reduce common spawns\n    for (const [rarity, weight] of Object.entries(weights)){\n        cumulative += weight;\n        if (r < cumulative) return rarity;\n    }\n    return \"common\";\n}\nasync function fetchPokemon(pokeId) {\n    const res = await fetch(`https://pokeapi.co/api/v2/pokemon/${pokeId}`);\n    const data = await res.json();\n    const types = data.types?.map((t)=>t.type.name) || [];\n    const spriteUrl = data?.sprites?.front_default || data?.sprites?.other?.[\"official-artwork\"]?.front_default;\n    return {\n        data,\n        types,\n        spriteUrl,\n        name: data.name\n    };\n}\nasync function fetchSpecies(pokeId) {\n    const res = await fetch(`https://pokeapi.co/api/v2/pokemon-species/${pokeId}`);\n    return res.json();\n}\n// Heuristic rarity tiering based on species flags and capture_rate\nfunction classifyRarity(species, pokeId) {\n    // Check if legendary or mythical\n    if (LEGENDARY_IDS.includes(pokeId) || MYTHICAL_IDS.includes(pokeId)) return \"legendary\";\n    if (species?.is_legendary || species?.is_mythical) return \"legendary\";\n    const rate = species?.capture_rate ?? 45; // 0-255 higher = easier\n    // Classify based on capture rate\n    if (rate >= 200) return \"common\"; // Very easy\n    if (rate >= 120) return \"uncommon\"; // Easy\n    if (rate >= 75) return \"rare\"; // Moderate\n    if (rate >= 45) return \"epic\"; // Hard\n    return \"legendary\"; // Very hard\n}\nclass SpawnManager extends phaser__WEBPACK_IMPORTED_MODULE_0__.Events.EventEmitter {\n    constructor(scene, tileSize, mapWidthTiles, mapHeightTiles, trainerLevel = 1){\n        super(), this.zones = [], this.zoneCols = 0, this.zoneRows = 0, this.active = new Map(), this.currentZone = {\n            col: 0,\n            row: 0,\n            id: \"0,0\"\n        }, this.overrideTypes = null, this.trainerLevel = 1 // Trainer level for spawn balancing\n        ;\n        this.scene = scene;\n        this.tileSize = tileSize;\n        this.mapWidthTiles = mapWidthTiles;\n        this.mapHeightTiles = mapHeightTiles;\n        this.trainerLevel = trainerLevel;\n        this.zoneCols = Math.max(1, Math.floor(mapWidthTiles / _mapZones__WEBPACK_IMPORTED_MODULE_1__.ZONE_TILES));\n        this.zoneRows = Math.max(1, Math.floor(mapHeightTiles / _mapZones__WEBPACK_IMPORTED_MODULE_1__.ZONE_TILES));\n        this.zones = (0,_mapZones__WEBPACK_IMPORTED_MODULE_1__.generateZones)(this.zoneCols, this.zoneRows);\n    }\n    getActiveSpawns() {\n        return Array.from(this.active.values());\n    }\n    getZoneGrid() {\n        return {\n            cols: this.zoneCols,\n            rows: this.zoneRows,\n            zones: this.zones\n        };\n    }\n    getCurrentZone() {\n        return this.currentZone;\n    }\n    setOverrideTypes(types) {\n        this.overrideTypes = types;\n        this.topUpSpawns(true);\n    }\n    setTrainerLevel(level) {\n        this.trainerLevel = level;\n    }\n    updatePlayerPos(x, y) {\n        const tx = Math.floor(x / this.tileSize);\n        const ty = Math.floor(y / this.tileSize);\n        const z = (0,_mapZones__WEBPACK_IMPORTED_MODULE_1__.getZoneForTile)(tx, ty, this.zoneCols, this.zoneRows);\n        if (z.id !== this.currentZone.id) {\n            this.currentZone = z;\n            this.emit(\"zoneChanged\", z);\n            // on zone change, try to top up spawns immediately\n            this.topUpSpawns(true);\n        }\n    }\n    start() {\n        this.topUpSpawns(true);\n        this.spawnTimer?.remove(false);\n        const scheduleNext = ()=>{\n            const delay = phaser__WEBPACK_IMPORTED_MODULE_0__.Math.Between(20000, 40000);\n            this.spawnTimer = this.scene.time.addEvent({\n                delay,\n                loop: false,\n                callback: ()=>{\n                    this.topUpSpawns(false);\n                    scheduleNext();\n                }\n            });\n        };\n        scheduleNext();\n    }\n    stop() {\n        this.spawnTimer?.remove(false);\n        this.active.forEach((r)=>this.despawn(r.key));\n        this.active.clear();\n    }\n    async topUpSpawns(immediate) {\n        if (this.active.size >= MAX_ACTIVE) return;\n        const need = Math.min(MAX_ACTIVE - this.active.size, 2); // spawn up to 2 at a time\n        for(let i = 0; i < need; i++){\n            try {\n                await this.spawnOne();\n            } catch  {}\n            if (!immediate) break;\n        }\n    }\n    getCandidateZones() {\n        const around = (0,_mapZones__WEBPACK_IMPORTED_MODULE_1__.getAdjacentZoneCoords)(this.currentZone.col, this.currentZone.row, this.zoneCols, this.zoneRows, 1);\n        return around;\n    }\n    pickZoneArea(zone) {\n        const startX = zone.col * _mapZones__WEBPACK_IMPORTED_MODULE_1__.ZONE_TILES * this.tileSize;\n        const startY = zone.row * _mapZones__WEBPACK_IMPORTED_MODULE_1__.ZONE_TILES * this.tileSize;\n        const endX = startX + _mapZones__WEBPACK_IMPORTED_MODULE_1__.ZONE_TILES * this.tileSize;\n        const endY = startY + _mapZones__WEBPACK_IMPORTED_MODULE_1__.ZONE_TILES * this.tileSize;\n        return {\n            startX,\n            startY,\n            endX,\n            endY\n        };\n    }\n    async spawnOne() {\n        const zones = this.getCandidateZones();\n        const picked = phaser__WEBPACK_IMPORTED_MODULE_0__.Utils.Array.GetRandom(zones);\n        const zoneMeta = this.zones.find((z)=>z.id === picked.id);\n        const biome = zoneMeta.biome;\n        const types = this.overrideTypes || _mapZones__WEBPACK_IMPORTED_MODULE_1__.BIOME_TYPE_POOLS[biome];\n        // Pick rarity target based on trainer level\n        const target = pickRarity(this.trainerLevel);\n        // For common spawns, prioritize common Pokemon IDs\n        let chosen = null;\n        if (target === \"common\") {\n            // Try to spawn common Pokemon first\n            const typeToUse = phaser__WEBPACK_IMPORTED_MODULE_0__.Utils.Array.GetRandom(types);\n            const commonIds = getCommonIdsForType(typeToUse);\n            const id = phaser__WEBPACK_IMPORTED_MODULE_0__.Utils.Array.GetRandom(commonIds);\n            try {\n                const p = await fetchPokemon(id);\n                if (p.spriteUrl) {\n                    const species = await fetchSpecies(id);\n                    const rarity = classifyRarity(species, id);\n                    chosen = {\n                        id,\n                        name: p.name,\n                        spriteUrl: p.spriteUrl,\n                        types: p.types,\n                        rarity\n                    };\n                }\n            } catch  {}\n        }\n        // If common failed or targeting other rarity, use random search\n        if (!chosen) {\n            for(let tries = 0; tries < 15; tries++){\n                let id = phaser__WEBPACK_IMPORTED_MODULE_0__.Math.Between(1, 898);\n                // For legendary target, only check legendary IDs if trainer level allows\n                if (target === \"legendary\" && this.trainerLevel >= 20) {\n                    id = phaser__WEBPACK_IMPORTED_MODULE_0__.Utils.Array.GetRandom([\n                        ...LEGENDARY_IDS,\n                        ...MYTHICAL_IDS\n                    ]);\n                }\n                const p = await fetchPokemon(id);\n                if (!p.spriteUrl) continue;\n                if (!p.types.some((t)=>types.includes(t))) continue; // not matching biome\n                const species = await fetchSpecies(id);\n                const r = classifyRarity(species, id);\n                // Allow some flexibility in rarity matching\n                if (r !== target && Math.random() > 0.3) continue;\n                chosen = {\n                    id,\n                    name: p.name,\n                    spriteUrl: p.spriteUrl,\n                    types: p.types,\n                    rarity: r\n                };\n                break;\n            }\n        }\n        if (!chosen) return;\n        const area = this.pickZoneArea(picked);\n        const x = phaser__WEBPACK_IMPORTED_MODULE_0__.Math.Between(area.startX + 12, area.endX - 12);\n        const y = phaser__WEBPACK_IMPORTED_MODULE_0__.Math.Between(area.startY + 12, area.endY - 12);\n        // Calculate Pokemon level based on trainer level and rarity\n        const baseLevel = Math.max(1, this.trainerLevel - 2 + phaser__WEBPACK_IMPORTED_MODULE_0__.Math.Between(-1, 3));\n        const rarityBonus = chosen.rarity === \"legendary\" ? 5 : chosen.rarity === \"epic\" ? 3 : chosen.rarity === \"rare\" ? 2 : 0;\n        const pokemonLevel = Math.max(1, baseLevel + rarityBonus);\n        const key = `spawn-${chosen.id}-${Date.now()}`;\n        const sprite = this.scene.add.image(x, y, `pkmn-${chosen.id}`).setVisible(false);\n        if (!this.scene.textures.exists(`pkmn-${chosen.id}`)) {\n            await new Promise((resolve)=>{\n                this.scene.load.once(phaser__WEBPACK_IMPORTED_MODULE_0__.Loader.Events.COMPLETE, ()=>resolve());\n                this.scene.load.image(`pkmn-${chosen.id}`, chosen.spriteUrl);\n                this.scene.load.start();\n            });\n            sprite.setTexture(`pkmn-${chosen.id}`);\n        }\n        sprite.setDepth(20).setInteractive({\n            useHandCursor: true\n        });\n        sprite.setScale(0.1).setAlpha(0);\n        sprite.on(\"pointerdown\", ()=>this.emit(\"spawnClicked\", key));\n        // emerge animation - vary by rarity\n        sprite.setVisible(true);\n        const scaleFactor = chosen.rarity === \"legendary\" ? 1.5 : chosen.rarity === \"epic\" ? 1.3 : 1.2;\n        this.scene.tweens.add({\n            targets: sprite,\n            alpha: 1,\n            scale: scaleFactor,\n            duration: 300,\n            yoyo: true,\n            ease: \"sine.out\",\n            onComplete: ()=>sprite.setScale(chosen.rarity === \"legendary\" ? 1.2 : 1)\n        });\n        const rec = {\n            key,\n            name: chosen.name,\n            pokeId: chosen.id,\n            types: chosen.types,\n            spriteUrl: chosen.spriteUrl,\n            position: {\n                x,\n                y\n            },\n            zone: picked,\n            sprite,\n            level: pokemonLevel,\n            rarity: chosen.rarity\n        };\n        // despawn after time based on rarity (legendary lasts longer)\n        const despawnTime = chosen.rarity === \"legendary\" ? 90000 : chosen.rarity === \"epic\" ? 75000 : 60000;\n        rec.timeout = this.scene.time.delayedCall(despawnTime, ()=>this.despawn(key));\n        this.active.set(key, rec);\n        this.emit(\"spawned\", rec);\n    }\n    despawn(key) {\n        const rec = this.active.get(key);\n        if (!rec) return;\n        if (rec.timeout) rec.timeout.remove(false);\n        if (rec.sprite) {\n            this.scene.tweens.add({\n                targets: rec.sprite,\n                alpha: 0,\n                duration: 400,\n                onComplete: ()=>rec.sprite?.destroy()\n            });\n        }\n        this.emit(\"despawned\", key);\n        this.active.delete(key);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./lib/spawnUtils.ts\n");

/***/ }),

/***/ "(pages-dir-node)/./lib/typeEffectiveness.ts":
/*!**********************************!*\
  !*** ./lib/typeEffectiveness.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MOVES: () => (/* binding */ MOVES),\n/* harmony export */   TYPE_EFFECTIVENESS: () => (/* binding */ TYPE_EFFECTIVENESS),\n/* harmony export */   calculateDamage: () => (/* binding */ calculateDamage),\n/* harmony export */   getEffectivenessText: () => (/* binding */ getEffectivenessText),\n/* harmony export */   getMoveData: () => (/* binding */ getMoveData),\n/* harmony export */   getTypeEffectiveness: () => (/* binding */ getTypeEffectiveness)\n/* harmony export */ });\n/**\r\n * Pokemon Type Effectiveness Chart and Damage Calculation\r\n * Based on canonical Pokemon mechanics\r\n */ const TYPE_EFFECTIVENESS = {\n    normal: {\n        rock: 0.5,\n        ghost: 0.0,\n        steel: 0.5\n    },\n    fire: {\n        fire: 0.5,\n        water: 0.5,\n        grass: 2.0,\n        ice: 2.0,\n        bug: 2.0,\n        rock: 0.5,\n        dragon: 0.5,\n        steel: 2.0\n    },\n    water: {\n        fire: 2.0,\n        water: 0.5,\n        grass: 0.5,\n        ground: 2.0,\n        rock: 2.0,\n        dragon: 0.5\n    },\n    electric: {\n        water: 2.0,\n        electric: 0.5,\n        grass: 0.5,\n        ground: 0.0,\n        flying: 2.0,\n        dragon: 0.5\n    },\n    grass: {\n        fire: 0.5,\n        water: 2.0,\n        grass: 0.5,\n        poison: 0.5,\n        ground: 2.0,\n        flying: 0.5,\n        bug: 0.5,\n        rock: 2.0,\n        dragon: 0.5,\n        steel: 0.5\n    },\n    ice: {\n        fire: 0.5,\n        water: 0.5,\n        grass: 2.0,\n        ice: 0.5,\n        ground: 2.0,\n        flying: 2.0,\n        dragon: 2.0,\n        steel: 0.5\n    },\n    fighting: {\n        normal: 2.0,\n        ice: 2.0,\n        poison: 0.5,\n        flying: 0.5,\n        psychic: 0.5,\n        bug: 0.5,\n        rock: 2.0,\n        ghost: 0.0,\n        dark: 2.0,\n        steel: 2.0,\n        fairy: 0.5\n    },\n    poison: {\n        grass: 2.0,\n        poison: 0.5,\n        ground: 0.5,\n        rock: 0.5,\n        ghost: 0.5,\n        steel: 0.0,\n        fairy: 2.0\n    },\n    ground: {\n        fire: 2.0,\n        electric: 2.0,\n        grass: 0.5,\n        poison: 2.0,\n        flying: 0.0,\n        bug: 0.5,\n        rock: 2.0,\n        steel: 2.0\n    },\n    flying: {\n        electric: 0.5,\n        grass: 2.0,\n        fighting: 2.0,\n        bug: 2.0,\n        rock: 0.5,\n        steel: 0.5\n    },\n    psychic: {\n        fighting: 2.0,\n        poison: 2.0,\n        psychic: 0.5,\n        dark: 0.0,\n        steel: 0.5\n    },\n    bug: {\n        fire: 0.5,\n        grass: 2.0,\n        fighting: 0.5,\n        poison: 0.5,\n        flying: 0.5,\n        psychic: 2.0,\n        ghost: 0.5,\n        dark: 2.0,\n        steel: 0.5,\n        fairy: 0.5\n    },\n    rock: {\n        fire: 2.0,\n        ice: 2.0,\n        fighting: 0.5,\n        ground: 0.5,\n        flying: 2.0,\n        bug: 2.0,\n        steel: 0.5\n    },\n    ghost: {\n        normal: 0.0,\n        psychic: 2.0,\n        ghost: 2.0,\n        dark: 0.5\n    },\n    dragon: {\n        dragon: 2.0,\n        steel: 0.5,\n        fairy: 0.0\n    },\n    dark: {\n        fighting: 0.5,\n        psychic: 2.0,\n        ghost: 2.0,\n        dark: 0.5,\n        fairy: 0.5\n    },\n    steel: {\n        fire: 0.5,\n        water: 0.5,\n        electric: 0.5,\n        ice: 2.0,\n        rock: 2.0,\n        steel: 0.5,\n        fairy: 2.0\n    },\n    fairy: {\n        fire: 0.5,\n        fighting: 2.0,\n        poison: 0.5,\n        dragon: 2.0,\n        dark: 2.0,\n        steel: 0.5\n    }\n};\n/**\r\n * Get type effectiveness multiplier for attack type against defender types\r\n */ function getTypeEffectiveness(attackType, defenderTypes) {\n    let multiplier = 1.0;\n    for (const defType of defenderTypes){\n        const effectiveness = TYPE_EFFECTIVENESS[attackType]?.[defType];\n        if (effectiveness !== undefined) {\n            multiplier *= effectiveness;\n        }\n    }\n    return multiplier;\n}\n/**\r\n * Get effectiveness description for UI\r\n */ function getEffectivenessText(multiplier) {\n    if (multiplier === 0) return \"No effect!\";\n    if (multiplier >= 4) return \"It's super duper effective!\";\n    if (multiplier >= 2) return \"It's super effective!\";\n    if (multiplier <= 0.25) return \"It's barely effective...\";\n    if (multiplier <= 0.5) return \"It's not very effective...\";\n    return null;\n}\n/**\r\n * Calculate damage using Pokemon damage formula\r\n * damage = (((2 * level / 5 + 2) * power * (attack / defense)) / 50 + 2) * modifiers\r\n * \r\n * @param level - Attacking Pokemon's level\r\n * @param power - Move's power\r\n * @param attack - Attacking Pokemon's attack stat\r\n * @param defense - Defending Pokemon's defense stat\r\n * @param attackType - Type of the move\r\n * @param defenderTypes - Defending Pokemon's types\r\n * @returns Object with damage, type effectiveness multiplier, and effectiveness text\r\n */ function calculateDamage(level, power, attack, defense, attackType, defenderTypes) {\n    // Base damage calculation\n    const levelFactor = 2 * level / 5 + 2;\n    const attackDefenseRatio = attack / Math.max(1, defense);\n    const baseDamage = levelFactor * power * attackDefenseRatio / 50 + 2;\n    // Type effectiveness\n    const typeMultiplier = getTypeEffectiveness(attackType, defenderTypes);\n    // Random factor (0.85 to 1.0)\n    const randomFactor = 0.85 + Math.random() * 0.15;\n    // Calculate final damage\n    const finalDamage = Math.floor(baseDamage * typeMultiplier * randomFactor);\n    return {\n        damage: Math.max(1, finalDamage),\n        effectiveness: typeMultiplier,\n        effectivenessText: getEffectivenessText(typeMultiplier)\n    };\n}\nconst MOVES = {\n    // Normal moves\n    \"tackle\": {\n        name: \"Tackle\",\n        type: \"normal\",\n        power: 40,\n        category: \"physical\"\n    },\n    \"scratch\": {\n        name: \"Scratch\",\n        type: \"normal\",\n        power: 40,\n        category: \"physical\"\n    },\n    \"quick-attack\": {\n        name: \"Quick Attack\",\n        type: \"normal\",\n        power: 40,\n        category: \"physical\"\n    },\n    // Fire moves\n    \"ember\": {\n        name: \"Ember\",\n        type: \"fire\",\n        power: 40,\n        category: \"special\"\n    },\n    \"flamethrower\": {\n        name: \"Flamethrower\",\n        type: \"fire\",\n        power: 90,\n        category: \"special\"\n    },\n    // Water moves\n    \"water-gun\": {\n        name: \"Water Gun\",\n        type: \"water\",\n        power: 40,\n        category: \"special\"\n    },\n    \"bubble\": {\n        name: \"Bubble\",\n        type: \"water\",\n        power: 40,\n        category: \"special\"\n    },\n    // Grass moves\n    \"vine-whip\": {\n        name: \"Vine Whip\",\n        type: \"grass\",\n        power: 45,\n        category: \"physical\"\n    },\n    \"razor-leaf\": {\n        name: \"Razor Leaf\",\n        type: \"grass\",\n        power: 55,\n        category: \"physical\"\n    },\n    // Electric moves\n    \"thunder-shock\": {\n        name: \"Thunder Shock\",\n        type: \"electric\",\n        power: 40,\n        category: \"special\"\n    },\n    \"thunderbolt\": {\n        name: \"Thunderbolt\",\n        type: \"electric\",\n        power: 90,\n        category: \"special\"\n    },\n    // Other moves\n    \"powder-snow\": {\n        name: \"Powder Snow\",\n        type: \"ice\",\n        power: 40,\n        category: \"special\"\n    },\n    \"karate-chop\": {\n        name: \"Karate Chop\",\n        type: \"fighting\",\n        power: 50,\n        category: \"physical\"\n    },\n    \"poison-sting\": {\n        name: \"Poison Sting\",\n        type: \"poison\",\n        power: 15,\n        category: \"physical\"\n    },\n    \"mud-slap\": {\n        name: \"Mud Slap\",\n        type: \"ground\",\n        power: 20,\n        category: \"special\"\n    },\n    \"gust\": {\n        name: \"Gust\",\n        type: \"flying\",\n        power: 40,\n        category: \"special\"\n    },\n    \"confusion\": {\n        name: \"Confusion\",\n        type: \"psychic\",\n        power: 50,\n        category: \"special\"\n    },\n    \"bug-bite\": {\n        name: \"Bug Bite\",\n        type: \"bug\",\n        power: 60,\n        category: \"physical\"\n    },\n    \"rock-throw\": {\n        name: \"Rock Throw\",\n        type: \"rock\",\n        power: 50,\n        category: \"physical\"\n    },\n    \"lick\": {\n        name: \"Lick\",\n        type: \"ghost\",\n        power: 30,\n        category: \"physical\"\n    },\n    \"dragon-breath\": {\n        name: \"Dragon Breath\",\n        type: \"dragon\",\n        power: 60,\n        category: \"special\"\n    },\n    \"bite\": {\n        name: \"Bite\",\n        type: \"dark\",\n        power: 60,\n        category: \"physical\"\n    },\n    \"metal-claw\": {\n        name: \"Metal Claw\",\n        type: \"steel\",\n        power: 50,\n        category: \"physical\"\n    },\n    \"fairy-wind\": {\n        name: \"Fairy Wind\",\n        type: \"fairy\",\n        power: 40,\n        category: \"special\"\n    }\n};\n/**\r\n * Get move data, with fallback to default tackle\r\n */ function getMoveData(moveName) {\n    const normalizedName = moveName.toLowerCase().replace(/\\s+/g, \"-\");\n    return MOVES[normalizedName] || MOVES[\"tackle\"];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./lib/typeEffectiveness.ts\n");

/***/ })

};
;