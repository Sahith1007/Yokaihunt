"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_pages-dir-node_components_Game_tsx";
exports.ids = ["_pages-dir-node_components_Game_tsx"];
exports.modules = {

/***/ "(pages-dir-node)/./components/Game.tsx":
/*!*****************************!*\
  !*** ./components/Game.tsx ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Game)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! phaser */ \"phaser\");\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(phaser__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _lib_phaser_GameScene__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/phaser/GameScene */ \"(pages-dir-node)/./lib/phaser/GameScene.ts\");\n/* harmony import */ var _lib_phaser_BattleScene__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../lib/phaser/BattleScene */ \"(pages-dir-node)/./lib/phaser/BattleScene.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_phaser_GameScene__WEBPACK_IMPORTED_MODULE_3__]);\n_lib_phaser_GameScene__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/* __next_internal_client_entry_do_not_use__ default auto */ \n\n\n\n\nfunction Game({ className = \"\", tileSize = 32, mapWidth = 50, mapHeight = 38, playerSpeed = 200, initialX, initialY, onPokemonSpotted, onPokemonCleared, onSpawnsUpdate, playerPokemon }) {\n    const gameRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const phaserGameRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"Game.useEffect\": ()=>{\n            if (!gameRef.current) return;\n            const getSize = {\n                \"Game.useEffect.getSize\": ()=>({\n                        w: gameRef.current.clientWidth,\n                        h: gameRef.current.clientHeight\n                    })\n            }[\"Game.useEffect.getSize\"];\n            const { w, h } = getSize();\n            const config = {\n                type: phaser__WEBPACK_IMPORTED_MODULE_1__.AUTO,\n                width: Math.max(320, w),\n                height: Math.max(240, h),\n                parent: gameRef.current,\n                backgroundColor: \"#0b0e14\",\n                physics: {\n                    default: \"arcade\",\n                    arcade: {\n                        gravity: {\n                            x: 0,\n                            y: 0\n                        },\n                        debug: false\n                    }\n                },\n                scene: [\n                    _lib_phaser_GameScene__WEBPACK_IMPORTED_MODULE_3__.GameScene,\n                    _lib_phaser_BattleScene__WEBPACK_IMPORTED_MODULE_4__.BattleScene\n                ],\n                scale: {\n                    mode: phaser__WEBPACK_IMPORTED_MODULE_1__.Scale.RESIZE,\n                    autoCenter: phaser__WEBPACK_IMPORTED_MODULE_1__.Scale.CENTER_BOTH\n                }\n            };\n            phaserGameRef.current = new phaser__WEBPACK_IMPORTED_MODULE_1__.Game(config);\n            const startOrRestart = {\n                \"Game.useEffect.startOrRestart\": ()=>{\n                    const game = phaserGameRef.current;\n                    const data = {\n                        tileSize,\n                        mapWidth,\n                        mapHeight,\n                        playerSpeed,\n                        initialX,\n                        initialY,\n                        onPokemonSpotted,\n                        onPokemonCleared,\n                        onSpawnsUpdate,\n                        playerPokemon\n                    };\n                    const mgr = game.scene;\n                    if (mgr.isActive(\"GameScene\")) {\n                        mgr.stop(\"GameScene\");\n                        mgr.start(\"GameScene\", data);\n                    } else {\n                        mgr.start(\"GameScene\", data);\n                    }\n                }\n            }[\"Game.useEffect.startOrRestart\"];\n            if (phaserGameRef.current.isBooted) startOrRestart();\n            else phaserGameRef.current.events.once(phaser__WEBPACK_IMPORTED_MODULE_1__.Core.Events.READY, startOrRestart);\n            const ro = new ResizeObserver({\n                \"Game.useEffect\": ()=>{\n                    if (!phaserGameRef.current || !gameRef.current) return;\n                    const { w: nw, h: nh } = getSize();\n                    phaserGameRef.current.scale.resize(Math.max(320, nw), Math.max(240, nh));\n                }\n            }[\"Game.useEffect\"]);\n            ro.observe(gameRef.current);\n            return ({\n                \"Game.useEffect\": ()=>{\n                    ro.disconnect();\n                    if (phaserGameRef.current) {\n                        phaserGameRef.current.destroy(true);\n                        phaserGameRef.current = null;\n                    }\n                }\n            })[\"Game.useEffect\"];\n        }\n    }[\"Game.useEffect\"], [\n        tileSize,\n        mapWidth,\n        mapHeight,\n        playerSpeed,\n        initialX,\n        initialY,\n        onPokemonSpotted,\n        onPokemonCleared,\n        onSpawnsUpdate,\n        playerPokemon\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: gameRef,\n        className: `game-container ${className}`,\n        style: {\n            width: \"100%\",\n            height: \"100%\"\n        }\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\Sahith\\\\OneDrive\\\\Desktop\\\\yokaihunt\\\\frontend\\\\components\\\\Game.tsx\",\n        lineNumber: 109,\n        columnNumber: 5\n    }, this);\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./components/Game.tsx\n");

/***/ }),

/***/ "(pages-dir-node)/./lib/biomes.ts":
/*!***********************!*\
  !*** ./lib/biomes.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BIOMES: () => (/* binding */ BIOMES)\n/* harmony export */ });\nconst BIOMES = {\n    grassland: {\n        id: \"grassland\",\n        name: \"Grassland\",\n        environmentColor: 0x87cc5c,\n        tileSet: {\n            ground: \"tilesheet\",\n            obstacle: \"tilesheet\"\n        },\n        pokemonPool: [\n            \"grass\",\n            \"bug\",\n            \"normal\",\n            \"flying\"\n        ],\n        weather: \"sun\"\n    },\n    desert: {\n        id: \"desert\",\n        name: \"Desert\",\n        environmentColor: 0xdeb887,\n        tileSet: {\n            ground: \"tilesheet\",\n            obstacle: \"tilesheet\"\n        },\n        pokemonPool: [\n            \"ground\",\n            \"rock\",\n            \"fire\"\n        ],\n        weather: \"sun\"\n    },\n    lake: {\n        id: \"lake\",\n        name: \"Lake\",\n        environmentColor: 0x66a3ff,\n        tileSet: {\n            ground: \"tilesheet\",\n            obstacle: \"tilesheet\"\n        },\n        pokemonPool: [\n            \"water\",\n            \"dragon\",\n            \"fairy\"\n        ],\n        weather: \"fog\"\n    },\n    city: {\n        id: \"city\",\n        name: \"City\",\n        environmentColor: 0x999999,\n        tileSet: {\n            ground: \"tilesheet\",\n            obstacle: \"tilesheet\"\n        },\n        pokemonPool: [\n            \"electric\",\n            \"normal\",\n            \"steel\",\n            \"fighting\"\n        ],\n        weather: \"none\"\n    },\n    mountain: {\n        id: \"mountain\",\n        name: \"Mountain\",\n        environmentColor: 0xb0c4de,\n        tileSet: {\n            ground: \"tilesheet\",\n            obstacle: \"tilesheet\"\n        },\n        pokemonPool: [\n            \"rock\",\n            \"ground\",\n            \"ice\",\n            \"dragon\"\n        ],\n        weather: \"snow\"\n    },\n    cave: {\n        id: \"cave\",\n        name: \"Cave\",\n        environmentColor: 0x444444,\n        tileSet: {\n            ground: \"tilesheet\",\n            obstacle: \"tilesheet\"\n        },\n        pokemonPool: [\n            \"rock\",\n            \"ground\",\n            \"poison\",\n            \"dark\"\n        ],\n        weather: \"fog\"\n    },\n    forest: {\n        id: \"forest\",\n        name: \"Forest\",\n        environmentColor: 0x2f6f4f,\n        tileSet: {\n            ground: \"tilesheet\",\n            obstacle: \"tilesheet\"\n        },\n        pokemonPool: [\n            \"grass\",\n            \"bug\",\n            \"fairy\"\n        ],\n        weather: \"fog\"\n    },\n    snowfield: {\n        id: \"snowfield\",\n        name: \"Snowfield\",\n        environmentColor: 0xe0f7ff,\n        tileSet: {\n            ground: \"tilesheet\",\n            obstacle: \"tilesheet\"\n        },\n        pokemonPool: [\n            \"ice\",\n            \"water\"\n        ],\n        weather: \"snow\"\n    },\n    tower: {\n        id: \"tower\",\n        name: \"Ancient Tower\",\n        environmentColor: 0x551a8b,\n        tileSet: {\n            ground: \"tilesheet\",\n            obstacle: \"tilesheet\"\n        },\n        pokemonPool: [\n            \"ghost\",\n            \"dark\"\n        ],\n        weather: \"fog\"\n    },\n    lab: {\n        id: \"lab\",\n        name: \"Research Lab\",\n        environmentColor: 0xccccff,\n        tileSet: {\n            ground: \"tilesheet\",\n            obstacle: \"tilesheet\"\n        },\n        pokemonPool: [\n            \"electric\",\n            \"steel\",\n            \"psychic\"\n        ],\n        weather: \"none\"\n    },\n    temple: {\n        id: \"temple\",\n        name: \"Desert Temple\",\n        environmentColor: 0xc2b280,\n        tileSet: {\n            ground: \"tilesheet\",\n            obstacle: \"tilesheet\"\n        },\n        pokemonPool: [\n            \"ground\",\n            \"rock\",\n            \"fire\"\n        ],\n        weather: \"sun\"\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1ub2RlKS8uL2xpYi9iaW9tZXMudHMiLCJtYXBwaW5ncyI6Ijs7OztBQWNPLE1BQU1BLFNBQW9DO0lBQy9DQyxXQUFXO1FBQ1RDLElBQUk7UUFDSkMsTUFBTTtRQUNOQyxrQkFBa0I7UUFDbEJDLFNBQVM7WUFBRUMsUUFBUTtZQUFhQyxVQUFVO1FBQVk7UUFDdERDLGFBQWE7WUFBQztZQUFTO1lBQU87WUFBVTtTQUFTO1FBQ2pEQyxTQUFTO0lBQ1g7SUFDQUMsUUFBUTtRQUNOUixJQUFJO1FBQ0pDLE1BQU07UUFDTkMsa0JBQWtCO1FBQ2xCQyxTQUFTO1lBQUVDLFFBQVE7WUFBYUMsVUFBVTtRQUFZO1FBQ3REQyxhQUFhO1lBQUM7WUFBVTtZQUFRO1NBQU87UUFDdkNDLFNBQVM7SUFDWDtJQUNBRSxNQUFNO1FBQ0pULElBQUk7UUFDSkMsTUFBTTtRQUNOQyxrQkFBa0I7UUFDbEJDLFNBQVM7WUFBRUMsUUFBUTtZQUFhQyxVQUFVO1FBQVk7UUFDdERDLGFBQWE7WUFBQztZQUFTO1lBQVU7U0FBUTtRQUN6Q0MsU0FBUztJQUNYO0lBQ0FHLE1BQU07UUFDSlYsSUFBSTtRQUNKQyxNQUFNO1FBQ05DLGtCQUFrQjtRQUNsQkMsU0FBUztZQUFFQyxRQUFRO1lBQWFDLFVBQVU7UUFBWTtRQUN0REMsYUFBYTtZQUFDO1lBQVk7WUFBVTtZQUFTO1NBQVc7UUFDeERDLFNBQVM7SUFDWDtJQUNBSSxVQUFVO1FBQ1JYLElBQUk7UUFDSkMsTUFBTTtRQUNOQyxrQkFBa0I7UUFDbEJDLFNBQVM7WUFBRUMsUUFBUTtZQUFhQyxVQUFVO1FBQVk7UUFDdERDLGFBQWE7WUFBQztZQUFRO1lBQVU7WUFBTztTQUFTO1FBQ2hEQyxTQUFTO0lBQ1g7SUFDQUssTUFBTTtRQUNKWixJQUFJO1FBQ0pDLE1BQU07UUFDTkMsa0JBQWtCO1FBQ2xCQyxTQUFTO1lBQUVDLFFBQVE7WUFBYUMsVUFBVTtRQUFZO1FBQ3REQyxhQUFhO1lBQUM7WUFBUTtZQUFVO1lBQVU7U0FBTztRQUNqREMsU0FBUztJQUNYO0lBQ0FNLFFBQVE7UUFDTmIsSUFBSTtRQUNKQyxNQUFNO1FBQ05DLGtCQUFrQjtRQUNsQkMsU0FBUztZQUFFQyxRQUFRO1lBQWFDLFVBQVU7UUFBWTtRQUN0REMsYUFBYTtZQUFDO1lBQVM7WUFBTztTQUFRO1FBQ3RDQyxTQUFTO0lBQ1g7SUFDQU8sV0FBVztRQUNUZCxJQUFJO1FBQ0pDLE1BQU07UUFDTkMsa0JBQWtCO1FBQ2xCQyxTQUFTO1lBQUVDLFFBQVE7WUFBYUMsVUFBVTtRQUFZO1FBQ3REQyxhQUFhO1lBQUM7WUFBTztTQUFRO1FBQzdCQyxTQUFTO0lBQ1g7SUFDQVEsT0FBTztRQUNMZixJQUFJO1FBQ0pDLE1BQU07UUFDTkMsa0JBQWtCO1FBQ2xCQyxTQUFTO1lBQUVDLFFBQVE7WUFBYUMsVUFBVTtRQUFZO1FBQ3REQyxhQUFhO1lBQUM7WUFBUztTQUFPO1FBQzlCQyxTQUFTO0lBQ1g7SUFDQVMsS0FBSztRQUNIaEIsSUFBSTtRQUNKQyxNQUFNO1FBQ05DLGtCQUFrQjtRQUNsQkMsU0FBUztZQUFFQyxRQUFRO1lBQWFDLFVBQVU7UUFBWTtRQUN0REMsYUFBYTtZQUFDO1lBQVk7WUFBUztTQUFVO1FBQzdDQyxTQUFTO0lBQ1g7SUFDQVUsUUFBUTtRQUNOakIsSUFBSTtRQUNKQyxNQUFNO1FBQ05DLGtCQUFrQjtRQUNsQkMsU0FBUztZQUFFQyxRQUFRO1lBQWFDLFVBQVU7UUFBWTtRQUN0REMsYUFBYTtZQUFDO1lBQVU7WUFBUTtTQUFPO1FBQ3ZDQyxTQUFTO0lBQ1g7QUFDRixFQUFFIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFNhaGl0aFxcT25lRHJpdmVcXERlc2t0b3BcXHlva2FpaHVudFxcZnJvbnRlbmRcXGxpYlxcYmlvbWVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB0eXBlIEJpb21lSWQgPSBcImdyYXNzbGFuZFwiIHwgXCJkZXNlcnRcIiB8IFwibGFrZVwiIHwgXCJjaXR5XCIgfCBcIm1vdW50YWluXCIgfCBcImNhdmVcIiB8IFwiZm9yZXN0XCIgfCBcInNub3dmaWVsZFwiIHwgXCJ0b3dlclwiIHwgXCJsYWJcIiB8IFwidGVtcGxlXCI7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEJpb21lRGVmIHtcclxuICBpZDogQmlvbWVJZDtcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgZW52aXJvbm1lbnRDb2xvcjogbnVtYmVyOyAvLyBoZXggY29sb3IgZm9yIG92ZXJsYXlcclxuICB0aWxlU2V0OiB7XHJcbiAgICBncm91bmQ6IHN0cmluZzsgLy8ga2V5IHVzZWQgaW4gUGhhc2VyIHRleHR1cmVzIG1hbmFnZXJcclxuICAgIG9ic3RhY2xlOiBzdHJpbmc7XHJcbiAgfTtcclxuICBwb2tlbW9uUG9vbDogc3RyaW5nW107IC8vIHR5cGUgbmFtZXMgdG8gcHJlZmVyXHJcbiAgd2VhdGhlcj86IFwiZm9nXCIgfCBcInNub3dcIiB8IFwic3VuXCIgfCBcIm5vbmVcIjtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEJJT01FUzogUmVjb3JkPEJpb21lSWQsIEJpb21lRGVmPiA9IHtcclxuICBncmFzc2xhbmQ6IHtcclxuICAgIGlkOiBcImdyYXNzbGFuZFwiLFxyXG4gICAgbmFtZTogXCJHcmFzc2xhbmRcIixcclxuICAgIGVudmlyb25tZW50Q29sb3I6IDB4ODdjYzVjLFxyXG4gICAgdGlsZVNldDogeyBncm91bmQ6IFwidGlsZXNoZWV0XCIsIG9ic3RhY2xlOiBcInRpbGVzaGVldFwiIH0sXHJcbiAgICBwb2tlbW9uUG9vbDogW1wiZ3Jhc3NcIiwgXCJidWdcIiwgXCJub3JtYWxcIiwgXCJmbHlpbmdcIl0sXHJcbiAgICB3ZWF0aGVyOiBcInN1blwiLFxyXG4gIH0sXHJcbiAgZGVzZXJ0OiB7XHJcbiAgICBpZDogXCJkZXNlcnRcIixcclxuICAgIG5hbWU6IFwiRGVzZXJ0XCIsXHJcbiAgICBlbnZpcm9ubWVudENvbG9yOiAweGRlYjg4NyxcclxuICAgIHRpbGVTZXQ6IHsgZ3JvdW5kOiBcInRpbGVzaGVldFwiLCBvYnN0YWNsZTogXCJ0aWxlc2hlZXRcIiB9LFxyXG4gICAgcG9rZW1vblBvb2w6IFtcImdyb3VuZFwiLCBcInJvY2tcIiwgXCJmaXJlXCJdLFxyXG4gICAgd2VhdGhlcjogXCJzdW5cIixcclxuICB9LFxyXG4gIGxha2U6IHtcclxuICAgIGlkOiBcImxha2VcIixcclxuICAgIG5hbWU6IFwiTGFrZVwiLFxyXG4gICAgZW52aXJvbm1lbnRDb2xvcjogMHg2NmEzZmYsXHJcbiAgICB0aWxlU2V0OiB7IGdyb3VuZDogXCJ0aWxlc2hlZXRcIiwgb2JzdGFjbGU6IFwidGlsZXNoZWV0XCIgfSxcclxuICAgIHBva2Vtb25Qb29sOiBbXCJ3YXRlclwiLCBcImRyYWdvblwiLCBcImZhaXJ5XCJdLFxyXG4gICAgd2VhdGhlcjogXCJmb2dcIixcclxuICB9LFxyXG4gIGNpdHk6IHtcclxuICAgIGlkOiBcImNpdHlcIixcclxuICAgIG5hbWU6IFwiQ2l0eVwiLFxyXG4gICAgZW52aXJvbm1lbnRDb2xvcjogMHg5OTk5OTksXHJcbiAgICB0aWxlU2V0OiB7IGdyb3VuZDogXCJ0aWxlc2hlZXRcIiwgb2JzdGFjbGU6IFwidGlsZXNoZWV0XCIgfSxcclxuICAgIHBva2Vtb25Qb29sOiBbXCJlbGVjdHJpY1wiLCBcIm5vcm1hbFwiLCBcInN0ZWVsXCIsIFwiZmlnaHRpbmdcIl0sXHJcbiAgICB3ZWF0aGVyOiBcIm5vbmVcIixcclxuICB9LFxyXG4gIG1vdW50YWluOiB7XHJcbiAgICBpZDogXCJtb3VudGFpblwiLFxyXG4gICAgbmFtZTogXCJNb3VudGFpblwiLFxyXG4gICAgZW52aXJvbm1lbnRDb2xvcjogMHhiMGM0ZGUsXHJcbiAgICB0aWxlU2V0OiB7IGdyb3VuZDogXCJ0aWxlc2hlZXRcIiwgb2JzdGFjbGU6IFwidGlsZXNoZWV0XCIgfSxcclxuICAgIHBva2Vtb25Qb29sOiBbXCJyb2NrXCIsIFwiZ3JvdW5kXCIsIFwiaWNlXCIsIFwiZHJhZ29uXCJdLFxyXG4gICAgd2VhdGhlcjogXCJzbm93XCIsXHJcbiAgfSxcclxuICBjYXZlOiB7XHJcbiAgICBpZDogXCJjYXZlXCIsXHJcbiAgICBuYW1lOiBcIkNhdmVcIixcclxuICAgIGVudmlyb25tZW50Q29sb3I6IDB4NDQ0NDQ0LFxyXG4gICAgdGlsZVNldDogeyBncm91bmQ6IFwidGlsZXNoZWV0XCIsIG9ic3RhY2xlOiBcInRpbGVzaGVldFwiIH0sXHJcbiAgICBwb2tlbW9uUG9vbDogW1wicm9ja1wiLCBcImdyb3VuZFwiLCBcInBvaXNvblwiLCBcImRhcmtcIl0sXHJcbiAgICB3ZWF0aGVyOiBcImZvZ1wiLFxyXG4gIH0sXHJcbiAgZm9yZXN0OiB7XHJcbiAgICBpZDogXCJmb3Jlc3RcIixcclxuICAgIG5hbWU6IFwiRm9yZXN0XCIsXHJcbiAgICBlbnZpcm9ubWVudENvbG9yOiAweDJmNmY0ZixcclxuICAgIHRpbGVTZXQ6IHsgZ3JvdW5kOiBcInRpbGVzaGVldFwiLCBvYnN0YWNsZTogXCJ0aWxlc2hlZXRcIiB9LFxyXG4gICAgcG9rZW1vblBvb2w6IFtcImdyYXNzXCIsIFwiYnVnXCIsIFwiZmFpcnlcIl0sXHJcbiAgICB3ZWF0aGVyOiBcImZvZ1wiLFxyXG4gIH0sXHJcbiAgc25vd2ZpZWxkOiB7XHJcbiAgICBpZDogXCJzbm93ZmllbGRcIixcclxuICAgIG5hbWU6IFwiU25vd2ZpZWxkXCIsXHJcbiAgICBlbnZpcm9ubWVudENvbG9yOiAweGUwZjdmZixcclxuICAgIHRpbGVTZXQ6IHsgZ3JvdW5kOiBcInRpbGVzaGVldFwiLCBvYnN0YWNsZTogXCJ0aWxlc2hlZXRcIiB9LFxyXG4gICAgcG9rZW1vblBvb2w6IFtcImljZVwiLCBcIndhdGVyXCJdLFxyXG4gICAgd2VhdGhlcjogXCJzbm93XCIsXHJcbiAgfSxcclxuICB0b3dlcjoge1xyXG4gICAgaWQ6IFwidG93ZXJcIixcclxuICAgIG5hbWU6IFwiQW5jaWVudCBUb3dlclwiLFxyXG4gICAgZW52aXJvbm1lbnRDb2xvcjogMHg1NTFhOGIsXHJcbiAgICB0aWxlU2V0OiB7IGdyb3VuZDogXCJ0aWxlc2hlZXRcIiwgb2JzdGFjbGU6IFwidGlsZXNoZWV0XCIgfSxcclxuICAgIHBva2Vtb25Qb29sOiBbXCJnaG9zdFwiLCBcImRhcmtcIl0sXHJcbiAgICB3ZWF0aGVyOiBcImZvZ1wiLFxyXG4gIH0sXHJcbiAgbGFiOiB7XHJcbiAgICBpZDogXCJsYWJcIixcclxuICAgIG5hbWU6IFwiUmVzZWFyY2ggTGFiXCIsXHJcbiAgICBlbnZpcm9ubWVudENvbG9yOiAweGNjY2NmZixcclxuICAgIHRpbGVTZXQ6IHsgZ3JvdW5kOiBcInRpbGVzaGVldFwiLCBvYnN0YWNsZTogXCJ0aWxlc2hlZXRcIiB9LFxyXG4gICAgcG9rZW1vblBvb2w6IFtcImVsZWN0cmljXCIsIFwic3RlZWxcIiwgXCJwc3ljaGljXCJdLFxyXG4gICAgd2VhdGhlcjogXCJub25lXCIsXHJcbiAgfSxcclxuICB0ZW1wbGU6IHtcclxuICAgIGlkOiBcInRlbXBsZVwiLFxyXG4gICAgbmFtZTogXCJEZXNlcnQgVGVtcGxlXCIsXHJcbiAgICBlbnZpcm9ubWVudENvbG9yOiAweGMyYjI4MCxcclxuICAgIHRpbGVTZXQ6IHsgZ3JvdW5kOiBcInRpbGVzaGVldFwiLCBvYnN0YWNsZTogXCJ0aWxlc2hlZXRcIiB9LFxyXG4gICAgcG9rZW1vblBvb2w6IFtcImdyb3VuZFwiLCBcInJvY2tcIiwgXCJmaXJlXCJdLFxyXG4gICAgd2VhdGhlcjogXCJzdW5cIixcclxuICB9LFxyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgU3RydWN0dXJlVHlwZSA9IFwiaG91c2VcIiB8IFwidG93ZXJcIiB8IFwibGFiXCIgfCBcInRlbXBsZVwiO1xyXG5leHBvcnQgaW50ZXJmYWNlIFN0cnVjdHVyZURlZiB7IGlkOiBzdHJpbmc7IHR5cGU6IFN0cnVjdHVyZVR5cGU7IGNvbDogbnVtYmVyOyByb3c6IG51bWJlcjsgeDogbnVtYmVyOyB5OiBudW1iZXI7IH1cclxuIl0sIm5hbWVzIjpbIkJJT01FUyIsImdyYXNzbGFuZCIsImlkIiwibmFtZSIsImVudmlyb25tZW50Q29sb3IiLCJ0aWxlU2V0IiwiZ3JvdW5kIiwib2JzdGFjbGUiLCJwb2tlbW9uUG9vbCIsIndlYXRoZXIiLCJkZXNlcnQiLCJsYWtlIiwiY2l0eSIsIm1vdW50YWluIiwiY2F2ZSIsImZvcmVzdCIsInNub3dmaWVsZCIsInRvd2VyIiwibGFiIiwidGVtcGxlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-node)/./lib/biomes.ts\n");

/***/ }),

/***/ "(pages-dir-node)/./lib/mapZones.ts":
/*!*************************!*\
  !*** ./lib/mapZones.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BIOME_TYPE_POOLS: () => (/* binding */ BIOME_TYPE_POOLS),\n/* harmony export */   ZONE_TILES: () => (/* binding */ ZONE_TILES),\n/* harmony export */   generateZones: () => (/* binding */ generateZones),\n/* harmony export */   getAdjacentZoneCoords: () => (/* binding */ getAdjacentZoneCoords),\n/* harmony export */   getZoneForTile: () => (/* binding */ getZoneForTile)\n/* harmony export */ });\nconst ZONE_TILES = 10; // 10x10 tiles per zone\n// Simple deterministic biome layout over an R x C grid\nfunction generateZones(cols, rows) {\n    const zones = [];\n    for(let r = 0; r < rows; r++){\n        for(let c = 0; c < cols; c++){\n            let biome = \"grassland\";\n            const edge = r === 0 || c === 0 || r === rows - 1 || c === cols - 1;\n            if (r === 0) biome = \"mountain\"; // top ridge\n            else if (r === rows - 1) biome = \"beach\"; // bottom shore\n            else if ((r === Math.floor(rows / 2) || r === Math.floor(rows / 2) - 1) && (c === Math.floor(cols / 2) || c === Math.floor(cols / 2) - 1)) biome = \"lake\"; // 2x2 lake\n            else if (edge && (r === 1 || c === 1 || r === rows - 2 || c === cols - 2)) biome = \"cave\"; // near edges\n            else if ((r + c) % 9 === 0) biome = \"city\"; // a few city blocks\n            else if ((r + 2 * c) % 6 === 0) biome = \"forest\";\n            else if (r % 5 === 0 && c % 3 === 0) biome = \"desert\";\n            else if ((r - c) % 8 === 0) biome = \"snowfield\";\n            else biome = \"grassland\";\n            zones.push({\n                id: `${c},${r}`,\n                col: c,\n                row: r,\n                biome\n            });\n        }\n    }\n    return zones;\n}\nfunction getZoneForTile(tileX, tileY, zoneCols, zoneRows) {\n    const col = Math.max(0, Math.min(zoneCols - 1, Math.floor(tileX / ZONE_TILES)));\n    const row = Math.max(0, Math.min(zoneRows - 1, Math.floor(tileY / ZONE_TILES)));\n    return {\n        col,\n        row,\n        id: `${col},${row}`\n    };\n}\nfunction getAdjacentZoneCoords(col, row, zoneCols, zoneRows, radius = 1) {\n    const out = [];\n    for(let dy = -radius; dy <= radius; dy++){\n        for(let dx = -radius; dx <= radius; dx++){\n            const nc = col + dx;\n            const nr = row + dy;\n            if (nc < 0 || nr < 0 || nc >= zoneCols || nr >= zoneRows) continue;\n            out.push({\n                col: nc,\n                row: nr,\n                id: `${nc},${nr}`\n            });\n        }\n    }\n    return out;\n}\nconst BIOME_TYPE_POOLS = {\n    grassland: [\n        \"grass\",\n        \"bug\",\n        \"normal\",\n        \"flying\"\n    ],\n    cave: [\n        \"rock\",\n        \"ground\",\n        \"poison\",\n        \"dark\"\n    ],\n    beach: [\n        \"water\",\n        \"flying\"\n    ],\n    city: [\n        \"electric\",\n        \"normal\",\n        \"steel\",\n        \"fighting\"\n    ],\n    mountain: [\n        \"rock\",\n        \"ground\",\n        \"ice\",\n        \"dragon\"\n    ],\n    lake: [\n        \"water\",\n        \"dragon\",\n        \"fairy\"\n    ],\n    desert: [\n        \"ground\",\n        \"rock\",\n        \"fire\"\n    ],\n    forest: [\n        \"grass\",\n        \"bug\",\n        \"fairy\"\n    ],\n    snowfield: [\n        \"ice\",\n        \"water\",\n        \"fairy\"\n    ]\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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O0lBQ0EsT0FBT0o7QUFDVDtBQUVPLE1BQU1LLG1CQUE0QztJQUN2REMsV0FBVztRQUFDO1FBQVM7UUFBTztRQUFVO0tBQVM7SUFDL0NDLE1BQU07UUFBQztRQUFRO1FBQVU7UUFBVTtLQUFPO0lBQzFDQyxPQUFPO1FBQUM7UUFBUztLQUFTO0lBQzFCQyxNQUFNO1FBQUM7UUFBWTtRQUFVO1FBQVM7S0FBVztJQUNqREMsVUFBVTtRQUFDO1FBQVE7UUFBVTtRQUFPO0tBQVM7SUFDN0NDLE1BQU07UUFBQztRQUFTO1FBQVU7S0FBUTtJQUNsQ0MsUUFBUTtRQUFDO1FBQVU7UUFBUTtLQUFPO0lBQ2xDQyxRQUFRO1FBQUM7UUFBUztRQUFPO0tBQVE7SUFDakNDLFdBQVc7UUFBQztRQUFPO1FBQVM7S0FBUTtBQUN0QyxFQUFFIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFNhaGl0aFxcT25lRHJpdmVcXERlc2t0b3BcXHlva2FpaHVudFxcZnJvbnRlbmRcXGxpYlxcbWFwWm9uZXMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHR5cGUgQmlvbWUgPSBcImdyYXNzbGFuZFwiIHwgXCJjYXZlXCIgfCBcImJlYWNoXCIgfCBcImNpdHlcIiB8IFwibW91bnRhaW5cIiB8IFwibGFrZVwiIHwgXCJkZXNlcnRcIiB8IFwiZm9yZXN0XCIgfCBcInNub3dmaWVsZFwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IFpPTkVfVElMRVMgPSAxMDsgLy8gMTB4MTAgdGlsZXMgcGVyIHpvbmVcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgWm9uZSB7XHJcbiAgaWQ6IHN0cmluZzsgLy8gXCJjLHJcIlxyXG4gIGNvbDogbnVtYmVyO1xyXG4gIHJvdzogbnVtYmVyO1xyXG4gIGJpb21lOiBCaW9tZTtcclxufVxyXG5cclxuLy8gU2ltcGxlIGRldGVybWluaXN0aWMgYmlvbWUgbGF5b3V0IG92ZXIgYW4gUiB4IEMgZ3JpZFxyXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVab25lcyhjb2xzOiBudW1iZXIsIHJvd3M6IG51bWJlcik6IFpvbmVbXSB7XHJcbiAgY29uc3Qgem9uZXM6IFpvbmVbXSA9IFtdO1xyXG4gIGZvciAobGV0IHIgPSAwOyByIDwgcm93czsgcisrKSB7XHJcbiAgICBmb3IgKGxldCBjID0gMDsgYyA8IGNvbHM7IGMrKykge1xyXG4gICAgICBsZXQgYmlvbWU6IEJpb21lID0gXCJncmFzc2xhbmRcIjtcclxuICAgICAgY29uc3QgZWRnZSA9IHIgPT09IDAgfHwgYyA9PT0gMCB8fCByID09PSByb3dzIC0gMSB8fCBjID09PSBjb2xzIC0gMTtcclxuICAgICAgaWYgKHIgPT09IDApIGJpb21lID0gXCJtb3VudGFpblwiOyAvLyB0b3AgcmlkZ2VcclxuICAgICAgZWxzZSBpZiAociA9PT0gcm93cyAtIDEpIGJpb21lID0gXCJiZWFjaFwiOyAvLyBib3R0b20gc2hvcmVcclxuICAgICAgZWxzZSBpZiAoKHIgPT09IE1hdGguZmxvb3Iocm93cyAvIDIpIHx8IHIgPT09IE1hdGguZmxvb3Iocm93cyAvIDIpIC0gMSkgJiZcclxuICAgICAgICAgICAgICAgKGMgPT09IE1hdGguZmxvb3IoY29scyAvIDIpIHx8IGMgPT09IE1hdGguZmxvb3IoY29scyAvIDIpIC0gMSkpIGJpb21lID0gXCJsYWtlXCI7IC8vIDJ4MiBsYWtlXHJcbiAgICAgIGVsc2UgaWYgKGVkZ2UgJiYgKHIgPT09IDEgfHwgYyA9PT0gMSB8fCByID09PSByb3dzIC0gMiB8fCBjID09PSBjb2xzIC0gMikpIGJpb21lID0gXCJjYXZlXCI7IC8vIG5lYXIgZWRnZXNcclxuICAgICAgZWxzZSBpZiAoKHIgKyBjKSAlIDkgPT09IDApIGJpb21lID0gXCJjaXR5XCI7IC8vIGEgZmV3IGNpdHkgYmxvY2tzXHJcbiAgICAgIGVsc2UgaWYgKChyICsgMiAqIGMpICUgNiA9PT0gMCkgYmlvbWUgPSBcImZvcmVzdFwiO1xyXG4gICAgICBlbHNlIGlmIChyICUgNSA9PT0gMCAmJiBjICUgMyA9PT0gMCkgYmlvbWUgPSBcImRlc2VydFwiO1xyXG4gICAgICBlbHNlIGlmICgociAtIGMpICUgOCA9PT0gMCkgYmlvbWUgPSBcInNub3dmaWVsZFwiO1xyXG4gICAgICBlbHNlIGJpb21lID0gXCJncmFzc2xhbmRcIjtcclxuXHJcbiAgICAgIHpvbmVzLnB1c2goeyBpZDogYCR7Y30sJHtyfWAsIGNvbDogYywgcm93OiByLCBiaW9tZSB9KTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHpvbmVzO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0Wm9uZUZvclRpbGUodGlsZVg6IG51bWJlciwgdGlsZVk6IG51bWJlciwgem9uZUNvbHM6IG51bWJlciwgem9uZVJvd3M6IG51bWJlcik6IHsgY29sOiBudW1iZXI7IHJvdzogbnVtYmVyOyBpZDogc3RyaW5nIH0ge1xyXG4gIGNvbnN0IGNvbCA9IE1hdGgubWF4KDAsIE1hdGgubWluKHpvbmVDb2xzIC0gMSwgTWF0aC5mbG9vcih0aWxlWCAvIFpPTkVfVElMRVMpKSk7XHJcbiAgY29uc3Qgcm93ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oem9uZVJvd3MgLSAxLCBNYXRoLmZsb29yKHRpbGVZIC8gWk9ORV9USUxFUykpKTtcclxuICByZXR1cm4geyBjb2wsIHJvdywgaWQ6IGAke2NvbH0sJHtyb3d9YCB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWRqYWNlbnRab25lQ29vcmRzKGNvbDogbnVtYmVyLCByb3c6IG51bWJlciwgem9uZUNvbHM6IG51bWJlciwgem9uZVJvd3M6IG51bWJlciwgcmFkaXVzID0gMSkge1xyXG4gIGNvbnN0IG91dDogeyBjb2w6IG51bWJlcjsgcm93OiBudW1iZXI7IGlkOiBzdHJpbmcgfVtdID0gW107XHJcbiAgZm9yIChsZXQgZHkgPSAtcmFkaXVzOyBkeSA8PSByYWRpdXM7IGR5KyspIHtcclxuICAgIGZvciAobGV0IGR4ID0gLXJhZGl1czsgZHggPD0gcmFkaXVzOyBkeCsrKSB7XHJcbiAgICAgIGNvbnN0IG5jID0gY29sICsgZHg7IGNvbnN0IG5yID0gcm93ICsgZHk7XHJcbiAgICAgIGlmIChuYyA8IDAgfHwgbnIgPCAwIHx8IG5jID49IHpvbmVDb2xzIHx8IG5yID49IHpvbmVSb3dzKSBjb250aW51ZTtcclxuICAgICAgb3V0LnB1c2goeyBjb2w6IG5jLCByb3c6IG5yLCBpZDogYCR7bmN9LCR7bnJ9YCB9KTtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIG91dDtcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEJJT01FX1RZUEVfUE9PTFM6IFJlY29yZDxCaW9tZSwgc3RyaW5nW10+ID0ge1xyXG4gIGdyYXNzbGFuZDogW1wiZ3Jhc3NcIiwgXCJidWdcIiwgXCJub3JtYWxcIiwgXCJmbHlpbmdcIl0sXHJcbiAgY2F2ZTogW1wicm9ja1wiLCBcImdyb3VuZFwiLCBcInBvaXNvblwiLCBcImRhcmtcIl0sXHJcbiAgYmVhY2g6IFtcIndhdGVyXCIsIFwiZmx5aW5nXCJdLFxyXG4gIGNpdHk6IFtcImVsZWN0cmljXCIsIFwibm9ybWFsXCIsIFwic3RlZWxcIiwgXCJmaWdodGluZ1wiXSxcclxuICBtb3VudGFpbjogW1wicm9ja1wiLCBcImdyb3VuZFwiLCBcImljZVwiLCBcImRyYWdvblwiXSxcclxuICBsYWtlOiBbXCJ3YXRlclwiLCBcImRyYWdvblwiLCBcImZhaXJ5XCJdLFxyXG4gIGRlc2VydDogW1wiZ3JvdW5kXCIsIFwicm9ja1wiLCBcImZpcmVcIl0sXHJcbiAgZm9yZXN0OiBbXCJncmFzc1wiLCBcImJ1Z1wiLCBcImZhaXJ5XCJdLFxyXG4gIHNub3dmaWVsZDogW1wiaWNlXCIsIFwid2F0ZXJcIiwgXCJmYWlyeVwiXSxcclxufTtcclxuIl0sIm5hbWVzIjpbIlpPTkVfVElMRVMiLCJnZW5lcmF0ZVpvbmVzIiwiY29scyIsInJvd3MiLCJ6b25lcyIsInIiLCJjIiwiYmlvbWUiLCJlZGdlIiwiTWF0aCIsImZsb29yIiwicHVzaCIsImlkIiwiY29sIiwicm93IiwiZ2V0Wm9uZUZvclRpbGUiLCJ0aWxlWCIsInRpbGVZIiwiem9uZUNvbHMiLCJ6b25lUm93cyIsIm1heCIsIm1pbiIsImdldEFkamFjZW50Wm9uZUNvb3JkcyIsInJhZGl1cyIsIm91dCIsImR5IiwiZHgiLCJuYyIsIm5yIiwiQklPTUVfVFlQRV9QT09MUyIsImdyYXNzbGFuZCIsImNhdmUiLCJiZWFjaCIsImNpdHkiLCJtb3VudGFpbiIsImxha2UiLCJkZXNlcnQiLCJmb3Jlc3QiLCJzbm93ZmllbGQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-node)/./lib/mapZones.ts\n");

/***/ }),

/***/ "(pages-dir-node)/./lib/phaser/BattleScene.ts":
/*!***********************************!*\
  !*** ./lib/phaser/BattleScene.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BattleScene: () => (/* binding */ BattleScene)\n/* harmony export */ });\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! phaser */ \"phaser\");\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(phaser__WEBPACK_IMPORTED_MODULE_0__);\n\nclass BattleScene extends phaser__WEBPACK_IMPORTED_MODULE_0__.Scene {\n    constructor(){\n        super(\"BattleScene\"), this.wildHp = 0, this.wildMaxHp = 0, this.playerHp = 0, this.playerMaxHp = 0;\n    }\n    init(data) {\n        this.wildPokemon = data.wildPokemon;\n        this.playerPokemon = data.playerPokemon;\n        // Calculate HP from stats\n        const wildHpStat = this.wildPokemon.data?.stats?.find((s)=>s.stat.name === 'hp')?.base_stat || 50;\n        this.wildMaxHp = Math.floor(wildHpStat * 1.5); // Level scaling\n        this.wildHp = this.wildMaxHp;\n        this.playerMaxHp = this.playerPokemon.maxHp;\n        this.playerHp = this.playerPokemon.currentHp;\n    }\n    async preload() {\n        // Load Pokémon sprites if not already loaded\n        if (!this.textures.exists(`wild-${this.wildPokemon.pokeId}`)) {\n            await new Promise((resolve)=>{\n                this.load.once(phaser__WEBPACK_IMPORTED_MODULE_0__.Loader.Events.COMPLETE, ()=>resolve());\n                this.load.image(`wild-${this.wildPokemon.pokeId}`, this.wildPokemon.spriteUrl);\n                this.load.start();\n            });\n        }\n        if (!this.textures.exists(`player-${this.playerPokemon.pokeId}`)) {\n            await new Promise((resolve)=>{\n                this.load.once(phaser__WEBPACK_IMPORTED_MODULE_0__.Loader.Events.COMPLETE, ()=>resolve());\n                this.load.image(`player-${this.playerPokemon.pokeId}`, this.playerPokemon.spriteUrl);\n                this.load.start();\n            });\n        }\n    }\n    create() {\n        const { width, height } = this.scale;\n        // Background\n        this.add.rectangle(width / 2, height / 2, width, height, 0x87CEEB).setOrigin(0.5);\n        // Wild Pokémon (enemy, top right)\n        this.wildSprite = this.add.image(width * 0.75, height * 0.3, `wild-${this.wildPokemon.pokeId}`).setScale(2).setFlipX(false);\n        // Player Pokémon (bottom left, back sprite)\n        this.playerSprite = this.add.image(width * 0.25, height * 0.65, `player-${this.playerPokemon.pokeId}`).setScale(2).setFlipX(true);\n        this.createUI();\n        this.updateBattleText(`A wild ${this.capitalize(this.wildPokemon.name)} appeared!`);\n        // Auto-hide the appearance message after 3 seconds\n        this.time.delayedCall(3000, ()=>{\n            this.updateBattleText('What will you do?');\n        });\n    }\n    createUI() {\n        const { width, height } = this.scale;\n        // Battle UI Container\n        this.battleUI = this.add.container(0, 0);\n        // Wild Pokémon HP Bar (top left)\n        const wildHpBg = this.add.rectangle(20, 20, 200, 20, 0x333333).setOrigin(0);\n        this.wildHpBar = this.add.rectangle(22, 22, 196, 16, 0x00ff00).setOrigin(0);\n        this.wildHpText = this.add.text(20, 45, `${this.capitalize(this.wildPokemon.name)} HP: ${this.wildHp}/${this.wildMaxHp}`, {\n            fontSize: '14px',\n            color: '#000'\n        });\n        // Player Pokémon HP Bar (bottom right)\n        const playerHpBg = this.add.rectangle(width - 220, height - 80, 200, 20, 0x333333).setOrigin(0);\n        this.playerHpBar = this.add.rectangle(width - 218, height - 78, 196, 16, 0x00ff00).setOrigin(0);\n        this.playerHpText = this.add.text(width - 220, height - 55, `${this.capitalize(this.playerPokemon.name)} Lv.${this.playerPokemon.level} HP: ${this.playerHp}/${this.playerMaxHp}`, {\n            fontSize: '14px',\n            color: '#000'\n        });\n        // Battle text area\n        const textBg = this.add.rectangle(20, height - 150, width - 40, 100, 0xffffff, 0.9).setOrigin(0);\n        this.battleText = this.add.text(30, height - 140, '', {\n            fontSize: '16px',\n            color: '#000',\n            wordWrap: {\n                width: width - 60\n            }\n        });\n        // Action buttons\n        this.createActionButtons();\n        this.battleUI.add([\n            wildHpBg,\n            this.wildHpBar,\n            this.wildHpText,\n            playerHpBg,\n            this.playerHpBar,\n            this.playerHpText,\n            textBg,\n            this.battleText\n        ]);\n    }\n    createActionButtons() {\n        const { width, height } = this.scale;\n        this.actionButtons = this.add.container(0, 0);\n        const buttonData = [\n            {\n                text: 'FIGHT',\n                x: width - 200,\n                y: height - 40,\n                action: ()=>this.showMoveSelection()\n            },\n            {\n                text: 'BAG',\n                x: width - 150,\n                y: height - 40,\n                action: ()=>this.openBag()\n            },\n            {\n                text: 'CATCH',\n                x: width - 100,\n                y: height - 40,\n                action: ()=>this.attemptCatch()\n            },\n            {\n                text: 'RUN',\n                x: width - 50,\n                y: height - 40,\n                action: ()=>this.runAway()\n            }\n        ];\n        buttonData.forEach((btn)=>{\n            const button = this.add.text(btn.x, btn.y, btn.text, {\n                fontSize: '14px',\n                color: '#fff',\n                backgroundColor: '#333',\n                padding: {\n                    x: 8,\n                    y: 4\n                }\n            }).setInteractive({\n                useHandCursor: true\n            }).on('pointerdown', btn.action);\n            this.actionButtons?.add(button);\n        });\n        if (this.actionButtons) this.battleUI?.add(this.actionButtons);\n    }\n    showMoveSelection() {\n        // Hide main action buttons\n        if (this.actionButtons) this.actionButtons.setVisible(false);\n        const { width, height } = this.scale;\n        const moves = this.getPlayerMoves();\n        // Create move selection container\n        const moveContainer = this.add.container(0, 0);\n        // Background for move selection\n        const moveBg = this.add.rectangle(width - 320, height - 120, 300, 100, 0x222222, 0.95).setOrigin(0);\n        moveContainer.add(moveBg);\n        // Display up to 4 moves in a 2x2 grid\n        moves.slice(0, 4).forEach((move, index)=>{\n            const col = index % 2;\n            const row = Math.floor(index / 2);\n            const x = width - 310 + col * 150;\n            const y = height - 110 + row * 45;\n            const moveButton = this.add.text(x, y, move.name.toUpperCase(), {\n                fontSize: '13px',\n                color: '#fff',\n                backgroundColor: this.getMoveTypeColor(move.type),\n                padding: {\n                    x: 10,\n                    y: 6\n                }\n            }).setInteractive({\n                useHandCursor: true\n            }).on('pointerdown', ()=>{\n                moveContainer.destroy();\n                if (this.actionButtons) this.actionButtons.setVisible(true);\n                this.useMove(move);\n            });\n            moveContainer.add(moveButton);\n        });\n        // Back button\n        const backButton = this.add.text(width - 250, height - 20, 'BACK', {\n            fontSize: '12px',\n            color: '#fff',\n            backgroundColor: '#666',\n            padding: {\n                x: 8,\n                y: 4\n            }\n        }).setInteractive({\n            useHandCursor: true\n        }).on('pointerdown', ()=>{\n            moveContainer.destroy();\n            if (this.actionButtons) this.actionButtons.setVisible(true);\n        });\n        moveContainer.add(backButton);\n        this.battleUI?.add(moveContainer);\n    }\n    getPlayerMoves() {\n        // Get moves from Pokemon data\n        const moves = this.playerPokemon.data?.moves || [];\n        // Filter to get learned moves (simplified - just take first 4)\n        return moves.slice(0, 4).map((m)=>({\n                name: m.move.name.replace(/-/g, ' '),\n                url: m.move.url,\n                type: 'normal' // Default type, would need to fetch move details for actual type\n            }));\n    }\n    getMoveTypeColor(type) {\n        const colors = {\n            normal: '#A8A878',\n            fire: '#F08030',\n            water: '#6890F0',\n            grass: '#78C850',\n            electric: '#F8D030',\n            ice: '#98D8D8',\n            fighting: '#C03028',\n            poison: '#A040A0',\n            ground: '#E0C068',\n            flying: '#A890F0',\n            psychic: '#F85888',\n            bug: '#A8B820',\n            rock: '#B8A038',\n            ghost: '#705898',\n            dragon: '#7038F8',\n            dark: '#705848',\n            steel: '#B8B8D0',\n            fairy: '#EE99AC'\n        };\n        return colors[type] || colors.normal;\n    }\n    useMove(move) {\n        const playerAttack = this.getStatValue(this.playerPokemon.data, 'attack');\n        const wildDefense = this.getStatValue(this.wildPokemon.data, 'defense');\n        const baseDamage = Math.max(1, playerAttack - wildDefense);\n        const damage = Math.floor(baseDamage * (0.8 + Math.random() * 0.4)); // 0.8-1.2 multiplier\n        this.wildHp = Math.max(0, this.wildHp - damage);\n        this.updateBattleText(`${this.capitalize(this.playerPokemon.name)} used ${move.name}! Dealt ${damage} damage!`);\n        this.updateHpBars();\n        if (this.wildHp <= 0) {\n            this.wildDefeated();\n        } else {\n            this.time.delayedCall(1500, ()=>this.wildAttack());\n        }\n    }\n    playerAttack() {\n        const playerAttack = this.getStatValue(this.playerPokemon.data, 'attack');\n        const wildDefense = this.getStatValue(this.wildPokemon.data, 'defense');\n        const baseDamage = Math.max(1, playerAttack - wildDefense);\n        const damage = Math.floor(baseDamage * (0.8 + Math.random() * 0.4)); // 0.8-1.2 multiplier\n        this.wildHp = Math.max(0, this.wildHp - damage);\n        this.updateBattleText(`${this.capitalize(this.playerPokemon.name)} attacks! Dealt ${damage} damage!`);\n        this.updateHpBars();\n        if (this.wildHp <= 0) {\n            this.wildDefeated();\n        } else {\n            this.time.delayedCall(1500, ()=>this.wildAttack());\n        }\n    }\n    wildAttack() {\n        const wildAttack = this.getStatValue(this.wildPokemon.data, 'attack');\n        const playerDefense = this.getStatValue(this.playerPokemon.data, 'defense');\n        const baseDamage = Math.max(1, wildAttack - playerDefense);\n        const damage = Math.floor(baseDamage * (0.8 + Math.random() * 0.4));\n        this.playerHp = Math.max(0, this.playerHp - damage);\n        this.updateBattleText(`Wild ${this.capitalize(this.wildPokemon.name)} attacks! Dealt ${damage} damage!`);\n        this.updateHpBars();\n        if (this.playerHp <= 0) {\n            this.playerDefeated();\n        }\n    }\n    attemptCatch() {\n        const catchRate = this.wildHp < this.wildMaxHp * 0.2 ? 0.8 : 0.3; // Higher rate if HP < 20%\n        if (Math.random() < catchRate) {\n            this.updateBattleText(`Gotcha! ${this.capitalize(this.wildPokemon.name)} was caught!`);\n            this.time.delayedCall(2000, ()=>this.endBattle(true));\n        } else {\n            this.updateBattleText(`${this.capitalize(this.wildPokemon.name)} broke free!`);\n            this.time.delayedCall(1500, ()=>this.wildAttack());\n        }\n    }\n    openBag() {\n        this.updateBattleText(\"You rummage through your bag...\");\n        // TODO: Implement bag/item usage\n        this.time.delayedCall(1000, ()=>this.wildAttack());\n    }\n    runAway() {\n        this.updateBattleText(\"You ran away safely!\");\n        this.time.delayedCall(1500, ()=>this.endBattle(false));\n    }\n    wildDefeated() {\n        const expGained = Math.floor(this.getStatValue(this.wildPokemon.data, 'attack') * 1.5);\n        this.updateBattleText(`Wild ${this.capitalize(this.wildPokemon.name)} fainted! ${this.capitalize(this.playerPokemon.name)} gained ${expGained} EXP!`);\n        this.time.delayedCall(3000, ()=>this.endBattle(true));\n    }\n    playerDefeated() {\n        this.updateBattleText(`${this.capitalize(this.playerPokemon.name)} fainted! You lost the battle!`);\n        this.time.delayedCall(3000, ()=>this.endBattle(false));\n    }\n    endBattle(victory) {\n        // Return to GameScene\n        this.scene.start(\"GameScene\");\n    }\n    updateHpBars() {\n        if (this.wildHpBar && this.wildHpText) {\n            const wildHpPercent = this.wildHp / this.wildMaxHp;\n            this.wildHpBar.width = 196 * wildHpPercent;\n            this.wildHpBar.fillColor = wildHpPercent > 0.5 ? 0x00ff00 : wildHpPercent > 0.2 ? 0xffff00 : 0xff0000;\n            this.wildHpText.setText(`${this.capitalize(this.wildPokemon.name)} HP: ${this.wildHp}/${this.wildMaxHp}`);\n        }\n        if (this.playerHpBar && this.playerHpText) {\n            const playerHpPercent = this.playerHp / this.playerMaxHp;\n            this.playerHpBar.width = 196 * playerHpPercent;\n            this.playerHpBar.fillColor = playerHpPercent > 0.5 ? 0x00ff00 : playerHpPercent > 0.2 ? 0xffff00 : 0xff0000;\n            this.playerHpText.setText(`${this.capitalize(this.playerPokemon.name)} Lv.${this.playerPokemon.level} HP: ${this.playerHp}/${this.playerMaxHp}`);\n        }\n    }\n    updateBattleText(text) {\n        if (this.battleText) {\n            this.battleText.setText(text);\n        }\n    }\n    getStatValue(pokemonData, statName) {\n        const stat = pokemonData?.stats?.find((s)=>s.stat.name === statName);\n        return stat?.base_stat || 50;\n    }\n    capitalize(str) {\n        return str.charAt(0).toUpperCase() + str.slice(1);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1ub2RlKS8uL2xpYi9waGFzZXIvQmF0dGxlU2NlbmUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBb0IxQixNQUFNQyxvQkFBb0JELHlDQUFZO0lBbUIzQyxhQUFjO1FBQ1osS0FBSyxDQUFDLHFCQWZBRyxTQUFpQixRQUNqQkMsWUFBb0IsUUFDcEJDLFdBQW1CLFFBQ25CQyxjQUFzQjtJQWE5QjtJQUVBQyxLQUFLQyxJQUFnQixFQUFFO1FBQ3JCLElBQUksQ0FBQ0MsV0FBVyxHQUFHRCxLQUFLQyxXQUFXO1FBQ25DLElBQUksQ0FBQ0MsYUFBYSxHQUFHRixLQUFLRSxhQUFhO1FBRXZDLDBCQUEwQjtRQUMxQixNQUFNQyxhQUFhLElBQUksQ0FBQ0YsV0FBVyxDQUFDRCxJQUFJLEVBQUVJLE9BQU9DLEtBQUssQ0FBQ0MsSUFBV0EsRUFBRUMsSUFBSSxDQUFDQyxJQUFJLEtBQUssT0FBT0MsYUFBYTtRQUN0RyxJQUFJLENBQUNiLFNBQVMsR0FBR2MsS0FBS0MsS0FBSyxDQUFDUixhQUFhLE1BQU0sZ0JBQWdCO1FBQy9ELElBQUksQ0FBQ1IsTUFBTSxHQUFHLElBQUksQ0FBQ0MsU0FBUztRQUU1QixJQUFJLENBQUNFLFdBQVcsR0FBRyxJQUFJLENBQUNJLGFBQWEsQ0FBQ1UsS0FBSztRQUMzQyxJQUFJLENBQUNmLFFBQVEsR0FBRyxJQUFJLENBQUNLLGFBQWEsQ0FBQ1csU0FBUztJQUM5QztJQUVBLE1BQU1DLFVBQVU7UUFDZCw2Q0FBNkM7UUFDN0MsSUFBSSxDQUFDLElBQUksQ0FBQ0MsUUFBUSxDQUFDQyxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDZixXQUFXLENBQUNnQixNQUFNLEVBQUUsR0FBRztZQUM1RCxNQUFNLElBQUlDLFFBQWMsQ0FBQ0M7Z0JBQ3ZCLElBQUksQ0FBQ0MsSUFBSSxDQUFDQyxJQUFJLENBQUM3QiwwQ0FBYSxDQUFDK0IsTUFBTSxDQUFDQyxRQUFRLEVBQUUsSUFBTUw7Z0JBQ3BELElBQUksQ0FB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QUFRLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ0MsV0FBVyxFQUFFO1FBQ2pKO0lBQ0Y7SUFFUTBDLGlCQUFpQlMsSUFBWSxFQUFFO1FBQ3JDLElBQUksSUFBSSxDQUFDUSxVQUFVLEVBQUU7WUFDbkIsSUFBSSxDQUFDQSxVQUFVLENBQUMrRSxPQUFPLENBQUN2RjtRQUMxQjtJQUNGO0lBRVFxRSxhQUFhb0IsV0FBZ0IsRUFBRUMsUUFBZ0IsRUFBVTtRQUMvRCxNQUFNcEksT0FBT21JLGFBQWF0SSxPQUFPQyxLQUFLLENBQUNDLElBQVdBLEVBQUVDLElBQUksQ0FBQ0MsSUFBSSxLQUFLbUk7UUFDbEUsT0FBT3BJLE1BQU1FLGFBQWE7SUFDNUI7SUFFUWdDLFdBQVdtRyxHQUFXLEVBQVU7UUFDdEMsT0FBT0EsSUFBSUMsTUFBTSxDQUFDLEdBQUdyRCxXQUFXLEtBQUtvRCxJQUFJMUQsS0FBSyxDQUFDO0lBQ2pEO0FBQ0YiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcU2FoaXRoXFxPbmVEcml2ZVxcRGVza3RvcFxceW9rYWlodW50XFxmcm9udGVuZFxcbGliXFxwaGFzZXJcXEJhdHRsZVNjZW5lLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIFBoYXNlciBmcm9tIFwicGhhc2VyXCI7XHJcblxyXG5pbnRlcmZhY2UgQmF0dGxlRGF0YSB7XHJcbiAgd2lsZFBva2Vtb246IHtcclxuICAgIG5hbWU6IHN0cmluZztcclxuICAgIHBva2VJZDogbnVtYmVyO1xyXG4gICAgZGF0YTogYW55O1xyXG4gICAgc3ByaXRlVXJsOiBzdHJpbmc7XHJcbiAgfTtcclxuICBwbGF5ZXJQb2tlbW9uOiB7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICBwb2tlSWQ6IG51bWJlcjtcclxuICAgIGRhdGE6IGFueTtcclxuICAgIHNwcml0ZVVybDogc3RyaW5nO1xyXG4gICAgbGV2ZWw6IG51bWJlcjtcclxuICAgIGN1cnJlbnRIcDogbnVtYmVyO1xyXG4gICAgbWF4SHA6IG51bWJlcjtcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQmF0dGxlU2NlbmUgZXh0ZW5kcyBQaGFzZXIuU2NlbmUge1xyXG4gIHByaXZhdGUgd2lsZFBva2Vtb24hOiBCYXR0bGVEYXRhW1wid2lsZFBva2Vtb25cIl07XHJcbiAgcHJpdmF0ZSBwbGF5ZXJQb2tlbW9uITogQmF0dGxlRGF0YVtcInBsYXllclBva2Vtb25cIl07XHJcbiAgcHJpdmF0ZSB3aWxkU3ByaXRlPzogUGhhc2VyLkdhbWVPYmplY3RzLkltYWdlO1xyXG4gIHByaXZhdGUgcGxheWVyU3ByaXRlPzogUGhhc2VyLkdhbWVPYmplY3RzLkltYWdlO1xyXG4gIHByaXZhdGUgd2lsZEhwOiBudW1iZXIgPSAwO1xyXG4gIHByaXZhdGUgd2lsZE1heEhwOiBudW1iZXIgPSAwO1xyXG4gIHByaXZhdGUgcGxheWVySHA6IG51bWJlciA9IDA7XHJcbiAgcHJpdmF0ZSBwbGF5ZXJNYXhIcDogbnVtYmVyID0gMDtcclxuICBcclxuICAvLyBVSSBFbGVtZW50c1xyXG4gIHByaXZhdGUgYmF0dGxlVUk/OiBQaGFzZXIuR2FtZU9iamVjdHMuQ29udGFpbmVyO1xyXG4gIHByaXZhdGUgd2lsZEhwQmFyPzogUGhhc2VyLkdhbWVPYmplY3RzLlJlY3RhbmdsZTtcclxuICBwcml2YXRlIHBsYXllckhwQmFyPzogUGhhc2VyLkdhbWVPYmplY3RzLlJlY3RhbmdsZTtcclxuICBwcml2YXRlIHdpbGRIcFRleHQ/OiBQaGFzZXIuR2FtZU9iamVjdHMuVGV4dDtcclxuICBwcml2YXRlIHBsYXllckhwVGV4dD86IFBoYXNlci5HYW1lT2JqZWN0cy5UZXh0O1xyXG4gIHByaXZhdGUgYmF0dGxlVGV4dD86IFBoYXNlci5HYW1lT2JqZWN0cy5UZXh0O1xyXG4gIHByaXZhdGUgYWN0aW9uQnV0dG9ucz86IFBoYXNlci5HYW1lT2JqZWN0cy5Db250YWluZXI7XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgc3VwZXIoXCJCYXR0bGVTY2VuZVwiKTtcclxuICB9XHJcblxyXG4gIGluaXQoZGF0YTogQmF0dGxlRGF0YSkge1xyXG4gICAgdGhpcy53aWxkUG9rZW1vbiA9IGRhdGEud2lsZFBva2Vtb247XHJcbiAgICB0aGlzLnBsYXllclBva2Vtb24gPSBkYXRhLnBsYXllclBva2Vtb247XHJcbiAgICBcclxuICAgIC8vIENhbGN1bGF0ZSBIUCBmcm9tIHN0YXRzXHJcbiAgICBjb25zdCB3aWxkSHBTdGF0ID0gdGhpcy53aWxkUG9rZW1vbi5kYXRhPy5zdGF0cz8uZmluZCgoczogYW55KSA9PiBzLnN0YXQubmFtZSA9PT0gJ2hwJyk/LmJhc2Vfc3RhdCB8fCA1MDtcclxuICAgIHRoaXMud2lsZE1heEhwID0gTWF0aC5mbG9vcih3aWxkSHBTdGF0ICogMS41KTsgLy8gTGV2ZWwgc2NhbGluZ1xyXG4gICAgdGhpcy53aWxkSHAgPSB0aGlzLndpbGRNYXhIcDtcclxuICAgIFxyXG4gICAgdGhpcy5wbGF5ZXJNYXhIcCA9IHRoaXMucGxheWVyUG9rZW1vbi5tYXhIcDtcclxuICAgIHRoaXMucGxheWVySHAgPSB0aGlzLnBsYXllclBva2Vtb24uY3VycmVudEhwO1xyXG4gIH1cclxuXHJcbiAgYXN5bmMgcHJlbG9hZCgpIHtcclxuICAgIC8vIExvYWQgUG9rw6ltb24gc3ByaXRlcyBpZiBub3QgYWxyZWFkeSBsb2FkZWRcclxuICAgIGlmICghdGhpcy50ZXh0dXJlcy5leGlzdHMoYHdpbGQtJHt0aGlzLndpbGRQb2tlbW9uLnBva2VJZH1gKSkge1xyXG4gICAgICBhd2FpdCBuZXcgUHJvbWlzZTx2b2lkPigocmVzb2x2ZSkgPT4ge1xyXG4gICAgICAgIHRoaXMubG9hZC5vbmNlKFBoYXNlci5Mb2FkZXIuRXZlbnRzLkNPTVBMRVRFLCAoKSA9PiByZXNvbHZlKCkpO1xyXG4gICAgICAgIHRoaXMubG9hZC5pbWFnZShgd2lsZC0ke3RoaXMud2lsZFBva2Vtb24ucG9rZUlkfWAsIHRoaXMud2lsZFBva2Vtb24uc3ByaXRlVXJsKTtcclxuICAgICAgICB0aGlzLmxvYWQuc3RhcnQoKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmICghdGhpcy50ZXh0dXJlcy5leGlzdHMoYHBsYXllci0ke3RoaXMucGxheWVyUG9rZW1vbi5wb2tlSWR9YCkpIHtcclxuICAgICAgYXdhaXQgbmV3IFByb21pc2U8dm9pZD4oKHJlc29sdmUpID0+IHtcclxuICAgICAgICB0aGlzLmxvYWQub25jZShQaGFzZXIuTG9hZGVyLkV2ZW50cy5DT01QTEVURSwgKCkgPT4gcmVzb2x2ZSgpKTtcclxuICAgICAgICB0aGlzLmxvYWQuaW1hZ2UoYHBsYXllci0ke3RoaXMucGxheWVyUG9rZW1vbi5wb2tlSWR9YCwgdGhpcy5wbGF5ZXJQb2tlbW9uLnNwcml0ZVVybCk7XHJcbiAgICAgICAgdGhpcy5sb2FkLnN0YXJ0KCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY3JlYXRlKCkge1xyXG4gICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSB0aGlzLnNjYWxlO1xyXG5cclxuICAgIC8vIEJhY2tncm91bmRcclxuICAgIHRoaXMuYWRkLnJlY3RhbmdsZSh3aWR0aCAvIDIsIGhlaWdodCAvIDIsIHdpZHRoLCBoZWlnaHQsIDB4ODdDRUVCKS5zZXRPcmlnaW4oMC41KTtcclxuXHJcbiAgICAvLyBXaWxkIFBva8OpbW9uIChlbmVteSwgdG9wIHJpZ2h0KVxyXG4gICAgdGhpcy53aWxkU3ByaXRlID0gdGhpcy5hZGQuaW1hZ2Uod2lkdGggKiAwLjc1LCBoZWlnaHQgKiAwLjMsIGB3aWxkLSR7dGhpcy53aWxkUG9rZW1vbi5wb2tlSWR9YClcclxuICAgICAgLnNldFNjYWxlKDIpXHJcbiAgICAgIC5zZXRGbGlwWChmYWxzZSk7XHJcblxyXG4gICAgLy8gUGxheWVyIFBva8OpbW9uIChib3R0b20gbGVmdCwgYmFjayBzcHJpdGUpXHJcbiAgICB0aGlzLnBsYXllclNwcml0ZSA9IHRoaXMuYWRkLmltYWdlKHdpZHRoICogMC4yNSwgaGVpZ2h0ICogMC42NSwgYHBsYXllci0ke3RoaXMucGxheWVyUG9rZW1vbi5wb2tlSWR9YClcclxuICAgICAgLnNldFNjYWxlKDIpXHJcbiAgICAgIC5zZXRGbGlwWCh0cnVlKTtcclxuXHJcbiAgICB0aGlzLmNyZWF0ZVVJKCk7XHJcbiAgICB0aGlzLnVwZGF0ZUJhdHRsZVRleHQoYEEgd2lsZCAke3RoaXMuY2FwaXRhbGl6ZSh0aGlzLndpbGRQb2tlbW9uLm5hbWUpfSBhcHBlYXJlZCFgKTtcclxuICAgIFxyXG4gICAgLy8gQXV0by1oaWRlIHRoZSBhcHBlYXJhbmNlIG1lc3NhZ2UgYWZ0ZXIgMyBzZWNvbmRzXHJcbiAgICB0aGlzLnRpbWUuZGVsYXllZENhbGwoMzAwMCwgKCkgPT4ge1xyXG4gICAgICB0aGlzLnVwZGF0ZUJhdHRsZVRleHQoJ1doYXQgd2lsbCB5b3UgZG8/Jyk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlVUkoKSB7XHJcbiAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHRoaXMuc2NhbGU7XHJcblxyXG4gICAgLy8gQmF0dGxlIFVJIENvbnRhaW5lclxyXG4gICAgdGhpcy5iYXR0bGVVSSA9IHRoaXMuYWRkLmNvbnRhaW5lcigwLCAwKTtcclxuXHJcbiAgICAvLyBXaWxkIFBva8OpbW9uIEhQIEJhciAodG9wIGxlZnQpXHJcbiAgICBjb25zdCB3aWxkSHBCZyA9IHRoaXMuYWRkLnJlY3RhbmdsZSgyMCwgMjAsIDIwMCwgMjAsIDB4MzMzMzMzKS5zZXRPcmlnaW4oMCk7XHJcbiAgICB0aGlzLndpbGRIcEJhciA9IHRoaXMuYWRkLnJlY3RhbmdsZSgyMiwgMjIsIDE5NiwgMTYsIDB4MDBmZjAwKS5zZXRPcmlnaW4oMCk7XHJcbiAgICB0aGlzLndpbGRIcFRleHQgPSB0aGlzLmFkZC50ZXh0KDIwLCA0NSwgYCR7dGhpcy5jYXBpdGFsaXplKHRoaXMud2lsZFBva2Vtb24ubmFtZSl9IEhQOiAke3RoaXMud2lsZEhwfS8ke3RoaXMud2lsZE1heEhwfWAsIHtcclxuICAgICAgZm9udFNpemU6ICcxNHB4JyxcclxuICAgICAgY29sb3I6ICcjMDAwJ1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gUGxheWVyIFBva8OpbW9uIEhQIEJhciAoYm90dG9tIHJpZ2h0KVxyXG4gICAgY29uc3QgcGxheWVySHBCZyA9IHRoaXMuYWRkLnJlY3RhbmdsZSh3aWR0aCAtIDIyMCwgaGVpZ2h0IC0gODAsIDIwMCwgMjAsIDB4MzMzMzMzKS5zZXRPcmlnaW4oMCk7XHJcbiAgICB0aGlzLnBsYXllckhwQmFyID0gdGhpcy5hZGQucmVjdGFuZ2xlKHdpZHRoIC0gMjE4LCBoZWlnaHQgLSA3OCwgMTk2LCAxNiwgMHgwMGZmMDApLnNldE9yaWdpbigwKTtcclxuICAgIHRoaXMucGxheWVySHBUZXh0ID0gdGhpcy5hZGQudGV4dCh3aWR0aCAtIDIyMCwgaGVpZ2h0IC0gNTUsIGAke3RoaXMuY2FwaXRhbGl6ZSh0aGlzLnBsYXllclBva2Vtb24ubmFtZSl9IEx2LiR7dGhpcy5wbGF5ZXJQb2tlbW9uLmxldmVsfSBIUDogJHt0aGlzLnBsYXllckhwfS8ke3RoaXMucGxheWVyTWF4SHB9YCwge1xyXG4gICAgICBmb250U2l6ZTogJzE0cHgnLFxyXG4gICAgICBjb2xvcjogJyMwMDAnXHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBCYXR0bGUgdGV4dCBhcmVhXHJcbiAgICBjb25zdCB0ZXh0QmcgPSB0aGlzLmFkZC5yZWN0YW5nbGUoMjAsIGhlaWdodCAtIDE1MCwgd2lkdGggLSA0MCwgMTAwLCAweGZmZmZmZiwgMC45KS5zZXRPcmlnaW4oMCk7XHJcbiAgICB0aGlzLmJhdHRsZVRleHQgPSB0aGlzLmFkZC50ZXh0KDMwLCBoZWlnaHQgLSAxNDAsICcnLCB7XHJcbiAgICAgIGZvbnRTaXplOiAnMTZweCcsXHJcbiAgICAgIGNvbG9yOiAnIzAwMCcsXHJcbiAgICAgIHdvcmRXcmFwOiB7IHdpZHRoOiB3aWR0aCAtIDYwIH1cclxuICAgIH0pO1xyXG5cclxuICAgIC8vIEFjdGlvbiBidXR0b25zXHJcbiAgICB0aGlzLmNyZWF0ZUFjdGlvbkJ1dHRvbnMoKTtcclxuXHJcbiAgICB0aGlzLmJhdHRsZVVJLmFkZChbd2lsZEhwQmcsIHRoaXMud2lsZEhwQmFyLCB0aGlzLndpbGRIcFRleHQsIHBsYXllckhwQmcsIHRoaXMucGxheWVySHBCYXIsIHRoaXMucGxheWVySHBUZXh0LCB0ZXh0QmcsIHRoaXMuYmF0dGxlVGV4dF0pO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjcmVhdGVBY3Rpb25CdXR0b25zKCkge1xyXG4gICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSB0aGlzLnNjYWxlO1xyXG4gICAgXHJcbiAgICB0aGlzLmFjdGlvbkJ1dHRvbnMgPSB0aGlzLmFkZC5jb250YWluZXIoMCwgMCk7XHJcbiAgICBcclxuICAgIGNvbnN0IGJ1dHRvbkRhdGEgPSBbXHJcbiAgICAgIHsgdGV4dDogJ0ZJR0hUJywgeDogd2lkdGggLSAyMDAsIHk6IGhlaWdodCAtIDQwLCBhY3Rpb246ICgpID0+IHRoaXMuc2hvd01vdmVTZWxlY3Rpb24oKSB9LFxyXG4gICAgICB7IHRleHQ6ICdCQUcnLCB4OiB3aWR0aCAtIDE1MCwgeTogaGVpZ2h0IC0gNDAsIGFjdGlvbjogKCkgPT4gdGhpcy5vcGVuQmFnKCkgfSxcclxuICAgICAgeyB0ZXh0OiAnQ0FUQ0gnLCB4OiB3aWR0aCAtIDEwMCwgeTogaGVpZ2h0IC0gNDAsIGFjdGlvbjogKCkgPT4gdGhpcy5hdHRlbXB0Q2F0Y2goKSB9LFxyXG4gICAgICB7IHRleHQ6ICdSVU4nLCB4OiB3aWR0aCAtIDUwLCB5OiBoZWlnaHQgLSA0MCwgYWN0aW9uOiAoKSA9PiB0aGlzLnJ1bkF3YXkoKSB9XHJcbiAgICBdO1xyXG5cclxuICAgIGJ1dHRvbkRhdGEuZm9yRWFjaChidG4gPT4ge1xyXG4gICAgICBjb25zdCBidXR0b24gPSB0aGlzLmFkZC50ZXh0KGJ0bi54LCBidG4ueSwgYnRuLnRleHQsIHtcclxuICAgICAgICBmb250U2l6ZTogJzE0cHgnLFxyXG4gICAgICAgIGNvbG9yOiAnI2ZmZicsXHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzMzMycsXHJcbiAgICAgICAgcGFkZGluZzogeyB4OiA4LCB5OiA0IH1cclxuICAgICAgfSkuc2V0SW50ZXJhY3RpdmUoeyB1c2VIYW5kQ3Vyc29yOiB0cnVlIH0pXHJcbiAgICAgICAgLm9uKCdwb2ludGVyZG93bicsIGJ0bi5hY3Rpb24pO1xyXG4gICAgICBcclxuICAgICAgdGhpcy5hY3Rpb25CdXR0b25zPy5hZGQoYnV0dG9uKTtcclxuICAgIH0pO1xyXG5cclxuICAgIGlmICh0aGlzLmFjdGlvbkJ1dHRvbnMpIHRoaXMuYmF0dGxlVUk/LmFkZCh0aGlzLmFjdGlvbkJ1dHRvbnMpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzaG93TW92ZVNlbGVjdGlvbigpIHtcclxuICAgIC8vIEhpZGUgbWFpbiBhY3Rpb24gYnV0dG9uc1xyXG4gICAgaWYgKHRoaXMuYWN0aW9uQnV0dG9ucykgdGhpcy5hY3Rpb25CdXR0b25zLnNldFZpc2libGUoZmFsc2UpO1xyXG5cclxuICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gdGhpcy5zY2FsZTtcclxuICAgIGNvbnN0IG1vdmVzID0gdGhpcy5nZXRQbGF5ZXJNb3ZlcygpO1xyXG5cclxuICAgIC8vIENyZWF0ZSBtb3ZlIHNlbGVjdGlvbiBjb250YWluZXJcclxuICAgIGNvbnN0IG1vdmVDb250YWluZXIgPSB0aGlzLmFkZC5jb250YWluZXIoMCwgMCk7XHJcblxyXG4gICAgLy8gQmFja2dyb3VuZCBmb3IgbW92ZSBzZWxlY3Rpb25cclxuICAgIGNvbnN0IG1vdmVCZyA9IHRoaXMuYWRkLnJlY3RhbmdsZSh3aWR0aCAtIDMyMCwgaGVpZ2h0IC0gMTIwLCAzMDAsIDEwMCwgMHgyMjIyMjIsIDAuOTUpLnNldE9yaWdpbigwKTtcclxuICAgIG1vdmVDb250YWluZXIuYWRkKG1vdmVCZyk7XHJcblxyXG4gICAgLy8gRGlzcGxheSB1cCB0byA0IG1vdmVzIGluIGEgMngyIGdyaWRcclxuICAgIG1vdmVzLnNsaWNlKDAsIDQpLmZvckVhY2goKG1vdmUsIGluZGV4KSA9PiB7XHJcbiAgICAgIGNvbnN0IGNvbCA9IGluZGV4ICUgMjtcclxuICAgICAgY29uc3Qgcm93ID0gTWF0aC5mbG9vcihpbmRleCAvIDIpO1xyXG4gICAgICBjb25zdCB4ID0gd2lkdGggLSAzMTAgKyBjb2wgKiAxNTA7XHJcbiAgICAgIGNvbnN0IHkgPSBoZWlnaHQgLSAxMTAgKyByb3cgKiA0NTtcclxuXHJcbiAgICAgIGNvbnN0IG1vdmVCdXR0b24gPSB0aGlzLmFkZC50ZXh0KHgsIHksIG1vdmUubmFtZS50b1VwcGVyQ2FzZSgpLCB7XHJcbiAgICAgICAgZm9udFNpemU6ICcxM3B4JyxcclxuICAgICAgICBjb2xvcjogJyNmZmYnLFxyXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogdGhpcy5nZXRNb3ZlVHlwZUNvbG9yKG1vdmUudHlwZSksXHJcbiAgICAgICAgcGFkZGluZzogeyB4OiAxMCwgeTogNiB9XHJcbiAgICAgIH0pLnNldEludGVyYWN0aXZlKHsgdXNlSGFuZEN1cnNvcjogdHJ1ZSB9KVxyXG4gICAgICAgIC5vbigncG9pbnRlcmRvd24nLCAoKSA9PiB7XHJcbiAgICAgICAgICBtb3ZlQ29udGFpbmVyLmRlc3Ryb3koKTtcclxuICAgICAgICAgIGlmICh0aGlzLmFjdGlvbkJ1dHRvbnMpIHRoaXMuYWN0aW9uQnV0dG9ucy5zZXRWaXNpYmxlKHRydWUpO1xyXG4gICAgICAgICAgdGhpcy51c2VNb3ZlKG1vdmUpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgbW92ZUNvbnRhaW5lci5hZGQobW92ZUJ1dHRvbik7XHJcbiAgICB9KTtcclxuXHJcbiAgICAvLyBCYWNrIGJ1dHRvblxyXG4gICAgY29uc3QgYmFja0J1dHRvbiA9IHRoaXMuYWRkLnRleHQod2lkdGggLSAyNTAsIGhlaWdodCAtIDIwLCAnQkFDSycsIHtcclxuICAgICAgZm9udFNpemU6ICcxMnB4JyxcclxuICAgICAgY29sb3I6ICcjZmZmJyxcclxuICAgICAgYmFja2dyb3VuZENvbG9yOiAnIzY2NicsXHJcbiAgICAgIHBhZGRpbmc6IHsgeDogOCwgeTogNCB9XHJcbiAgICB9KS5zZXRJbnRlcmFjdGl2ZSh7IHVzZUhhbmRDdXJzb3I6IHRydWUgfSlcclxuICAgICAgLm9uKCdwb2ludGVyZG93bicsICgpID0+IHtcclxuICAgICAgICBtb3ZlQ29udGFpbmVyLmRlc3Ryb3koKTtcclxuICAgICAgICBpZiAodGhpcy5hY3Rpb25CdXR0b25zKSB0aGlzLmFjdGlvbkJ1dHRvbnMuc2V0VmlzaWJsZSh0cnVlKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgbW92ZUNvbnRhaW5lci5hZGQoYmFja0J1dHRvbik7XHJcbiAgICB0aGlzLmJhdHRsZVVJPy5hZGQobW92ZUNvbnRhaW5lcik7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldFBsYXllck1vdmVzKCkge1xyXG4gICAgLy8gR2V0IG1vdmVzIGZyb20gUG9rZW1vbiBkYXRhXHJcbiAgICBjb25zdCBtb3ZlcyA9IHRoaXMucGxheWVyUG9rZW1vbi5kYXRhPy5tb3ZlcyB8fCBbXTtcclxuICAgIFxyXG4gICAgLy8gRmlsdGVyIHRvIGdldCBsZWFybmVkIG1vdmVzIChzaW1wbGlmaWVkIC0ganVzdCB0YWtlIGZpcnN0IDQpXHJcbiAgICByZXR1cm4gbW92ZXMuc2xpY2UoMCwgNCkubWFwKChtOiBhbnkpID0+ICh7XHJcbiAgICAgIG5hbWU6IG0ubW92ZS5uYW1lLnJlcGxhY2UoLy0vZywgJyAnKSxcclxuICAgICAgdXJsOiBtLm1vdmUudXJsLFxyXG4gICAgICB0eXBlOiAnbm9ybWFsJyAvLyBEZWZhdWx0IHR5cGUsIHdvdWxkIG5lZWQgdG8gZmV0Y2ggbW92ZSBkZXRhaWxzIGZvciBhY3R1YWwgdHlwZVxyXG4gICAgfSkpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRNb3ZlVHlwZUNvbG9yKHR5cGU6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBjb2xvcnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XHJcbiAgICAgIG5vcm1hbDogJyNBOEE4NzgnLFxyXG4gICAgICBmaXJlOiAnI0YwODAzMCcsXHJcbiAgICAgIHdhdGVyOiAnIzY4OTBGMCcsXHJcbiAgICAgIGdyYXNzOiAnIzc4Qzg1MCcsXHJcbiAgICAgIGVsZWN0cmljOiAnI0Y4RDAzMCcsXHJcbiAgICAgIGljZTogJyM5OEQ4RDgnLFxyXG4gICAgICBmaWdodGluZzogJyNDMDMwMjgnLFxyXG4gICAgICBwb2lzb246ICcjQTA0MEEwJyxcclxuICAgICAgZ3JvdW5kOiAnI0UwQzA2OCcsXHJcbiAgICAgIGZseWluZzogJyNBODkwRjAnLFxyXG4gICAgICBwc3ljaGljOiAnI0Y4NTg4OCcsXHJcbiAgICAgIGJ1ZzogJyNBOEI4MjAnLFxyXG4gICAgICByb2NrOiAnI0I4QTAzOCcsXHJcbiAgICAgIGdob3N0OiAnIzcwNTg5OCcsXHJcbiAgICAgIGRyYWdvbjogJyM3MDM4RjgnLFxyXG4gICAgICBkYXJrOiAnIzcwNTg0OCcsXHJcbiAgICAgIHN0ZWVsOiAnI0I4QjhEMCcsXHJcbiAgICAgIGZhaXJ5OiAnI0VFOTlBQydcclxuICAgIH07XHJcbiAgICByZXR1cm4gY29sb3JzW3R5cGVdIHx8IGNvbG9ycy5ub3JtYWw7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHVzZU1vdmUobW92ZTogYW55KSB7XHJcbiAgICBjb25zdCBwbGF5ZXJBdHRhY2sgPSB0aGlzLmdldFN0YXRWYWx1ZSh0aGlzLnBsYXllclBva2Vtb24uZGF0YSwgJ2F0dGFjaycpO1xyXG4gICAgY29uc3Qgd2lsZERlZmVuc2UgPSB0aGlzLmdldFN0YXRWYWx1ZSh0aGlzLndpbGRQb2tlbW9uLmRhdGEsICdkZWZlbnNlJyk7XHJcbiAgICBcclxuICAgIGNvbnN0IGJhc2VEYW1hZ2UgPSBNYXRoLm1heCgxLCBwbGF5ZXJBdHRhY2sgLSB3aWxkRGVmZW5zZSk7XHJcbiAgICBjb25zdCBkYW1hZ2UgPSBNYXRoLmZsb29yKGJhc2VEYW1hZ2UgKiAoMC44ICsgTWF0aC5yYW5kb20oKSAqIDAuNCkpOyAvLyAwLjgtMS4yIG11bHRpcGxpZXJcclxuICAgIFxyXG4gICAgdGhpcy53aWxkSHAgPSBNYXRoLm1heCgwLCB0aGlzLndpbGRIcCAtIGRhbWFnZSk7XHJcbiAgICB0aGlzLnVwZGF0ZUJhdHRsZVRleHQoYCR7dGhpcy5jYXBpdGFsaXplKHRoaXMucGxheWVyUG9rZW1vbi5uYW1lKX0gdXNlZCAke21vdmUubmFtZX0hIERlYWx0ICR7ZGFtYWdlfSBkYW1hZ2UhYCk7XHJcbiAgICBcclxuICAgIHRoaXMudXBkYXRlSHBCYXJzKCk7XHJcbiAgICBcclxuICAgIGlmICh0aGlzLndpbGRIcCA8PSAwKSB7XHJcbiAgICAgIHRoaXMud2lsZERlZmVhdGVkKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnRpbWUuZGVsYXllZENhbGwoMTUwMCwgKCkgPT4gdGhpcy53aWxkQXR0YWNrKCkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBwbGF5ZXJBdHRhY2soKSB7XHJcbiAgICBjb25zdCBwbGF5ZXJBdHRhY2sgPSB0aGlzLmdldFN0YXRWYWx1ZSh0aGlzLnBsYXllclBva2Vtb24uZGF0YSwgJ2F0dGFjaycpO1xyXG4gICAgY29uc3Qgd2lsZERlZmVuc2UgPSB0aGlzLmdldFN0YXRWYWx1ZSh0aGlzLndpbGRQb2tlbW9uLmRhdGEsICdkZWZlbnNlJyk7XHJcbiAgICBcclxuICAgIGNvbnN0IGJhc2VEYW1hZ2UgPSBNYXRoLm1heCgxLCBwbGF5ZXJBdHRhY2sgLSB3aWxkRGVmZW5zZSk7XHJcbiAgICBjb25zdCBkYW1hZ2UgPSBNYXRoLmZsb29yKGJhc2VEYW1hZ2UgKiAoMC44ICsgTWF0aC5yYW5kb20oKSAqIDAuNCkpOyAvLyAwLjgtMS4yIG11bHRpcGxpZXJcclxuICAgIFxyXG4gICAgdGhpcy53aWxkSHAgPSBNYXRoLm1heCgwLCB0aGlzLndpbGRIcCAtIGRhbWFnZSk7XHJcbiAgICB0aGlzLnVwZGF0ZUJhdHRsZVRleHQoYCR7dGhpcy5jYXBpdGFsaXplKHRoaXMucGxheWVyUG9rZW1vbi5uYW1lKX0gYXR0YWNrcyEgRGVhbHQgJHtkYW1hZ2V9IGRhbWFnZSFgKTtcclxuICAgIFxyXG4gICAgdGhpcy51cGRhdGVIcEJhcnMoKTtcclxuICAgIFxyXG4gICAgaWYgKHRoaXMud2lsZEhwIDw9IDApIHtcclxuICAgICAgdGhpcy53aWxkRGVmZWF0ZWQoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMudGltZS5kZWxheWVkQ2FsbCgxNTAwLCAoKSA9PiB0aGlzLndpbGRBdHRhY2soKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHdpbGRBdHRhY2soKSB7XHJcbiAgICBjb25zdCB3aWxkQXR0YWNrID0gdGhpcy5nZXRTdGF0VmFsdWUodGhpcy53aWxkUG9rZW1vbi5kYXRhLCAnYXR0YWNrJyk7XHJcbiAgICBjb25zdCBwbGF5ZXJEZWZlbnNlID0gdGhpcy5nZXRTdGF0VmFsdWUodGhpcy5wbGF5ZXJQb2tlbW9uLmRhdGEsICdkZWZlbnNlJyk7XHJcbiAgICBcclxuICAgIGNvbnN0IGJhc2VEYW1hZ2UgPSBNYXRoLm1heCgxLCB3aWxkQXR0YWNrIC0gcGxheWVyRGVmZW5zZSk7XHJcbiAgICBjb25zdCBkYW1hZ2UgPSBNYXRoLmZsb29yKGJhc2VEYW1hZ2UgKiAoMC44ICsgTWF0aC5yYW5kb20oKSAqIDAuNCkpO1xyXG4gICAgXHJcbiAgICB0aGlzLnBsYXllckhwID0gTWF0aC5tYXgoMCwgdGhpcy5wbGF5ZXJIcCAtIGRhbWFnZSk7XHJcbiAgICB0aGlzLnVwZGF0ZUJhdHRsZVRleHQoYFdpbGQgJHt0aGlzLmNhcGl0YWxpemUodGhpcy53aWxkUG9rZW1vbi5uYW1lKX0gYXR0YWNrcyEgRGVhbHQgJHtkYW1hZ2V9IGRhbWFnZSFgKTtcclxuICAgIFxyXG4gICAgdGhpcy51cGRhdGVIcEJhcnMoKTtcclxuICAgIFxyXG4gICAgaWYgKHRoaXMucGxheWVySHAgPD0gMCkge1xyXG4gICAgICB0aGlzLnBsYXllckRlZmVhdGVkKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGF0dGVtcHRDYXRjaCgpIHtcclxuICAgIGNvbnN0IGNhdGNoUmF0ZSA9IHRoaXMud2lsZEhwIDwgKHRoaXMud2lsZE1heEhwICogMC4yKSA/IDAuOCA6IDAuMzsgLy8gSGlnaGVyIHJhdGUgaWYgSFAgPCAyMCVcclxuICAgIFxyXG4gICAgaWYgKE1hdGgucmFuZG9tKCkgPCBjYXRjaFJhdGUpIHtcclxuICAgICAgdGhpcy51cGRhdGVCYXR0bGVUZXh0KGBHb3RjaGEhICR7dGhpcy5jYXBpdGFsaXplKHRoaXMud2lsZFBva2Vtb24ubmFtZSl9IHdhcyBjYXVnaHQhYCk7XHJcbiAgICAgIHRoaXMudGltZS5kZWxheWVkQ2FsbCgyMDAwLCAoKSA9PiB0aGlzLmVuZEJhdHRsZSh0cnVlKSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnVwZGF0ZUJhdHRsZVRleHQoYCR7dGhpcy5jYXBpdGFsaXplKHRoaXMud2lsZFBva2Vtb24ubmFtZSl9IGJyb2tlIGZyZWUhYCk7XHJcbiAgICAgIHRoaXMudGltZS5kZWxheWVkQ2FsbCgxNTAwLCAoKSA9PiB0aGlzLndpbGRBdHRhY2soKSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG9wZW5CYWcoKSB7XHJcbiAgICB0aGlzLnVwZGF0ZUJhdHRsZVRleHQoXCJZb3UgcnVtbWFnZSB0aHJvdWdoIHlvdXIgYmFnLi4uXCIpO1xyXG4gICAgLy8gVE9ETzogSW1wbGVtZW50IGJhZy9pdGVtIHVzYWdlXHJcbiAgICB0aGlzLnRpbWUuZGVsYXllZENhbGwoMTAwMCwgKCkgPT4gdGhpcy53aWxkQXR0YWNrKCkpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBydW5Bd2F5KCkge1xyXG4gICAgdGhpcy51cGRhdGVCYXR0bGVUZXh0KFwiWW91IHJhbiBhd2F5IHNhZmVseSFcIik7XHJcbiAgICB0aGlzLnRpbWUuZGVsYXllZENhbGwoMTUwMCwgKCkgPT4gdGhpcy5lbmRCYXR0bGUoZmFsc2UpKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgd2lsZERlZmVhdGVkKCkge1xyXG4gICAgY29uc3QgZXhwR2FpbmVkID0gTWF0aC5mbG9vcih0aGlzLmdldFN0YXRWYWx1ZSh0aGlzLndpbGRQb2tlbW9uLmRhdGEsICdhdHRhY2snKSAqIDEuNSk7XHJcbiAgICB0aGlzLnVwZGF0ZUJhdHRsZVRleHQoYFdpbGQgJHt0aGlzLmNhcGl0YWxpemUodGhpcy53aWxkUG9rZW1vbi5uYW1lKX0gZmFpbnRlZCEgJHt0aGlzLmNhcGl0YWxpemUodGhpcy5wbGF5ZXJQb2tlbW9uLm5hbWUpfSBnYWluZWQgJHtleHBHYWluZWR9IEVYUCFgKTtcclxuICAgIHRoaXMudGltZS5kZWxheWVkQ2FsbCgzMDAwLCAoKSA9PiB0aGlzLmVuZEJhdHRsZSh0cnVlKSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHBsYXllckRlZmVhdGVkKCkge1xyXG4gICAgdGhpcy51cGRhdGVCYXR0bGVUZXh0KGAke3RoaXMuY2FwaXRhbGl6ZSh0aGlzLnBsYXllclBva2Vtb24ubmFtZSl9IGZhaW50ZWQhIFlvdSBsb3N0IHRoZSBiYXR0bGUhYCk7XHJcbiAgICB0aGlzLnRpbWUuZGVsYXllZENhbGwoMzAwMCwgKCkgPT4gdGhpcy5lbmRCYXR0bGUoZmFsc2UpKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZW5kQmF0dGxlKHZpY3Rvcnk6IGJvb2xlYW4pIHtcclxuICAgIC8vIFJldHVybiB0byBHYW1lU2NlbmVcclxuICAgIHRoaXMuc2NlbmUuc3RhcnQoXCJHYW1lU2NlbmVcIik7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHVwZGF0ZUhwQmFycygpIHtcclxuICAgIGlmICh0aGlzLndpbGRIcEJhciAmJiB0aGlzLndpbGRIcFRleHQpIHtcclxuICAgICAgY29uc3Qgd2lsZEhwUGVyY2VudCA9IHRoaXMud2lsZEhwIC8gdGhpcy53aWxkTWF4SHA7XHJcbiAgICAgIHRoaXMud2lsZEhwQmFyLndpZHRoID0gMTk2ICogd2lsZEhwUGVyY2VudDtcclxuICAgICAgdGhpcy53aWxkSHBCYXIuZmlsbENvbG9yID0gd2lsZEhwUGVyY2VudCA+IDAuNSA/IDB4MDBmZjAwIDogd2lsZEhwUGVyY2VudCA+IDAuMiA/IDB4ZmZmZjAwIDogMHhmZjAwMDA7XHJcbiAgICAgIHRoaXMud2lsZEhwVGV4dC5zZXRUZXh0KGAke3RoaXMuY2FwaXRhbGl6ZSh0aGlzLndpbGRQb2tlbW9uLm5hbWUpfSBIUDogJHt0aGlzLndpbGRIcH0vJHt0aGlzLndpbGRNYXhIcH1gKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKHRoaXMucGxheWVySHBCYXIgJiYgdGhpcy5wbGF5ZXJIcFRleHQpIHtcclxuICAgICAgY29uc3QgcGxheWVySHBQZXJjZW50ID0gdGhpcy5wbGF5ZXJIcCAvIHRoaXMucGxheWVyTWF4SHA7XHJcbiAgICAgIHRoaXMucGxheWVySHBCYXIud2lkdGggPSAxOTYgKiBwbGF5ZXJIcFBlcmNlbnQ7XHJcbiAgICAgIHRoaXMucGxheWVySHBCYXIuZmlsbENvbG9yID0gcGxheWVySHBQZXJjZW50ID4gMC41ID8gMHgwMGZmMDAgOiBwbGF5ZXJIcFBlcmNlbnQgPiAwLjIgPyAweGZmZmYwMCA6IDB4ZmYwMDAwO1xyXG4gICAgICB0aGlzLnBsYXllckhwVGV4dC5zZXRUZXh0KGAke3RoaXMuY2FwaXRhbGl6ZSh0aGlzLnBsYXllclBva2Vtb24ubmFtZSl9IEx2LiR7dGhpcy5wbGF5ZXJQb2tlbW9uLmxldmVsfSBIUDogJHt0aGlzLnBsYXllckhwfS8ke3RoaXMucGxheWVyTWF4SHB9YCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHVwZGF0ZUJhdHRsZVRleHQodGV4dDogc3RyaW5nKSB7XHJcbiAgICBpZiAodGhpcy5iYXR0bGVUZXh0KSB7XHJcbiAgICAgIHRoaXMuYmF0dGxlVGV4dC5zZXRUZXh0KHRleHQpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRTdGF0VmFsdWUocG9rZW1vbkRhdGE6IGFueSwgc3RhdE5hbWU6IHN0cmluZyk6IG51bWJlciB7XHJcbiAgICBjb25zdCBzdGF0ID0gcG9rZW1vbkRhdGE/LnN0YXRzPy5maW5kKChzOiBhbnkpID0+IHMuc3RhdC5uYW1lID09PSBzdGF0TmFtZSk7XHJcbiAgICByZXR1cm4gc3RhdD8uYmFzZV9zdGF0IHx8IDUwO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjYXBpdGFsaXplKHN0cjogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBzdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHIuc2xpY2UoMSk7XHJcbiAgfVxyXG59Il0sIm5hbWVzIjpbIlBoYXNlciIsIkJhdHRsZVNjZW5lIiwiU2NlbmUiLCJ3aWxkSHAiLCJ3aWxkTWF4SHAiLCJwbGF5ZXJIcCIsInBsYXllck1heEhwIiwiaW5pdCIsImRhdGEiLCJ3aWxkUG9rZW1vbiIsInBsYXllclBva2Vtb24iLCJ3aWxkSHBTdGF0Iiwic3RhdHMiLCJmaW5kIiwicyIsInN0YXQiLCJuYW1lIiwiYmFzZV9zdGF0IiwiTWF0aCIsImZsb29yIiwibWF4SHAiLCJjdXJyZW50SHAiLCJwcmVsb2FkIiwidGV4dHVyZXMiLCJleGlzdHMiLCJwb2tlSWQiLCJQcm9taXNlIiwicmVzb2x2ZSIsImxvYWQiLCJvbmNlIiwiTG9hZGVyIiwiRXZlbnRzIiwiQ09NUExFVEUiLCJpbWFnZSIsInNwcml0ZVVybCIsInN0YXJ0IiwiY3JlYXRlIiwid2lkdGgiLCJoZWlnaHQiLCJzY2FsZSIsImFkZCIsInJlY3RhbmdsZSIsInNldE9yaWdpbiIsIndpbGRTcHJpdGUiLCJzZXRTY2FsZSIsInNldEZsaXBYIiwicGxheWVyU3ByaXRlIiwiY3JlYXRlVUkiLCJ1cGRhdGVCYXR0bGVUZXh0IiwiY2FwaXRhbGl6ZSIsInRpbWUiLCJkZWxheWVkQ2FsbCIsImJhdHRsZVVJIiwiY29udGFpbmVyIiwid2lsZEhwQmciLCJ3aWxkSHBCYXIiLCJ3aWxkSHBUZXh0IiwidGV4dCIsImZvbnRTaXplIiwiY29sb3IiLCJwbGF5ZXJIcEJnIiwicGxheWVySHBCYXIiLCJwbGF5ZXJIcFRleHQiLCJsZXZlbCIsInRleHRCZyIsImJhdHRsZVRleHQiLCJ3b3JkV3JhcCIsImNyZWF0ZUFjdGlvbkJ1dHRvbnMiLCJhY3Rpb25CdXR0b25zIiwiYnV0dG9uRGF0YSIsIngiLCJ5IiwiYWN0aW9uIiwic2hvd01vdmVTZWxlY3Rpb24iLCJvcGVuQmFnIiwiYXR0ZW1wdENhdGNoIiwicnVuQXdheSIsImZvckVhY2giLCJidG4iLCJidXR0b24iLCJiYWNrZ3JvdW5kQ29sb3IiLCJwYWRkaW5nIiwic2V0SW50ZXJhY3RpdmUiLCJ1c2VIYW5kQ3Vyc29yIiwib24iLCJzZXRWaXNpYmxlIiwibW92ZXMiLCJnZXRQbGF5ZXJNb3ZlcyIsIm1vdmVDb250YWluZXIiLCJtb3ZlQmciLCJzbGljZSIsIm1vdmUiLCJpbmRleCIsImNvbCIsInJvdyIsIm1vdmVCdXR0b24iLCJ0b1VwcGVyQ2FzZSIsImdldE1vdmVUeXBlQ29sb3IiLCJ0eXBlIiwiZGVzdHJveSIsInVzZU1vdmUiLCJiYWNrQnV0dG9uIiwibWFwIiwibSIsInJlcGxhY2UiLCJ1cmwiLCJjb2xvcnMiLCJub3JtYWwiLCJmaXJlIiwid2F0ZXIiLCJncmFzcyIsImVsZWN0cmljIiwiaWNlIiwiZmlnaHRpbmciLCJwb2lzb24iLCJncm91bmQiLCJmbHlpbmciLCJwc3ljaGljIiwiYnVnIiwicm9jayIsImdob3N0IiwiZHJhZ29uIiwiZGFyayIsInN0ZWVsIiwiZmFpcnkiLCJwbGF5ZXJBdHRhY2siLCJnZXRTdGF0VmFsdWUiLCJ3aWxkRGVmZW5zZSIsImJhc2VEYW1hZ2UiLCJtYXgiLCJkYW1hZ2UiLCJyYW5kb20iLCJ1cGRhdGVIcEJhcnMiLCJ3aWxkRGVmZWF0ZWQiLCJ3aWxkQXR0YWNrIiwicGxheWVyRGVmZW5zZSIsInBsYXllckRlZmVhdGVkIiwiY2F0Y2hSYXRlIiwiZW5kQmF0dGxlIiwiZXhwR2FpbmVkIiwidmljdG9yeSIsInNjZW5lIiwid2lsZEhwUGVyY2VudCIsImZpbGxDb2xvciIsInNldFRleHQiLCJwbGF5ZXJIcFBlcmNlbnQiLCJwb2tlbW9uRGF0YSIsInN0YXROYW1lIiwic3RyIiwiY2hhckF0Il0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-node)/./lib/phaser/BattleScene.ts\n");

/***/ }),

/***/ "(pages-dir-node)/./lib/phaser/GameScene.ts":
/*!*********************************!*\
  !*** ./lib/phaser/GameScene.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GameScene: () => (/* binding */ GameScene)\n/* harmony export */ });\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! phaser */ \"phaser\");\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(phaser__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! socket.io-client */ \"socket.io-client\");\n/* harmony import */ var _spawnUtils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../spawnUtils */ \"(pages-dir-node)/./lib/spawnUtils.ts\");\n/* harmony import */ var _mapZones__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../mapZones */ \"(pages-dir-node)/./lib/mapZones.ts\");\n/* harmony import */ var _biomes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../biomes */ \"(pages-dir-node)/./lib/biomes.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([socket_io_client__WEBPACK_IMPORTED_MODULE_1__]);\nsocket_io_client__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\nfunction capitalize(s) {\n    return (s || \"\").charAt(0).toUpperCase() + (s || \"\").slice(1);\n}\nclass GameScene extends phaser__WEBPACK_IMPORTED_MODULE_0__.Scene {\n    constructor(){\n        super(\"GameScene\"), this.configData = {\n            tileSize: 32,\n            mapWidth: 50,\n            mapHeight: 38,\n            playerSpeed: 200\n        }, this.playerSpeed = 200, // Cached map dimensions\n        this.mapWidthTiles = 0, this.mapHeightTiles = 0, this.tileSizePx = 32, this.others = new Map(), this.lastSent = 0, // UI (sidebar) - removed in favor of React/Next UI\n        this.lastStatusAt = 0, this.miniW = 160, this.miniH = 160, // Structures\n        this.structures = [], this.insideStructure = {\n            active: false,\n            type: null\n        };\n    }\n    init(data) {\n        this.configData = {\n            ...this.configData,\n            ...data\n        };\n        if (this.configData.playerSpeed) this.playerSpeed = this.configData.playerSpeed;\n    }\n    preload() {\n        // Generate a simple 2-tile spritesheet (grass, wall) programmatically\n        const { tileSize } = this.configData;\n        const width = tileSize * 2;\n        const height = tileSize;\n        // Check if texture already exists, destroy it first\n        if (this.textures.exists(\"tilesheet\")) {\n            this.textures.remove(\"tilesheet\");\n        }\n        const sheet = this.textures.createCanvas(\"tilesheet\", width, height);\n        if (!sheet) {\n            throw new Error(\"Failed to create canvas texture 'tilesheet'\");\n        }\n        const ctx = sheet.getContext();\n        if (!ctx) {\n            throw new Error(\"Failed to get 2D rendering context from canvas 'tilesheet'\");\n        }\n        // Grass tile (index 0)\n        ctx.fillStyle = \"#2d6a4f\";\n        ctx.fillRect(0, 0, tileSize, tileSize);\n        // sprinkle dots\n        ctx.fillStyle = \"#40916c\";\n        for(let i = 0; i < 30; i++){\n            const x = Math.random() * (tileSize - 2);\n            const y = Math.random() * (tileSize - 2);\n            ctx.fillRect(x, y, 2, 2);\n        }\n        // Wall tile (index 1)\n        ctx.fillStyle = \"#6c757d\";\n        ctx.fillRect(tileSize, 0, tileSize, tileSize);\n        ctx.strokeStyle = \"#495057\";\n        for(let i = 0; i < tileSize; i += 4){\n            ctx.beginPath();\n            ctx.moveTo(tileSize, i + 0.5);\n            ctx.lineTo(tileSize * 2, i + 0.5);\n            ctx.stroke();\n        }\n        sheet.refresh();\n        // Generate a player texture (circle)\n        if (this.textures.exists(\"player\")) {\n            this.textures.remove(\"player\");\n        }\n        const g = this.make.graphics({\n            x: 0,\n            y: 0\n        });\n        g.fillStyle(0xffd166, 1);\n        g.fillCircle(tileSize / 2, tileSize / 2, tileSize * 0.4);\n        g.lineStyle(2, 0x073b4c, 1);\n        g.strokeCircle(tileSize / 2, tileSize / 2, tileSize * 0.4);\n        g.generateTexture(\"player\", tileSize, tileSize);\n        g.destroy();\n    }\n    create() {\n        const { tileSize, mapWidth, mapHeight } = this.configData;\n        this.tileSizePx = tileSize;\n        this.mapWidthTiles = mapWidth;\n        this.mapHeightTiles = mapHeight;\n        // Create a blank tilemap and a dynamic layer using our generated spritesheet\n        const map = this.make.tilemap({\n            tileWidth: tileSize,\n            tileHeight: tileSize,\n            width: mapWidth,\n            height: mapHeight\n        });\n        const tileset = map.addTilesetImage(\"tiles\", \"tilesheet\", tileSize, tileSize, 0, 0);\n        if (!tileset) throw new Error(\"Failed to create tileset from tilesheet\");\n        const layer = map.createBlankLayer(\"ground\", tileset, 0, 0);\n        if (!layer) throw new Error(\"Failed to create blank ground layer\");\n        this.groundLayer = layer;\n        // Fill ground (index 0) and carve walls (index 1) along the border + a few random obstacles\n        this.groundLayer.fill(0, 0, 0, mapWidth, mapHeight);\n        for(let x = 0; x < mapWidth; x++){\n            this.groundLayer.putTileAt(1, x, 0);\n            this.groundLayer.putTileAt(1, x, mapHeight - 1);\n        }\n        for(let y = 0; y < mapHeight; y++){\n            this.groundLayer.putTileAt(1, 0, y);\n            this.groundLayer.putTileAt(1, mapWidth - 1, y);\n        }\n        // random obstacles\n        for(let i = 0; i < Math.floor(mapWidth * mapHeight * 0.05); i++){\n            const rx = phaser__WEBPACK_IMPORTED_MODULE_0__.Math.Between(1, mapWidth - 2);\n            const ry = phaser__WEBPACK_IMPORTED_MODULE_0__.Math.Between(1, mapHeight - 2);\n            this.groundLayer.putTileAt(1, rx, ry);\n        }\n        // Enable collisions for wall tiles (index 1)\n        this.groundLayer.setCollision(1, true);\n        // Player setup\n        const startX = this.configData.initialX ?? tileSize * 2;\n        const startY = this.configData.initialY ?? tileSize * 2;\n        this.player = this.physics.add.sprite(startX, startY, \"player\");\n        this.player.setDepth(10);\n        this.player.setCollideWorldBounds(true);\n        // Camera and world bounds\n        const worldWidth = mapWidth * tileSize;\n        const worldHeight = mapHeight * tileSize;\n        this.cameras.main.setBounds(0, 0, worldWidth, worldHeight);\n        this.cameras.main.startFollow(this.player, true, 0.1, 0.1);\n        this.physics.world.setBounds(0, 0, worldWidth, worldHeight);\n        // Collide player with walls\n        this.physics.add.collider(this.player, this.groundLayer);\n        // Input\n        this.cursors = this.input.keyboard?.createCursorKeys();\n        this.wasd = this.input.keyboard?.addKeys({\n            W: phaser__WEBPACK_IMPORTED_MODULE_0__.Input.Keyboard.KeyCodes.W,\n            A: phaser__WEBPACK_IMPORTED_MODULE_0__.Input.Keyboard.KeyCodes.A,\n            S: phaser__WEBPACK_IMPORTED_MODULE_0__.Input.Keyboard.KeyCodes.S,\n            D: phaser__WEBPACK_IMPORTED_MODULE_0__.Input.Keyboard.KeyCodes.D\n        });\n        this.enterKey = this.input.keyboard?.addKey(phaser__WEBPACK_IMPORTED_MODULE_0__.Input.Keyboard.KeyCodes.ENTER);\n        // Multiplayer socket (kept from your original)\n        this.initMultiplayer();\n        // Environment overlay\n        this.envOverlay = this.add.rectangle(0, 0, this.scale.width, this.scale.height, 0xffffff, 0.08).setOrigin(0).setScrollFactor(0).setDepth(900);\n        // Minimap overlay (no grid lines)\n        this.createMiniMap();\n        // Zone-aware spawn manager\n        this.spawnManager = new _spawnUtils__WEBPACK_IMPORTED_MODULE_2__.SpawnManager(this, tileSize, mapWidth, mapHeight);\n        this.spawnManager.on(\"spawned\", (rec)=>{\n            this.addMiniMarker(rec.key, rec.position.x, rec.position.y);\n            this.statusOnce(`A wild ${capitalize(rec.name)} appeared near you!`, 800);\n            this.configData.onPokemonSpotted?.({\n                name: rec.name,\n                spriteUrl: rec.spriteUrl,\n                pokeId: rec.pokeId\n            });\n            this.pushSpawnsToUI();\n        });\n        this.spawnManager.on(\"despawned\", (_key)=>{\n            this.removeMiniMarker(_key);\n            if (this.spawnManager.getActiveSpawns().length === 0) this.configData.onPokemonCleared?.();\n            this.pushSpawnsToUI();\n        });\n        this.spawnManager.on(\"spawnClicked\", async (key)=>{\n            await this.startBattleFromKey(key);\n        });\n        this.spawnManager.on(\"zoneChanged\", (z)=>{\n            this.highlightMiniZone();\n            const czx = (z.col * _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES + _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES / 2) * tileSize;\n            const czy = (z.row * _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES + _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES / 2) * tileSize;\n            const cam = this.cameras.main;\n            cam.stopFollow();\n            cam.pan(czx, czy, 300, \"Sine.easeInOut\", true, (camera, progress)=>{\n                if (progress === 1) cam.startFollow(this.player, true, 0.1, 0.1);\n            });\n            // apply biome environment tint\n            const zones = (0,_mapZones__WEBPACK_IMPORTED_MODULE_3__.generateZones)(Math.floor(this.mapWidthTiles / _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES), Math.floor(this.mapHeightTiles / _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES));\n            const meta = zones.find((q)=>q.id === `${z.col},${z.row}`);\n            if (meta) this.applyBiome(meta.biome);\n        });\n        this.generateStructures();\n        this.spawnManager.start();\n    }\n    update() {\n        if (!this.player || !this.player.body) return;\n        const speed = this.playerSpeed;\n        let vx = 0;\n        let vy = 0;\n        // Arrow keys\n        if (this.cursors?.left?.isDown) vx -= 1;\n        if (this.cursors?.right?.isDown) vx += 1;\n        if (this.cursors?.up?.isDown) vy -= 1;\n        if (this.cursors?.down?.isDown) vy += 1;\n        // WASD\n        if (this.wasd?.A?.isDown) vx -= 1;\n        if (this.wasd?.D?.isDown) vx += 1;\n        if (this.wasd?.W?.isDown) vy -= 1;\n        if (this.wasd?.S?.isDown) vy += 1;\n        const body = this.player.body;\n        if (vx === 0 && vy === 0) {\n            body.setVelocity(0, 0);\n        } else {\n            const len = Math.hypot(vx, vy) || 1;\n            body.setVelocity(vx / len * speed, vy / len * speed);\n        }\n        // Keep UI + minimap pinned\n        if (this.mini) this.mini.setScrollFactor(0);\n        // Throttled position sync (multiplayer)\n        const now = this.time.now;\n        if (this.socket && now - this.lastSent > 100) {\n            this.socket.emit(\"move\", {\n                x: this.player.x,\n                y: this.player.y\n            });\n            this.lastSent = now;\n        }\n        // Update zone tracking for spawns/minimap\n        this.spawnManager?.updatePlayerPos(this.player.x, this.player.y);\n        // Battle when near and Enter pressed (compat)\n        if (this.enterKey && phaser__WEBPACK_IMPORTED_MODULE_0__.Input.Keyboard.JustDown(this.enterKey)) {\n            const nearest = this.getNearestActive(64);\n            if (nearest) this.startBattleFromKey(nearest.key);\n        }\n    }\n    // ---- UI helpers ----\n    statusOnce(_text, cooldownMs = 800) {\n        const now = this.time.now;\n        if (now - this.lastStatusAt < cooldownMs) return;\n        this.lastStatusAt = now;\n    // React sidebar now handles messaging\n    }\n    // ---- Multiplayer (kept) ----\n    initMultiplayer() {\n        if (this.socket) return; // already connected\n        const socket = (0,socket_io_client__WEBPACK_IMPORTED_MODULE_1__.io)(\"http://localhost:4000\", {\n            transports: [\n                \"websocket\"\n            ],\n            autoConnect: true\n        });\n        this.socket = socket;\n        socket.on(\"connect\", ()=>{\n            this.myId = socket.id;\n        });\n        socket.on(\"initState\", (payload)=>{\n            Object.entries(payload.players).forEach(([id, pos])=>{\n                if (id === this.myId) return;\n                this.spawnOther(id, pos.x, pos.y);\n            });\n        });\n        socket.on(\"playerJoined\", ({ id, x, y })=>{\n            if (id === this.myId) return;\n            this.spawnOther(id, x, y);\n        });\n        socket.on(\"playerMoved\", ({ id, x, y })=>{\n            const sprite = this.others.get(id);\n            if (sprite) {\n                sprite.x = x;\n                sprite.y = y;\n            }\n        });\n        socket.on(\"playerLeft\", ({ id })=>{\n            const sprite = this.others.get(id);\n            if (sprite) {\n                sprite.destroy();\n                this.others.delete(id);\n            }\n        });\n        this.events.once(phaser__WEBPACK_IMPORTED_MODULE_0__.Scenes.Events.SHUTDOWN, ()=>{\n            socket.removeAllListeners();\n            socket.disconnect();\n            this.socket = undefined;\n            this.myId = undefined;\n            this.others.forEach((s)=>s.destroy());\n            this.others.clear();\n        });\n    }\n    spawnOther(id, x, y) {\n        const s = this.add.sprite(x, y, \"player\").setTint(0x118ab2);\n        s.setDepth(5);\n        this.others.set(id, s);\n    }\n    // ---- Minimap ----\n    createMiniMap() {\n        // Place top-left inside gameplay area (away from right sidebar)\n        const baseX = 12;\n        const baseY = 12;\n        this.mini = this.add.container(baseX, baseY).setDepth(1000);\n        this.mini.setScrollFactor(0);\n        const bg = this.add.rectangle(0, 0, this.miniW, this.miniH, 0x111111, 0.6).setOrigin(0);\n        this.miniGfx = this.add.graphics();\n        this.miniMarkers = this.add.container(0, 0);\n        this.miniBuildings = this.add.container(0, 0);\n        this.miniHighlight = this.add.graphics();\n        // no grid lines to keep zones invisible\n        const cols = Math.max(1, Math.floor(this.mapWidthTiles / _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES));\n        const rows = Math.max(1, Math.floor(this.mapHeightTiles / _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES));\n        this.miniGfx.clear();\n        this.miniGfx.lineStyle(1, 0x333333, 0.8);\n        this.miniGfx.strokeRect(0, 0, this.miniW, this.miniH);\n        // clickable zone\n        const hit = this.add.zone(0, 0, this.miniW, this.miniH).setOrigin(0).setInteractive({\n            useHandCursor: true\n        });\n        hit.on('pointerdown', (_pointer, localX, localY)=>{\n            const zc = Math.floor(localX / (this.miniW / cols));\n            const zr = Math.floor(localY / (this.miniH / rows));\n            const cx = (zc * _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES + _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES / 2) * this.tileSizePx;\n            const cy = (zr * _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES + _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES / 2) * this.tileSizePx;\n            const cam = this.cameras.main;\n            cam.stopFollow();\n            cam.pan(cx, cy, 300, 'Sine.easeInOut', true, (camera, progress)=>{\n                if (progress === 1) cam.startFollow(this.player, true, 0.1, 0.1);\n            });\n        });\n        this.mini.add([\n            bg,\n            this.miniGfx,\n            this.miniHighlight,\n            this.miniBuildings,\n            this.miniMarkers,\n            hit\n        ]);\n        this.highlightMiniZone();\n    }\n    highlightMiniZone() {\n        if (!this.miniHighlight) return;\n        const grid = this.spawnManager?.getZoneGrid();\n        const cols = grid?.cols ?? Math.max(1, Math.floor(this.mapWidthTiles / _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES));\n        const rows = grid?.rows ?? Math.max(1, Math.floor(this.mapHeightTiles / _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES));\n        const cur = this.spawnManager?.getCurrentZone();\n        if (!cur) return;\n        const cw = this.miniW / cols;\n        const ch = this.miniH / rows;\n        this.miniHighlight.clear();\n        this.miniHighlight.lineStyle(2, 0xffff66, 1);\n        this.miniHighlight.strokeRect(cur.col * cw, cur.row * ch, cw, ch);\n    }\n    worldToMini(x, y) {\n        const sx = this.miniW / (this.mapWidthTiles * this.tileSizePx);\n        const sy = this.miniH / (this.mapHeightTiles * this.tileSizePx);\n        return {\n            x: x * sx,\n            y: y * sy\n        };\n    }\n    addMiniMarker(key, wx, wy) {\n        if (!this.miniMarkers) return;\n        const pt = this.worldToMini(wx, wy);\n        const dot = this.add.rectangle(pt.x, pt.y, 4, 4, 0xffffff, 1).setOrigin(0.5);\n        dot.name = key;\n        this.miniMarkers.add(dot);\n    }\n    removeMiniMarker(key) {\n        if (!this.miniMarkers) return;\n        const list = this.miniMarkers.list;\n        const found = list.find((ch)=>ch.name === key);\n        if (found) found.destroy();\n    }\n    getNearestActive(radius) {\n        if (!this.spawnManager) return null;\n        let best = null;\n        let bestD = Number.POSITIVE_INFINITY;\n        this.spawnManager.getActiveSpawns().forEach((rec)=>{\n            const d = phaser__WEBPACK_IMPORTED_MODULE_0__.Math.Distance.Between(this.player.x, this.player.y, rec.position.x, rec.position.y);\n            if (d < radius && d < bestD) {\n                bestD = d;\n                best = rec;\n            }\n        });\n        return best;\n    }\n    async startBattleFromKey(key) {\n        if (!this.spawnManager) return;\n        const rec = this.spawnManager.getActiveSpawns().find((r)=>r.key === key);\n        if (!rec) return;\n        if (!this.configData.playerPokemon) {\n            this.statusOnce('You need a Pokémon to battle!', 800);\n            return;\n        }\n        try {\n            const pokeRes = await fetch(`https://pokeapi.co/api/v2/pokemon/${rec.pokeId}`);\n            const pokeData = await pokeRes.json();\n            this.spawnManager.despawn(key);\n            // Transform player Pokemon to match BattleScene expected format\n            const playerPoke = this.configData.playerPokemon;\n            const hpStat = playerPoke.data?.stats?.find((s)=>s.stat.name === 'hp')?.base_stat || 50;\n            const maxHp = Math.floor(hpStat * 1.5 * (playerPoke.level || 1));\n            this.scene.start('BattleScene', {\n                wildPokemon: {\n                    name: rec.name,\n                    pokeId: rec.pokeId,\n                    data: pokeData,\n                    spriteUrl: rec.spriteUrl\n                },\n                playerPokemon: {\n                    name: playerPoke.name || playerPoke.displayName,\n                    pokeId: playerPoke.id,\n                    data: playerPoke.data,\n                    spriteUrl: playerPoke.sprite,\n                    level: playerPoke.level || 1,\n                    maxHp: maxHp,\n                    currentHp: maxHp\n                }\n            });\n        } catch  {}\n    }\n    // ---- Structures ----\n    generateStructures() {\n        const cols = Math.max(1, Math.floor(this.mapWidthTiles / _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES));\n        const rows = Math.max(1, Math.floor(this.mapHeightTiles / _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES));\n        const zones = (0,_mapZones__WEBPACK_IMPORTED_MODULE_3__.generateZones)(cols, rows);\n        const choose = (arr)=>arr[Math.floor(Math.random() * arr.length)];\n        const byBiome = {\n            city: [\n                \"lab\",\n                \"house\"\n            ],\n            mountain: [\n                \"temple\",\n                \"house\"\n            ],\n            forest: [\n                \"house\",\n                \"tower\"\n            ],\n            desert: [\n                \"temple\"\n            ],\n            lake: [\n                \"tower\"\n            ],\n            grassland: [\n                \"house\"\n            ],\n            cave: [\n                \"tower\"\n            ],\n            snowfield: [\n                \"house\",\n                \"temple\"\n            ]\n        };\n        this.structures = [];\n        zones.forEach((z)=>{\n            if (Math.random() > 0.12) return; // ~12% of zones have a building\n            const types = byBiome[z.biome] || [\n                \"house\"\n            ];\n            const type = choose(types);\n            const startX = z.col * _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES * this.tileSizePx;\n            const startY = z.row * _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES * this.tileSizePx;\n            const x = startX + 16 + Math.random() * (_mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES * this.tileSizePx - 32);\n            const y = startY + 16 + Math.random() * (_mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES * this.tileSizePx - 32);\n            const id = `b-${z.id}-${type}-${Math.floor(x)}-${Math.floor(y)}`;\n            this.structures.push({\n                id,\n                type,\n                col: z.col,\n                row: z.row,\n                x,\n                y\n            });\n        });\n        // render\n        this.structures.forEach((s)=>{\n            const color = s.type === \"lab\" ? 0xcfe3ff : s.type === \"tower\" ? 0x6b4e9b : s.type === \"temple\" ? 0xc2b280 : 0xd3d3d3;\n            const building = this.add.rectangle(s.x, s.y, 32, 24, color, 1).setOrigin(0.5).setDepth(15);\n            this.physics.add.existing(building, true);\n            const door = this.add.rectangle(s.x, s.y + 12, 10, 6, 0x000000, 0.8).setDepth(16);\n            this.physics.add.existing(door, true);\n            this.physics.add.overlap(this.player, door, ()=>this.enterStructure(s));\n            // minimap marker\n            if (this.miniBuildings) {\n                const pt = this.worldToMini(s.x, s.y);\n                const sq = this.add.rectangle(pt.x, pt.y, 5, 5, 0xffe066, 1).setOrigin(0.5);\n                this.miniBuildings.add(sq);\n            }\n        });\n    }\n    enterStructure(s) {\n        if (this.insideStructure.active) return;\n        this.insideStructure = {\n            active: true,\n            type: s.type\n        };\n        // override spawn pool based on structure -> use BIOMES mapping\n        const b = s.type === \"tower\" ? _biomes__WEBPACK_IMPORTED_MODULE_4__.BIOMES.tower : s.type === \"lab\" ? _biomes__WEBPACK_IMPORTED_MODULE_4__.BIOMES.lab : _biomes__WEBPACK_IMPORTED_MODULE_4__.BIOMES.temple;\n        this.applyBiome(b.id);\n        this.spawnManager?.setOverrideTypes(b.pokemonPool);\n    }\n    exitStructure() {\n        if (!this.insideStructure.active) return;\n        this.insideStructure = {\n            active: false,\n            type: null\n        };\n        // clear override and re-apply zone biome color\n        this.spawnManager?.setOverrideTypes(null);\n        const cur = this.spawnManager?.getCurrentZone();\n        if (cur) {\n            const zones = (0,_mapZones__WEBPACK_IMPORTED_MODULE_3__.generateZones)(Math.floor(this.mapWidthTiles / _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES), Math.floor(this.mapHeightTiles / _mapZones__WEBPACK_IMPORTED_MODULE_3__.ZONE_TILES));\n            const meta = zones.find((q)=>q.id === `${cur.col},${cur.row}`);\n            if (meta) this.applyBiome(meta.biome);\n        }\n    }\n    applyBiome(id) {\n        const def = _biomes__WEBPACK_IMPORTED_MODULE_4__.BIOMES[id];\n        if (!def) return;\n        if (this.envOverlay) {\n            const target = def.environmentColor;\n            const from = this.envOverlay.fillColor ?? 0xffffff;\n            const o = {\n                t: 0\n            };\n            this.tweens.add({\n                targets: o,\n                t: 1,\n                duration: 400,\n                onUpdate: ()=>{\n                    const c = phaser__WEBPACK_IMPORTED_MODULE_0__.Display.Color.Interpolate.ColorWithColor(phaser__WEBPACK_IMPORTED_MODULE_0__.Display.Color.IntegerToColor(from), phaser__WEBPACK_IMPORTED_MODULE_0__.Display.Color.IntegerToColor(target), 100, Math.floor(o.t * 100));\n                    const hex = phaser__WEBPACK_IMPORTED_MODULE_0__.Display.Color.GetColor(c.r, c.g, c.b);\n                    this.envOverlay.setFillStyle(hex, 0.08);\n                }\n            });\n        }\n    }\n    pushSpawnsToUI() {\n        if (!this.configData.onSpawnsUpdate || !this.spawnManager) return;\n        const spawns = this.spawnManager.getActiveSpawns().map((r)=>({\n                key: r.key,\n                name: r.name,\n                pokeId: r.pokeId,\n                spriteUrl: r.spriteUrl,\n                position: r.position,\n                distance: phaser__WEBPACK_IMPORTED_MODULE_0__.Math.Distance.Between(this.player.x, this.player.y, r.position.x, r.position.y)\n            }));\n        this.configData.onSpawnsUpdate(spawns);\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./lib/phaser/GameScene.ts\n");

/***/ }),

/***/ "(pages-dir-node)/./lib/spawnUtils.ts":
/*!***************************!*\
  !*** ./lib/spawnUtils.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SpawnManager: () => (/* binding */ SpawnManager)\n/* harmony export */ });\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! phaser */ \"phaser\");\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(phaser__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _mapZones__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./mapZones */ \"(pages-dir-node)/./lib/mapZones.ts\");\n\n\nconst MAX_ACTIVE = 8;\n// Weighted rarity target buckets\nconst RARITY_WEIGHTS = {\n    common: 0.7,\n    rare: 0.25,\n    legendary: 0.05\n};\nfunction pickRarity() {\n    const r = Math.random();\n    if (r < RARITY_WEIGHTS.common) return \"common\";\n    if (r < RARITY_WEIGHTS.common + RARITY_WEIGHTS.rare) return \"rare\";\n    return \"legendary\";\n}\nasync function fetchPokemon(pokeId) {\n    const res = await fetch(`https://pokeapi.co/api/v2/pokemon/${pokeId}`);\n    const data = await res.json();\n    const types = data.types?.map((t)=>t.type.name) || [];\n    const spriteUrl = data?.sprites?.front_default || data?.sprites?.other?.[\"official-artwork\"]?.front_default;\n    return {\n        data,\n        types,\n        spriteUrl,\n        name: data.name\n    };\n}\nasync function fetchSpecies(pokeId) {\n    const res = await fetch(`https://pokeapi.co/api/v2/pokemon-species/${pokeId}`);\n    return res.json();\n}\n// Heuristic rarity tiering based on species flags and capture_rate\nfunction classifyRarity(species) {\n    if (species?.is_legendary || species?.is_mythical) return \"legendary\";\n    const rate = species?.capture_rate ?? 45; // 0-255 higher = easier\n    if (rate >= 140) return \"common\"; // easy to catch\n    if (rate >= 70) return \"rare\";\n    return \"legendary\";\n}\nclass SpawnManager extends phaser__WEBPACK_IMPORTED_MODULE_0__.Events.EventEmitter {\n    constructor(scene, tileSize, mapWidthTiles, mapHeightTiles){\n        super(), this.zones = [], this.zoneCols = 0, this.zoneRows = 0, this.active = new Map(), this.currentZone = {\n            col: 0,\n            row: 0,\n            id: \"0,0\"\n        }, this.overrideTypes = null;\n        this.scene = scene;\n        this.tileSize = tileSize;\n        this.mapWidthTiles = mapWidthTiles;\n        this.mapHeightTiles = mapHeightTiles;\n        this.zoneCols = Math.max(1, Math.floor(mapWidthTiles / _mapZones__WEBPACK_IMPORTED_MODULE_1__.ZONE_TILES));\n        this.zoneRows = Math.max(1, Math.floor(mapHeightTiles / _mapZones__WEBPACK_IMPORTED_MODULE_1__.ZONE_TILES));\n        this.zones = (0,_mapZones__WEBPACK_IMPORTED_MODULE_1__.generateZones)(this.zoneCols, this.zoneRows);\n    }\n    getActiveSpawns() {\n        return Array.from(this.active.values());\n    }\n    getZoneGrid() {\n        return {\n            cols: this.zoneCols,\n            rows: this.zoneRows,\n            zones: this.zones\n        };\n    }\n    getCurrentZone() {\n        return this.currentZone;\n    }\n    setOverrideTypes(types) {\n        this.overrideTypes = types;\n        this.topUpSpawns(true);\n    }\n    updatePlayerPos(x, y) {\n        const tx = Math.floor(x / this.tileSize);\n        const ty = Math.floor(y / this.tileSize);\n        const z = (0,_mapZones__WEBPACK_IMPORTED_MODULE_1__.getZoneForTile)(tx, ty, this.zoneCols, this.zoneRows);\n        if (z.id !== this.currentZone.id) {\n            this.currentZone = z;\n            this.emit(\"zoneChanged\", z);\n            // on zone change, try to top up spawns immediately\n            this.topUpSpawns(true);\n        }\n    }\n    start() {\n        this.topUpSpawns(true);\n        this.spawnTimer?.remove(false);\n        const scheduleNext = ()=>{\n            const delay = phaser__WEBPACK_IMPORTED_MODULE_0__.Math.Between(20000, 40000);\n            this.spawnTimer = this.scene.time.addEvent({\n                delay,\n                loop: false,\n                callback: ()=>{\n                    this.topUpSpawns(false);\n                    scheduleNext();\n                }\n            });\n        };\n        scheduleNext();\n    }\n    stop() {\n        this.spawnTimer?.remove(false);\n        this.active.forEach((r)=>this.despawn(r.key));\n        this.active.clear();\n    }\n    async topUpSpawns(immediate) {\n        if (this.active.size >= MAX_ACTIVE) return;\n        const need = Math.min(MAX_ACTIVE - this.active.size, 2); // spawn up to 2 at a time\n        for(let i = 0; i < need; i++){\n            try {\n                await this.spawnOne();\n            } catch  {}\n            if (!immediate) break;\n        }\n    }\n    getCandidateZones() {\n        const around = (0,_mapZones__WEBPACK_IMPORTED_MODULE_1__.getAdjacentZoneCoords)(this.currentZone.col, this.currentZone.row, this.zoneCols, this.zoneRows, 1);\n        return around;\n    }\n    pickZoneArea(zone) {\n        const startX = zone.col * _mapZones__WEBPACK_IMPORTED_MODULE_1__.ZONE_TILES * this.tileSize;\n        const startY = zone.row * _mapZones__WEBPACK_IMPORTED_MODULE_1__.ZONE_TILES * this.tileSize;\n        const endX = startX + _mapZones__WEBPACK_IMPORTED_MODULE_1__.ZONE_TILES * this.tileSize;\n        const endY = startY + _mapZones__WEBPACK_IMPORTED_MODULE_1__.ZONE_TILES * this.tileSize;\n        return {\n            startX,\n            startY,\n            endX,\n            endY\n        };\n    }\n    async spawnOne() {\n        const zones = this.getCandidateZones();\n        const picked = phaser__WEBPACK_IMPORTED_MODULE_0__.Utils.Array.GetRandom(zones);\n        const zoneMeta = this.zones.find((z)=>z.id === picked.id);\n        const biome = zoneMeta.biome;\n        const types = this.overrideTypes || _mapZones__WEBPACK_IMPORTED_MODULE_1__.BIOME_TYPE_POOLS[biome];\n        // rarity target\n        const target = pickRarity();\n        // Try several random ids until we find one that matches biome + rarity\n        let chosen = null;\n        for(let tries = 0; tries < 12; tries++){\n            const id = phaser__WEBPACK_IMPORTED_MODULE_0__.Math.Between(1, 898);\n            const p = await fetchPokemon(id);\n            if (!p.spriteUrl) continue;\n            if (!p.types.some((t)=>types.includes(t))) continue; // not matching biome\n            const species = await fetchSpecies(id);\n            const r = classifyRarity(species);\n            if (r !== target && Math.random() > 0.35) continue; // allow some bleed-over so we don't loop forever\n            chosen = {\n                id,\n                name: p.name,\n                spriteUrl: p.spriteUrl,\n                types: p.types\n            };\n            break;\n        }\n        if (!chosen) return;\n        const area = this.pickZoneArea(picked);\n        const x = phaser__WEBPACK_IMPORTED_MODULE_0__.Math.Between(area.startX + 12, area.endX - 12);\n        const y = phaser__WEBPACK_IMPORTED_MODULE_0__.Math.Between(area.startY + 12, area.endY - 12);\n        const key = `spawn-${chosen.id}-${Date.now()}`;\n        const sprite = this.scene.add.image(x, y, `pkmn-${chosen.id}`).setVisible(false);\n        if (!this.scene.textures.exists(`pkmn-${chosen.id}`)) {\n            await new Promise((resolve)=>{\n                this.scene.load.once(phaser__WEBPACK_IMPORTED_MODULE_0__.Loader.Events.COMPLETE, ()=>resolve());\n                this.scene.load.image(`pkmn-${chosen.id}`, chosen.spriteUrl);\n                this.scene.load.start();\n            });\n            sprite.setTexture(`pkmn-${chosen.id}`);\n        }\n        sprite.setDepth(20).setInteractive({\n            useHandCursor: true\n        });\n        sprite.setScale(0.1).setAlpha(0);\n        sprite.on(\"pointerdown\", ()=>this.emit(\"spawnClicked\", key));\n        // emerge animation\n        sprite.setVisible(true);\n        this.scene.tweens.add({\n            targets: sprite,\n            alpha: 1,\n            scale: 1.2,\n            duration: 300,\n            yoyo: true,\n            ease: \"sine.out\",\n            onComplete: ()=>sprite.setScale(1)\n        });\n        const rec = {\n            key,\n            name: chosen.name,\n            pokeId: chosen.id,\n            types: chosen.types,\n            spriteUrl: chosen.spriteUrl,\n            position: {\n                x,\n                y\n            },\n            zone: picked,\n            sprite\n        };\n        // despawn after 60s with fade out\n        rec.timeout = this.scene.time.delayedCall(60000, ()=>this.despawn(key));\n        this.active.set(key, rec);\n        this.emit(\"spawned\", rec);\n    }\n    despawn(key) {\n        const rec = this.active.get(key);\n        if (!rec) return;\n        if (rec.timeout) rec.timeout.remove(false);\n        if (rec.sprite) {\n            this.scene.tweens.add({\n                targets: rec.sprite,\n                alpha: 0,\n                duration: 400,\n                onComplete: ()=>rec.sprite?.destroy()\n            });\n        }\n        this.emit(\"despawned\", key);\n        this.active.delete(key);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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TUFBTTtnQkFBRXFCLE9BQU87Z0JBQUdFLFVBQVU7Z0JBQUtHLFlBQVksSUFBTUMsSUFBSTNCLE1BQU0sRUFBRWlDO1lBQVU7UUFDaEg7UUFDQSxJQUFJLENBQUM5RSxJQUFJLENBQUMsYUFBYWM7UUFDdkIsSUFBSSxDQUFDdkMsTUFBTSxDQUFDd0csTUFBTSxDQUFDakU7SUFDckI7QUFDRiIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxTYWhpdGhcXE9uZURyaXZlXFxEZXNrdG9wXFx5b2thaWh1bnRcXGZyb250ZW5kXFxsaWJcXHNwYXduVXRpbHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUGhhc2VyIGZyb20gXCJwaGFzZXJcIjtcclxuaW1wb3J0IHsgQklPTUVfVFlQRV9QT09MUywgWk9ORV9USUxFUywgZ2VuZXJhdGVab25lcywgZ2V0QWRqYWNlbnRab25lQ29vcmRzLCBnZXRab25lRm9yVGlsZSwgdHlwZSBCaW9tZSB9IGZyb20gXCIuL21hcFpvbmVzXCI7XHJcblxyXG5leHBvcnQgdHlwZSBTcGF3blJhcml0eSA9IFwiY29tbW9uXCIgfCBcInJhcmVcIiB8IFwibGVnZW5kYXJ5XCI7XHJcblxyXG5leHBvcnQgdHlwZSBTcGF3blJlY29yZCA9IHtcclxuICBrZXk6IHN0cmluZztcclxuICBuYW1lOiBzdHJpbmc7XHJcbiAgcG9rZUlkOiBudW1iZXI7XHJcbiAgdHlwZXM6IHN0cmluZ1tdO1xyXG4gIHNwcml0ZVVybDogc3RyaW5nO1xyXG4gIHBvc2l0aW9uOiB7IHg6IG51bWJlcjsgeTogbnVtYmVyIH07XHJcbiAgem9uZTogeyBjb2w6IG51bWJlcjsgcm93OiBudW1iZXI7IGlkOiBzdHJpbmcgfTtcclxuICBzcHJpdGU/OiBQaGFzZXIuR2FtZU9iamVjdHMuSW1hZ2U7XHJcbiAgdGltZW91dD86IFBoYXNlci5UaW1lLlRpbWVyRXZlbnQ7XHJcbiAgbWFya2VyPzogUGhhc2VyLkdhbWVPYmplY3RzLlNoYXBlOyAvLyBtaW5pbWFwIG1hcmtlclxyXG59O1xyXG5cclxuY29uc3QgTUFYX0FDVElWRSA9IDg7XHJcblxyXG4vLyBXZWlnaHRlZCByYXJpdHkgdGFyZ2V0IGJ1Y2tldHNcclxuY29uc3QgUkFSSVRZX1dFSUdIVFM6IFJlY29yZDxTcGF3blJhcml0eSwgbnVtYmVyPiA9IHtcclxuICBjb21tb246IDAuNyxcclxuICByYXJlOiAwLjI1LFxyXG4gIGxlZ2VuZGFyeTogMC4wNSxcclxufTtcclxuXHJcbmZ1bmN0aW9uIHBpY2tSYXJpdHkoKTogU3Bhd25SYXJpdHkge1xyXG4gIGNvbnN0IHIgPSBNYXRoLnJhbmRvbSgpO1xyXG4gIGlmIChyIDwgUkFSSVRZX1dFSUdIVFMuY29tbW9uKSByZXR1cm4gXCJjb21tb25cIjtcclxuICBpZiAociA8IFJBUklUWV9XRUlHSFRTLmNvbW1vbiArIFJBUklUWV9XRUlHSFRTLnJhcmUpIHJldHVybiBcInJhcmVcIjtcclxuICByZXR1cm4gXCJsZWdlbmRhcnlcIjtcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gZmV0Y2hQb2tlbW9uKHBva2VJZDogbnVtYmVyKSB7XHJcbiAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goYGh0dHBzOi8vcG9rZWFwaS5jby9hcGkvdjIvcG9rZW1vbi8ke3Bva2VJZH1gKTtcclxuICBjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcclxuICBjb25zdCB0eXBlczogc3RyaW5nW10gPSBkYXRhLnR5cGVzPy5tYXAoKHQ6IGFueSkgPT4gdC50eXBlLm5hbWUpIHx8IFtdO1xyXG4gIGNvbnN0IHNwcml0ZVVybCA9IGRhdGE/LnNwcml0ZXM/LmZyb250X2RlZmF1bHQgfHwgZGF0YT8uc3ByaXRlcz8ub3RoZXI/LltcIm9mZmljaWFsLWFydHdvcmtcIl0/LmZyb250X2RlZmF1bHQ7XHJcbiAgcmV0dXJuIHsgZGF0YSwgdHlwZXMsIHNwcml0ZVVybCwgbmFtZTogZGF0YS5uYW1lIH07XHJcbn1cclxuXHJcbmFzeW5jIGZ1bmN0aW9uIGZldGNoU3BlY2llcyhwb2tlSWQ6IG51bWJlcikge1xyXG4gIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKGBodHRwczovL3Bva2VhcGkuY28vYXBpL3YyL3Bva2Vtb24tc3BlY2llcy8ke3Bva2VJZH1gKTtcclxuICByZXR1cm4gcmVzLmpzb24oKTtcclxufVxyXG5cclxuLy8gSGV1cmlzdGljIHJhcml0eSB0aWVyaW5nIGJhc2VkIG9uIHNwZWNpZXMgZmxhZ3MgYW5kIGNhcHR1cmVfcmF0ZVxyXG5mdW5jdGlvbiBjbGFzc2lmeVJhcml0eShzcGVjaWVzOiBhbnkpOiBTcGF3blJhcml0eSB7XHJcbiAgaWYgKHNwZWNpZXM/LmlzX2xlZ2VuZGFyeSB8fCBzcGVjaWVzPy5pc19teXRoaWNhbCkgcmV0dXJuIFwibGVnZW5kYXJ5XCI7XHJcbiAgY29uc3QgcmF0ZSA9IHNwZWNpZXM/LmNhcHR1cmVfcmF0ZSA/PyA0NTsgLy8gMC0yNTUgaGlnaGVyID0gZWFzaWVyXHJcbiAgaWYgKHJhdGUgPj0gMTQwKSByZXR1cm4gXCJjb21tb25cIjsgLy8gZWFzeSB0byBjYXRjaFxyXG4gIGlmIChyYXRlID49IDcwKSByZXR1cm4gXCJyYXJlXCI7XHJcbiAgcmV0dXJuIFwibGVnZW5kYXJ5XCI7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTcGF3bk1hbmFnZXIgZXh0ZW5kcyBQaGFzZXIuRXZlbnRzLkV2ZW50RW1pdHRlciB7XHJcbiAgcHJpdmF0ZSBzY2VuZTogUGhhc2VyLlNjZW5lO1xyXG4gIHByaXZhdGUgdGlsZVNpemU6IG51bWJlcjtcclxuICBwcml2YXRlIG1hcFdpZHRoVGlsZXM6IG51bWJlcjtcclxuICBwcml2YXRlIG1hcEhlaWdodFRpbGVzOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSB6b25lczogUmV0dXJuVHlwZTx0eXBlb2YgZ2VuZXJhdGVab25lcz4gPSBbXTtcclxuICBwcml2YXRlIHpvbmVDb2xzID0gMDtcclxuICBwcml2YXRlIHpvbmVSb3dzID0gMDtcclxuICBwcml2YXRlIGFjdGl2ZTogTWFwPHN0cmluZywgU3Bhd25SZWNvcmQ+ID0gbmV3IE1hcCgpO1xyXG4gIHByaXZhdGUgY3VycmVudFpvbmUgPSB7IGNvbDogMCwgcm93OiAwLCBpZDogXCIwLDBcIiB9O1xyXG4gIHByaXZhdGUgc3Bhd25UaW1lcj86IFBoYXNlci5UaW1lLlRpbWVyRXZlbnQ7XHJcbiAgcHJpdmF0ZSBvdmVycmlkZVR5cGVzOiBzdHJpbmdbXSB8IG51bGwgPSBudWxsO1xyXG5cclxuICBjb25zdHJ1Y3RvcihzY2VuZTogUGhhc2VyLlNjZW5lLCB0aWxlU2l6ZTogbnVtYmVyLCBtYXBXaWR0aFRpbGVzOiBudW1iZXIsIG1hcEhlaWdodFRpbGVzOiBudW1iZXIpIHtcclxuICAgIHN1cGVyKCk7XHJcbiAgICB0aGlzLnNjZW5lID0gc2NlbmU7XHJcbiAgICB0aGlzLnRpbGVTaXplID0gdGlsZVNpemU7XHJcbiAgICB0aGlzLm1hcFdpZHRoVGlsZXMgPSBtYXBXaWR0aFRpbGVzO1xyXG4gICAgdGhpcy5tYXBIZWlnaHRUaWxlcyA9IG1hcEhlaWdodFRpbGVzO1xyXG5cclxuICAgIHRoaXMuem9uZUNvbHMgPSBNYXRoLm1heCgxLCBNYXRoLmZsb29yKG1hcFdpZHRoVGlsZXMgLyBaT05FX1RJTEVTKSk7XHJcbiAgICB0aGlzLnpvbmVSb3dzID0gTWF0aC5tYXgoMSwgTWF0aC5mbG9vcihtYXBIZWlnaHRUaWxlcyAvIFpPTkVfVElMRVMpKTtcclxuICAgIHRoaXMuem9uZXMgPSBnZW5lcmF0ZVpvbmVzKHRoaXMuem9uZUNvbHMsIHRoaXMuem9uZVJvd3MpO1xyXG4gIH1cclxuXHJcbiAgZ2V0QWN0aXZlU3Bhd25zKCkgeyByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmFjdGl2ZS52YWx1ZXMoKSk7IH1cclxuICBnZXRab25lR3JpZCgpIHsgcmV0dXJuIHsgY29sczogdGhpcy56b25lQ29scywgcm93czogdGhpcy56b25lUm93cywgem9uZXM6IHRoaXMuem9uZXMgfTsgfVxyXG4gIGdldEN1cnJlbnRab25lKCkgeyByZXR1cm4gdGhpcy5jdXJyZW50Wm9uZTsgfVxyXG4gIHNldE92ZXJyaWRlVHlwZXModHlwZXM6IHN0cmluZ1tdIHwgbnVsbCkgeyB0aGlzLm92ZXJyaWRlVHlwZXMgPSB0eXBlczsgdGhpcy50b3BVcFNwYXducyh0cnVlKTsgfVxyXG5cclxuICB1cGRhdGVQbGF5ZXJQb3MoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgIGNvbnN0IHR4ID0gTWF0aC5mbG9vcih4IC8gdGhpcy50aWxlU2l6ZSk7XHJcbiAgICBjb25zdCB0eSA9IE1hdGguZmxvb3IoeSAvIHRoaXMudGlsZVNpemUpO1xyXG4gICAgY29uc3QgeiA9IGdldFpvbmVGb3JUaWxlKHR4LCB0eSwgdGhpcy56b25lQ29scywgdGhpcy56b25lUm93cyk7XHJcbiAgICBpZiAoei5pZCAhPT0gdGhpcy5jdXJyZW50Wm9uZS5pZCkge1xyXG4gICAgICB0aGlzLmN1cnJlbnRab25lID0gejtcclxuICAgICAgdGhpcy5lbWl0KFwiem9uZUNoYW5nZWRcIiwgeik7XHJcbiAgICAgIC8vIG9uIHpvbmUgY2hhbmdlLCB0cnkgdG8gdG9wIHVwIHNwYXducyBpbW1lZGlhdGVseVxyXG4gICAgICB0aGlzLnRvcFVwU3Bhd25zKHRydWUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc3RhcnQoKSB7XHJcbiAgICB0aGlzLnRvcFVwU3Bhd25zKHRydWUpO1xyXG4gICAgdGhpcy5zcGF3blRpbWVyPy5yZW1vdmUoZmFsc2UpO1xyXG4gICAgY29uc3Qgc2NoZWR1bGVOZXh0ID0gKCkgPT4ge1xyXG4gICAgICBjb25zdCBkZWxheSA9IFBoYXNlci5NYXRoLkJldHdlZW4oMjAwMDAsIDQwMDAwKTtcclxuICAgICAgdGhpcy5zcGF3blRpbWVyID0gdGhpcy5zY2VuZS50aW1lLmFkZEV2ZW50KHsgZGVsYXksIGxvb3A6IGZhbHNlLCBjYWxsYmFjazogKCkgPT4ge1xyXG4gICAgICAgIHRoaXMudG9wVXBTcGF3bnMoZmFsc2UpO1xyXG4gICAgICAgIHNjaGVkdWxlTmV4dCgpO1xyXG4gICAgICB9fSk7XHJcbiAgICB9O1xyXG4gICAgc2NoZWR1bGVOZXh0KCk7XHJcbiAgfVxyXG5cclxuICBzdG9wKCkge1xyXG4gICAgdGhpcy5zcGF3blRpbWVyPy5yZW1vdmUoZmFsc2UpO1xyXG4gICAgdGhpcy5hY3RpdmUuZm9yRWFjaChyID0+IHRoaXMuZGVzcGF3bihyLmtleSkpO1xyXG4gICAgdGhpcy5hY3RpdmUuY2xlYXIoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYXN5bmMgdG9wVXBTcGF3bnMoaW1tZWRpYXRlOiBib29sZWFuKSB7XHJcbiAgICBpZiAodGhpcy5hY3RpdmUuc2l6ZSA+PSBNQVhfQUNUSVZFKSByZXR1cm47XHJcbiAgICBjb25zdCBuZWVkID0gTWF0aC5taW4oTUFYX0FDVElWRSAtIHRoaXMuYWN0aXZlLnNpemUsIDIpOyAvLyBzcGF3biB1cCB0byAyIGF0IGEgdGltZVxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZWVkOyBpKyspIHtcclxuICAgICAgdHJ5IHsgYXdhaXQgdGhpcy5zcGF3bk9uZSgpOyB9IGNhdGNoIHsgLyogaWdub3JlIHRyYW5zaWVudCAqLyB9XHJcbiAgICAgIGlmICghaW1tZWRpYXRlKSBicmVhaztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0Q2FuZGlkYXRlWm9uZXMoKSB7XHJcbiAgICBjb25zdCBhcm91bmQgPSBnZXRBZGphY2VudFpvbmVDb29yZHModGhpcy5jdXJyZW50Wm9uZS5jb2wsIHRoaXMuY3VycmVudFpvbmUucm93LCB0aGlzLnpvbmVDb2xzLCB0aGlzLnpvbmVSb3dzLCAxKTtcclxuICAgIHJldHVybiBhcm91bmQ7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHBpY2tab25lQXJlYSh6b25lOiB7IGNvbDogbnVtYmVyOyByb3c6IG51bWJlciB9KSB7XHJcbiAgICBjb25zdCBzdGFydFggPSB6b25lLmNvbCAqIFpPTkVfVElMRVMgKiB0aGlzLnRpbGVTaXplO1xyXG4gICAgY29uc3Qgc3RhcnRZID0gem9uZS5yb3cgKiBaT05FX1RJTEVTICogdGhpcy50aWxlU2l6ZTtcclxuICAgIGNvbnN0IGVuZFggPSBzdGFydFggKyBaT05FX1RJTEVTICogdGhpcy50aWxlU2l6ZTtcclxuICAgIGNvbnN0IGVuZFkgPSBzdGFydFkgKyBaT05FX1RJTEVTICogdGhpcy50aWxlU2l6ZTtcclxuICAgIHJldHVybiB7IHN0YXJ0WCwgc3RhcnRZLCBlbmRYLCBlbmRZIH07XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGFzeW5jIHNwYXduT25lKCkge1xyXG4gICAgY29uc3Qgem9uZXMgPSB0aGlzLmdldENhbmRpZGF0ZVpvbmVzKCk7XHJcbiAgICBjb25zdCBwaWNrZWQgPSBQaGFzZXIuVXRpbHMuQXJyYXkuR2V0UmFuZG9tKHpvbmVzKTtcclxuICAgIGNvbnN0IHpvbmVNZXRhID0gdGhpcy56b25lcy5maW5kKHogPT4gei5pZCA9PT0gcGlja2VkLmlkKSE7XHJcbiAgICBjb25zdCBiaW9tZTogQmlvbWUgPSB6b25lTWV0YS5iaW9tZSBhcyBhbnk7XHJcbiAgICBjb25zdCB0eXBlcyA9IHRoaXMub3ZlcnJpZGVUeXBlcyB8fCBCSU9NRV9UWVBFX1BPT0xTW2Jpb21lXTtcclxuXHJcbiAgICAvLyByYXJpdHkgdGFyZ2V0XHJcbiAgICBjb25zdCB0YXJnZXQgPSBwaWNrUmFyaXR5KCk7XHJcblxyXG4gICAgLy8gVHJ5IHNldmVyYWwgcmFuZG9tIGlkcyB1bnRpbCB3ZSBmaW5kIG9uZSB0aGF0IG1hdGNoZXMgYmlvbWUgKyByYXJpdHlcclxuICAgIGxldCBjaG9zZW46IHsgaWQ6IG51bWJlcjsgbmFtZTogc3RyaW5nOyBzcHJpdGVVcmw6IHN0cmluZzsgdHlwZXM6IHN0cmluZ1tdIH0gfCBudWxsID0gbnVsbDtcclxuICAgIGZvciAobGV0IHRyaWVzID0gMDsgdHJpZXMgPCAxMjsgdHJpZXMrKykge1xyXG4gICAgICBjb25zdCBpZCA9IFBoYXNlci5NYXRoLkJldHdlZW4oMSwgODk4KTtcclxuICAgICAgY29uc3QgcCA9IGF3YWl0IGZldGNoUG9rZW1vbihpZCk7XHJcbiAgICAgIGlmICghcC5zcHJpdGVVcmwpIGNvbnRpbnVlO1xyXG4gICAgICBpZiAoIXAudHlwZXMuc29tZSh0ID0+IHR5cGVzLmluY2x1ZGVzKHQpKSkgY29udGludWU7IC8vIG5vdCBtYXRjaGluZyBiaW9tZVxyXG4gICAgICBjb25zdCBzcGVjaWVzID0gYXdhaXQgZmV0Y2hTcGVjaWVzKGlkKTtcclxuICAgICAgY29uc3QgciA9IGNsYXNzaWZ5UmFyaXR5KHNwZWNpZXMpO1xyXG4gICAgICBpZiAociAhPT0gdGFyZ2V0ICYmIE1hdGgucmFuZG9tKCkgPiAwLjM1KSBjb250aW51ZTsgLy8gYWxsb3cgc29tZSBibGVlZC1vdmVyIHNvIHdlIGRvbid0IGxvb3AgZm9yZXZlclxyXG4gICAgICBjaG9zZW4gPSB7IGlkLCBuYW1lOiBwLm5hbWUsIHNwcml0ZVVybDogcC5zcHJpdGVVcmwsIHR5cGVzOiBwLnR5cGVzIH07XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgfVxyXG4gICAgaWYgKCFjaG9zZW4pIHJldHVybjtcclxuXHJcbiAgICBjb25zdCBhcmVhID0gdGhpcy5waWNrWm9uZUFyZWEocGlja2VkKTtcclxuICAgIGNvbnN0IHggPSBQaGFzZXIuTWF0aC5CZXR3ZWVuKGFyZWEuc3RhcnRYICsgMTIsIGFyZWEuZW5kWCAtIDEyKTtcclxuICAgIGNvbnN0IHkgPSBQaGFzZXIuTWF0aC5CZXR3ZWVuKGFyZWEuc3RhcnRZICsgMTIsIGFyZWEuZW5kWSAtIDEyKTtcclxuXHJcbiAgICBjb25zdCBrZXkgPSBgc3Bhd24tJHtjaG9zZW4uaWR9LSR7RGF0ZS5ub3coKX1gO1xyXG4gICAgY29uc3Qgc3ByaXRlID0gdGhpcy5zY2VuZS5hZGQuaW1hZ2UoeCwgeSwgYHBrbW4tJHtjaG9zZW4uaWR9YCkuc2V0VmlzaWJsZShmYWxzZSk7XHJcbiAgICBpZiAoIXRoaXMuc2NlbmUudGV4dHVyZXMuZXhpc3RzKGBwa21uLSR7Y2hvc2VuLmlkfWApKSB7XHJcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgdGhpcy5zY2VuZS5sb2FkLm9uY2UoUGhhc2VyLkxvYWRlci5FdmVudHMuQ09NUExFVEUsICgpID0+IHJlc29sdmUoKSk7XHJcbiAgICAgICAgdGhpcy5zY2VuZS5sb2FkLmltYWdlKGBwa21uLSR7Y2hvc2VuLmlkfWAsIGNob3NlbiEuc3ByaXRlVXJsKTtcclxuICAgICAgICB0aGlzLnNjZW5lLmxvYWQuc3RhcnQoKTtcclxuICAgICAgfSk7XHJcbiAgICAgIHNwcml0ZS5zZXRUZXh0dXJlKGBwa21uLSR7Y2hvc2VuLmlkfWApO1xyXG4gICAgfVxyXG5cclxuICAgIHNwcml0ZS5zZXREZXB0aCgyMCkuc2V0SW50ZXJhY3RpdmUoeyB1c2VIYW5kQ3Vyc29yOiB0cnVlIH0pO1xyXG4gICAgc3ByaXRlLnNldFNjYWxlKDAuMSkuc2V0QWxwaGEoMCk7XHJcbiAgICBzcHJpdGUub24oXCJwb2ludGVyZG93blwiLCAoKSA9PiB0aGlzLmVtaXQoXCJzcGF3bkNsaWNrZWRcIiwga2V5KSk7XHJcblxyXG4gICAgLy8gZW1lcmdlIGFuaW1hdGlvblxyXG4gICAgc3ByaXRlLnNldFZpc2libGUodHJ1ZSk7XHJcbiAgICB0aGlzLnNjZW5lLnR3ZWVucy5hZGQoeyB0YXJnZXRzOiBzcHJpdGUsIGFscGhhOiAxLCBzY2FsZTogMS4yLCBkdXJhdGlvbjogMzAwLCB5b3lvOiB0cnVlLCBlYXNlOiBcInNpbmUub3V0XCIsIG9uQ29tcGxldGU6ICgpID0+IHNwcml0ZS5zZXRTY2FsZSgxKSB9KTtcclxuXHJcbiAgICBjb25zdCByZWM6IFNwYXduUmVjb3JkID0ge1xyXG4gICAgICBrZXksXHJcbiAgICAgIG5hbWU6IGNob3Nlbi5uYW1lLFxyXG4gICAgICBwb2tlSWQ6IGNob3Nlbi5pZCxcclxuICAgICAgdHlwZXM6IGNob3Nlbi50eXBlcyxcclxuICAgICAgc3ByaXRlVXJsOiBjaG9zZW4uc3ByaXRlVXJsLFxyXG4gICAgICBwb3NpdGlvbjogeyB4LCB5IH0sXHJcbiAgICAgIHpvbmU6IHBpY2tlZCxcclxuICAgICAgc3ByaXRlLFxyXG4gICAgfTtcclxuXHJcbiAgICAvLyBkZXNwYXduIGFmdGVyIDYwcyB3aXRoIGZhZGUgb3V0XHJcbiAgICByZWMudGltZW91dCA9IHRoaXMuc2NlbmUudGltZS5kZWxheWVkQ2FsbCg2MDAwMCwgKCkgPT4gdGhpcy5kZXNwYXduKGtleSkpO1xyXG5cclxuICAgIHRoaXMuYWN0aXZlLnNldChrZXksIHJlYyk7XHJcbiAgICB0aGlzLmVtaXQoXCJzcGF3bmVkXCIsIHJlYyk7XHJcbiAgfVxyXG5cclxuICBkZXNwYXduKGtleTogc3RyaW5nKSB7XHJcbiAgICBjb25zdCByZWMgPSB0aGlzLmFjdGl2ZS5nZXQoa2V5KTtcclxuICAgIGlmICghcmVjKSByZXR1cm47XHJcbiAgICBpZiAocmVjLnRpbWVvdXQpIHJlYy50aW1lb3V0LnJlbW92ZShmYWxzZSk7XHJcbiAgICBpZiAocmVjLnNwcml0ZSkge1xyXG4gICAgICB0aGlzLnNjZW5lLnR3ZWVucy5hZGQoeyB0YXJnZXRzOiByZWMuc3ByaXRlLCBhbHBoYTogMCwgZHVyYXRpb246IDQwMCwgb25Db21wbGV0ZTogKCkgPT4gcmVjLnNwcml0ZT8uZGVzdHJveSgpIH0pO1xyXG4gICAgfVxyXG4gICAgdGhpcy5lbWl0KFwiZGVzcGF3bmVkXCIsIGtleSk7XHJcbiAgICB0aGlzLmFjdGl2ZS5kZWxldGUoa2V5KTtcclxuICB9XHJcbn1cclxuIl0sIm5hbWVzIjpbIlBoYXNlciIsIkJJT01FX1RZUEVfUE9PTFMiLCJaT05FX1RJTEVTIiwiZ2VuZXJhdGVab25lcyIsImdldEFkamFjZW50Wm9uZUNvb3JkcyIsImdldFpvbmVGb3JUaWxlIiwiTUFYX0FDVElWRSIsIlJBUklUWV9XRUlHSFRTIiwiY29tbW9uIiwicmFyZSIsImxlZ2VuZGFyeSIsInBpY2tSYXJpdHkiLCJyIiwiTWF0aCIsInJhbmRvbSIsImZldGNoUG9rZW1vbiIsInBva2VJZCIsInJlcyIsImZldGNoIiwiZGF0YSIsImpzb24iLCJ0eXBlcyIsIm1hcCIsInQiLCJ0eXBlIiwibmFtZSIsInNwcml0ZVVybCIsInNwcml0ZXMiLCJmcm9udF9kZWZhdWx0Iiwib3RoZXIiLCJmZXRjaFNwZWNpZXMiLCJjbGFzc2lmeVJhcml0eSIsInNwZWNpZXMiLCJpc19sZWdlbmRhcnkiLCJpc19teXRoaWNhbCIsInJhdGUiLCJjYXB0dXJlX3JhdGUiLCJTcGF3bk1hbmFnZXIiLCJFdmVudHMiLCJFdmVudEVtaXR0ZXIiLCJzY2VuZSIsInRpbGVTaXplIiwibWFwV2lkdGhUaWxlcyIsIm1hcEhlaWdodFRpbGVzIiwiem9uZXMiLCJ6b25lQ29scyIsInpvbmVSb3dzIiwiYWN0aXZlIiwiTWFwIiwiY3VycmVudFpvbmUiLCJjb2wiLCJyb3ciLCJpZCIsIm92ZXJyaWRlVHlwZXMiLCJtYXgiLCJmbG9vciIsImdldEFjdGl2ZVNwYXducyIsIkFycmF5IiwiZnJvbSIsInZhbHVlcyIsImdldFpvbmVHcmlkIiwiY29scyIsInJvd3MiLCJnZXRDdXJyZW50Wm9uZSIsInNldE92ZXJyaWRlVHlwZXMiLCJ0b3BVcFNwYXducyIsInVwZGF0ZVBsYXllclBvcyIsIngiLCJ5IiwidHgiLCJ0eSIsInoiLCJlbWl0Iiwic3RhcnQiLCJzcGF3blRpbWVyIiwicmVtb3ZlIiwic2NoZWR1bGVOZXh0IiwiZGVsYXkiLCJCZXR3ZWVuIiwidGltZSIsImFkZEV2ZW50IiwibG9vcCIsImNhbGxiYWNrIiwic3RvcCIsImZvckVhY2giLCJkZXNwYXduIiwia2V5IiwiY2xlYXIiLCJpbW1lZGlhdGUiLCJzaXplIiwibmVlZCIsIm1pbiIsImkiLCJzcGF3bk9uZSIsImdldENhbmRpZGF0ZVpvbmVzIiwiYXJvdW5kIiwicGlja1pvbmVBcmVhIiwiem9uZSIsInN0YXJ0WCIsInN0YXJ0WSIsImVuZFgiLCJlbmRZIiwicGlja2VkIiwiVXRpbHMiLCJHZXRSYW5kb20iLCJ6b25lTWV0YSIsImZpbmQiLCJiaW9tZSIsInRhcmdldCIsImNob3NlbiIsInRyaWVzIiwicCIsInNvbWUiLCJpbmNsdWRlcyIsImFyZWEiLCJEYXRlIiwibm93Iiwic3ByaXRlIiwiYWRkIiwiaW1hZ2UiLCJzZXRWaXNpYmxlIiwidGV4dHVyZXMiLCJleGlzdHMiLCJQcm9taXNlIiwicmVzb2x2ZSIsImxvYWQiLCJvbmNlIiwiTG9hZGVyIiwiQ09NUExFVEUiLCJzZXRUZXh0dXJlIiwic2V0RGVwdGgiLCJzZXRJbnRlcmFjdGl2ZSIsInVzZUhhbmRDdXJzb3IiLCJzZXRTY2FsZSIsInNldEFscGhhIiwib24iLCJ0d2VlbnMiLCJ0YXJnZXRzIiwiYWxwaGEiLCJzY2FsZSIsImR1cmF0aW9uIiwieW95byIsImVhc2UiLCJvbkNvbXBsZXRlIiwicmVjIiwicG9zaXRpb24iLCJ0aW1lb3V0IiwiZGVsYXllZENhbGwiLCJzZXQiLCJnZXQiLCJkZXN0cm95IiwiZGVsZXRlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(pages-dir-node)/./lib/spawnUtils.ts\n");

/***/ })

};
;