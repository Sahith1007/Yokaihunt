"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_pages-dir-node_components_Game_tsx";
exports.ids = ["_pages-dir-node_components_Game_tsx"];
exports.modules = {

/***/ "(pages-dir-node)/./components/Game.tsx":
/*!*****************************!*\
  !*** ./components/Game.tsx ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Game)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! phaser */ \"phaser\");\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(phaser__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"react\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _lib_phaser_GameScene__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/phaser/GameScene */ \"(pages-dir-node)/./lib/phaser/GameScene.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_phaser_GameScene__WEBPACK_IMPORTED_MODULE_3__]);\n_lib_phaser_GameScene__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/* __next_internal_client_entry_do_not_use__ default auto */ \n\n\n\nfunction Game({ width = 800, height = 600, className = \"\", tileSize = 32, mapWidth = 50, mapHeight = 38, playerSpeed = 200, initialX, initialY }) {\n    const gameRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const phaserGameRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"Game.useEffect\": ()=>{\n            if (!gameRef.current) return;\n            const config = {\n                type: phaser__WEBPACK_IMPORTED_MODULE_1__.AUTO,\n                width,\n                height,\n                parent: gameRef.current,\n                backgroundColor: \"#2c3e50\",\n                physics: {\n                    default: \"arcade\",\n                    arcade: {\n                        gravity: {\n                            x: 0,\n                            y: 0\n                        },\n                        debug: false\n                    }\n                },\n                scene: _lib_phaser_GameScene__WEBPACK_IMPORTED_MODULE_3__.GameScene,\n                scale: {\n                    mode: phaser__WEBPACK_IMPORTED_MODULE_1__.Scale.FIT,\n                    autoCenter: phaser__WEBPACK_IMPORTED_MODULE_1__.Scale.CENTER_BOTH\n                }\n            };\n            phaserGameRef.current = new phaser__WEBPACK_IMPORTED_MODULE_1__.Game(config);\n            const startOrRestart = {\n                \"Game.useEffect.startOrRestart\": ()=>{\n                    const game = phaserGameRef.current;\n                    const data = {\n                        tileSize,\n                        mapWidth,\n                        mapHeight,\n                        playerSpeed,\n                        initialX,\n                        initialY\n                    };\n                    const mgr = game.scene;\n                    if (mgr.isActive(\"GameScene\")) mgr.restart(\"GameScene\", data);\n                    else mgr.start(\"GameScene\", data);\n                }\n            }[\"Game.useEffect.startOrRestart\"];\n            if (phaserGameRef.current.isBooted) startOrRestart();\n            else phaserGameRef.current.events.once(phaser__WEBPACK_IMPORTED_MODULE_1__.Core.Events.READY, startOrRestart);\n            return ({\n                \"Game.useEffect\": ()=>{\n                    if (phaserGameRef.current) {\n                        phaserGameRef.current.destroy(true);\n                        phaserGameRef.current = null;\n                    }\n                }\n            })[\"Game.useEffect\"];\n        }\n    }[\"Game.useEffect\"], [\n        width,\n        height,\n        tileSize,\n        mapWidth,\n        mapHeight,\n        playerSpeed,\n        initialX,\n        initialY\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: gameRef,\n        className: `game-container ${className}`,\n        style: {\n            width: \"100%\",\n            height: \"100%\",\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\"\n        }\n    }, void 0, false, {\n        fileName: \"C:\\\\Users\\\\Sahith\\\\OneDrive\\\\Desktop\\\\yokaihunt\\\\frontend\\\\components\\\\Game.tsx\",\n        lineNumber: 85,\n        columnNumber: 5\n    }, this);\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHBhZ2VzLWRpci1ub2RlKS8uL2NvbXBvbmVudHMvR2FtZS50c3giLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBRWlDO0FBQ1M7QUFDVTtBQWNyQyxTQUFTSSxLQUFLLEVBQzNCQyxRQUFRLEdBQUcsRUFDWEMsU0FBUyxHQUFHLEVBQ1pDLFlBQVksRUFBRSxFQUNkQyxXQUFXLEVBQUUsRUFDYkMsV0FBVyxFQUFFLEVBQ2JDLFlBQVksRUFBRSxFQUNkQyxjQUFjLEdBQUcsRUFDakJDLFFBQVEsRUFDUkMsUUFBUSxFQUNFO0lBQ1YsTUFBTUMsVUFBVVosNkNBQU1BLENBQWlCO0lBQ3ZDLE1BQU1hLGdCQUFnQmIsNkNBQU1BLENBQXFCO0lBRWpERCxnREFBU0E7MEJBQUM7WUFDUixJQUFJLENBQUNhLFFBQVFFLE9BQU8sRUFBRTtZQUV0QixNQUFNQyxTQUF1QztnQkFDM0NDLE1BQU1sQix3Q0FBVztnQkFDakJLO2dCQUNBQztnQkFDQWMsUUFBUU4sUUFBUUUsT0FBTztnQkFDdkJLLGlCQUFpQjtnQkFDakJDLFNBQVM7b0JBQ1BDLFNBQVM7b0JBQ1RDLFFBQVE7d0JBQ05DLFNBQVM7NEJBQUVDLEdBQUc7NEJBQUdDLEdBQUc7d0JBQUU7d0JBQ3RCQyxPQUFPO29CQUNUO2dCQUNGO2dCQUNBQyxPQUFPMUIsNERBQVNBO2dCQUNoQjJCLE9BQU87b0JBQ0xDLE1BQU0vQix5Q0FBWSxDQUFDaUMsR0FBRztvQkFDdEJDLFlBQVlsQyx5Q0FBWSxDQUFDbUMsV0FBVztnQkFDdEM7WUFDRjtZQUVBcEIsY0FBY0MsT0FBTyxHQUFHLElBQUloQix3Q0FBVyxDQUFDaUI7WUFFeEMsTUFBTW1CO2lEQUFpQjtvQkFDckIsTUFBTUMsT0FBT3RCLGNBQWNDLE9BQU87b0JBQ2xDLE1BQU1zQixPQUFPO3dCQUNYOUI7d0JBQ0FDO3dCQUNBQzt3QkFDQUM7d0JBQ0FDO3dCQUNBQztvQkFDRjtvQkFDQSxNQUFNMEIsTUFBTUYsS0FBS1IsS0FBSztvQkFDdEIsSUFBSVUsSUFBSUMsUUFBUSxDQUFDLGNBQWNELElBQUlFLE9BQU8sQ0FBQyxhQUFhSDt5QkFDbkRDLElBQUlHLEtBQUssQ0FBQyxhQUFhSjtnQkFDOUI7O1lBRUEsSUFBSXZCLGNBQWNDLE9BQU8sQ0FBQzJCLFFBQVEsRUFBRVA7aUJBQy9CckIsY0FBY0MsT0FBTyxDQUFDNEIsTUFBTSxDQUFDQyxJQUFJLENBQUM3Qyx3Q0FBVyxDQUFDK0MsTUFBTSxDQUFDQyxLQUFLLEVBQUVaO1lBRWpFO2tDQUFPO29CQUNMLElBQUlyQixjQUFjQyxPQUFPLEVBQUU7d0JBQ3pCRCxjQUFjQyxPQUFPLENBQUNpQyxPQUFPLENBQUM7d0JBQzlCbEMsY0FBY0MsT0FBTyxHQUFHO29CQUMxQjtnQkFDRjs7UUFDRjt5QkFBRztRQUFDWDtRQUFPQztRQUFRRTtRQUFVQztRQUFVQztRQUFXQztRQUFhQztRQUFVQztLQUFTO0lBRWxGLHFCQUNFLDhEQUFDcUM7UUFDQ0MsS0FBS3JDO1FBQ0xQLFdBQVcsQ0FBQyxlQUFlLEVBQUVBLFdBQVc7UUFDeEM2QyxPQUFPO1lBQUUvQyxPQUFPO1lBQVFDLFFBQVE7WUFBUStDLFNBQVM7WUFBUUMsZ0JBQWdCO1lBQVVDLFlBQVk7UUFBUzs7Ozs7O0FBRzlHIiwic291cmNlcyI6WyJDOlxcVXNlcnNcXFNhaGl0aFxcT25lRHJpdmVcXERlc2t0b3BcXHlva2FpaHVudFxcZnJvbnRlbmRcXGNvbXBvbmVudHNcXEdhbWUudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIGNsaWVudFwiO1xyXG5cclxuaW1wb3J0ICogYXMgUGhhc2VyIGZyb20gXCJwaGFzZXJcIjtcclxuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgR2FtZVNjZW5lIH0gZnJvbSBcIi4uL2xpYi9waGFzZXIvR2FtZVNjZW5lXCI7XHJcblxyXG5pbnRlcmZhY2UgR2FtZVByb3BzIHtcclxuICB3aWR0aD86IG51bWJlcjtcclxuICBoZWlnaHQ/OiBudW1iZXI7XHJcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xyXG4gIHRpbGVTaXplPzogbnVtYmVyO1xyXG4gIG1hcFdpZHRoPzogbnVtYmVyO1xyXG4gIG1hcEhlaWdodD86IG51bWJlcjtcclxuICBwbGF5ZXJTcGVlZD86IG51bWJlcjtcclxuICBpbml0aWFsWD86IG51bWJlcjtcclxuICBpbml0aWFsWT86IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gR2FtZSh7XHJcbiAgd2lkdGggPSA4MDAsXHJcbiAgaGVpZ2h0ID0gNjAwLFxyXG4gIGNsYXNzTmFtZSA9IFwiXCIsXHJcbiAgdGlsZVNpemUgPSAzMixcclxuICBtYXBXaWR0aCA9IDUwLFxyXG4gIG1hcEhlaWdodCA9IDM4LFxyXG4gIHBsYXllclNwZWVkID0gMjAwLFxyXG4gIGluaXRpYWxYLFxyXG4gIGluaXRpYWxZLFxyXG59OiBHYW1lUHJvcHMpIHtcclxuICBjb25zdCBnYW1lUmVmID0gdXNlUmVmPEhUTUxEaXZFbGVtZW50PihudWxsKTtcclxuICBjb25zdCBwaGFzZXJHYW1lUmVmID0gdXNlUmVmPFBoYXNlci5HYW1lIHwgbnVsbD4obnVsbCk7XHJcblxyXG4gIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICBpZiAoIWdhbWVSZWYuY3VycmVudCkgcmV0dXJuO1xyXG5cclxuICAgIGNvbnN0IGNvbmZpZzogUGhhc2VyLlR5cGVzLkNvcmUuR2FtZUNvbmZpZyA9IHtcclxuICAgICAgdHlwZTogUGhhc2VyLkFVVE8sXHJcbiAgICAgIHdpZHRoLFxyXG4gICAgICBoZWlnaHQsXHJcbiAgICAgIHBhcmVudDogZ2FtZVJlZi5jdXJyZW50LFxyXG4gICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiIzJjM2U1MFwiLFxyXG4gICAgICBwaHlzaWNzOiB7XHJcbiAgICAgICAgZGVmYXVsdDogXCJhcmNhZGVcIixcclxuICAgICAgICBhcmNhZGU6IHtcclxuICAgICAgICAgIGdyYXZpdHk6IHsgeDogMCwgeTogMCB9LFxyXG4gICAgICAgICAgZGVidWc6IGZhbHNlLFxyXG4gICAgICAgIH0sXHJcbiAgICAgIH0sXHJcbiAgICAgIHNjZW5lOiBHYW1lU2NlbmUsXHJcbiAgICAgIHNjYWxlOiB7XHJcbiAgICAgICAgbW9kZTogUGhhc2VyLlNjYWxlLkZJVCxcclxuICAgICAgICBhdXRvQ2VudGVyOiBQaGFzZXIuU2NhbGUuQ0VOVEVSX0JPVEgsXHJcbiAgICAgIH0sXHJcbiAgICB9O1xyXG5cclxuICAgIHBoYXNlckdhbWVSZWYuY3VycmVudCA9IG5ldyBQaGFzZXIuR2FtZShjb25maWcpO1xyXG5cclxuICAgIGNvbnN0IHN0YXJ0T3JSZXN0YXJ0ID0gKCkgPT4ge1xyXG4gICAgICBjb25zdCBnYW1lID0gcGhhc2VyR2FtZVJlZi5jdXJyZW50IGFzIFBoYXNlci5HYW1lO1xyXG4gICAgICBjb25zdCBkYXRhID0ge1xyXG4gICAgICAgIHRpbGVTaXplLFxyXG4gICAgICAgIG1hcFdpZHRoLFxyXG4gICAgICAgIG1hcEhlaWdodCxcclxuICAgICAgICBwbGF5ZXJTcGVlZCxcclxuICAgICAgICBpbml0aWFsWCxcclxuICAgICAgICBpbml0aWFsWSxcclxuICAgICAgfTtcclxuICAgICAgY29uc3QgbWdyID0gZ2FtZS5zY2VuZTtcclxuICAgICAgaWYgKG1nci5pc0FjdGl2ZShcIkdhbWVTY2VuZVwiKSkgbWdyLnJlc3RhcnQoXCJHYW1lU2NlbmVcIiwgZGF0YSk7XHJcbiAgICAgIGVsc2UgbWdyLnN0YXJ0KFwiR2FtZVNjZW5lXCIsIGRhdGEpO1xyXG4gICAgfTtcclxuXHJcbiAgICBpZiAocGhhc2VyR2FtZVJlZi5jdXJyZW50LmlzQm9vdGVkKSBzdGFydE9yUmVzdGFydCgpO1xyXG4gICAgZWxzZSBwaGFzZXJHYW1lUmVmLmN1cnJlbnQuZXZlbnRzLm9uY2UoUGhhc2VyLkNvcmUuRXZlbnRzLlJFQURZLCBzdGFydE9yUmVzdGFydCk7XHJcblxyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgaWYgKHBoYXNlckdhbWVSZWYuY3VycmVudCkge1xyXG4gICAgICAgIHBoYXNlckdhbWVSZWYuY3VycmVudC5kZXN0cm95KHRydWUpO1xyXG4gICAgICAgIHBoYXNlckdhbWVSZWYuY3VycmVudCA9IG51bGw7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfSwgW3dpZHRoLCBoZWlnaHQsIHRpbGVTaXplLCBtYXBXaWR0aCwgbWFwSGVpZ2h0LCBwbGF5ZXJTcGVlZCwgaW5pdGlhbFgsIGluaXRpYWxZXSk7XHJcblxyXG4gIHJldHVybiAoXHJcbiAgICA8ZGl2XHJcbiAgICAgIHJlZj17Z2FtZVJlZn1cclxuICAgICAgY2xhc3NOYW1lPXtgZ2FtZS1jb250YWluZXIgJHtjbGFzc05hbWV9YH1cclxuICAgICAgc3R5bGU9e3sgd2lkdGg6IFwiMTAwJVwiLCBoZWlnaHQ6IFwiMTAwJVwiLCBkaXNwbGF5OiBcImZsZXhcIiwganVzdGlmeUNvbnRlbnQ6IFwiY2VudGVyXCIsIGFsaWduSXRlbXM6IFwiY2VudGVyXCIgfX1cclxuICAgIC8+XHJcbiAgKTtcclxufSJdLCJuYW1lcyI6WyJQaGFzZXIiLCJ1c2VFZmZlY3QiLCJ1c2VSZWYiLCJHYW1lU2NlbmUiLCJHYW1lIiwid2lkdGgiLCJoZWlnaHQiLCJjbGFzc05hbWUiLCJ0aWxlU2l6ZSIsIm1hcFdpZHRoIiwibWFwSGVpZ2h0IiwicGxheWVyU3BlZWQiLCJpbml0aWFsWCIsImluaXRpYWxZIiwiZ2FtZVJlZiIsInBoYXNlckdhbWVSZWYiLCJjdXJyZW50IiwiY29uZmlnIiwidHlwZSIsIkFVVE8iLCJwYXJlbnQiLCJiYWNrZ3JvdW5kQ29sb3IiLCJwaHlzaWNzIiwiZGVmYXVsdCIsImFyY2FkZSIsImdyYXZpdHkiLCJ4IiwieSIsImRlYnVnIiwic2NlbmUiLCJzY2FsZSIsIm1vZGUiLCJTY2FsZSIsIkZJVCIsImF1dG9DZW50ZXIiLCJDRU5URVJfQk9USCIsInN0YXJ0T3JSZXN0YXJ0IiwiZ2FtZSIsImRhdGEiLCJtZ3IiLCJpc0FjdGl2ZSIsInJlc3RhcnQiLCJzdGFydCIsImlzQm9vdGVkIiwiZXZlbnRzIiwib25jZSIsIkNvcmUiLCJFdmVudHMiLCJSRUFEWSIsImRlc3Ryb3kiLCJkaXYiLCJyZWYiLCJzdHlsZSIsImRpc3BsYXkiLCJqdXN0aWZ5Q29udGVudCIsImFsaWduSXRlbXMiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(pages-dir-node)/./components/Game.tsx\n");

/***/ }),

/***/ "(pages-dir-node)/./lib/phaser/GameScene.ts":
/*!*********************************!*\
  !*** ./lib/phaser/GameScene.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GameScene: () => (/* binding */ GameScene)\n/* harmony export */ });\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! phaser */ \"phaser\");\n/* harmony import */ var phaser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(phaser__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! socket.io-client */ \"socket.io-client\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([socket_io_client__WEBPACK_IMPORTED_MODULE_1__]);\nsocket_io_client__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\nclass GameScene extends phaser__WEBPACK_IMPORTED_MODULE_0__.Scene {\n    constructor(){\n        super(\"GameScene\"), this.configData = {\n            tileSize: 32,\n            mapWidth: 50,\n            mapHeight: 38,\n            playerSpeed: 200\n        }, this.playerSpeed = 200, this.others = new Map(), this.lastSent = 0;\n    }\n    init(data) {\n        this.configData = {\n            ...this.configData,\n            ...data\n        };\n        if (this.configData.playerSpeed) this.playerSpeed = this.configData.playerSpeed;\n    }\n    preload() {\n        // Generate a simple 2-tile spritesheet (grass, wall) programmatically\n        const { tileSize } = this.configData;\n        const width = tileSize * 2;\n        const height = tileSize;\n        const sheet = this.textures.createCanvas(\"tilesheet\", width, height);\n        if (!sheet) {\n            throw new Error(\"Failed to create canvas texture 'tilesheet'\");\n        }\n        const ctx = sheet.getContext();\n        if (!ctx) {\n            throw new Error(\"Failed to get 2D rendering context from canvas 'tilesheet'\");\n        }\n        // Grass tile (index 0)\n        ctx.fillStyle = \"#2d6a4f\";\n        ctx.fillRect(0, 0, tileSize, tileSize);\n        // sprinkle dots\n        ctx.fillStyle = \"#40916c\";\n        for(let i = 0; i < 30; i++){\n            const x = Math.random() * (tileSize - 2);\n            const y = Math.random() * (tileSize - 2);\n            ctx.fillRect(x, y, 2, 2);\n        }\n        // Wall tile (index 1)\n        ctx.fillStyle = \"#6c757d\";\n        ctx.fillRect(tileSize, 0, tileSize, tileSize);\n        ctx.strokeStyle = \"#495057\";\n        for(let i = 0; i < tileSize; i += 4){\n            ctx.beginPath();\n            ctx.moveTo(tileSize, i + 0.5);\n            ctx.lineTo(tileSize * 2, i + 0.5);\n            ctx.stroke();\n        }\n        sheet.refresh();\n        // Generate a player texture (circle)\n        const g = this.make.graphics({\n            x: 0,\n            y: 0\n        });\n        g.fillStyle(0xffd166, 1);\n        g.fillCircle(tileSize / 2, tileSize / 2, tileSize * 0.4);\n        g.lineStyle(2, 0x073b4c, 1);\n        g.strokeCircle(tileSize / 2, tileSize / 2, tileSize * 0.4);\n        g.generateTexture(\"player\", tileSize, tileSize);\n        g.destroy();\n    }\n    create() {\n        const { tileSize, mapWidth, mapHeight } = this.configData;\n        // Create a blank tilemap and a dynamic layer using our generated spritesheet\n        const map = this.make.tilemap({\n            tileWidth: tileSize,\n            tileHeight: tileSize,\n            width: mapWidth,\n            height: mapHeight\n        });\n        const tileset = map.addTilesetImage(\"tiles\", \"tilesheet\", tileSize, tileSize, 0, 0);\n        if (!tileset) throw new Error(\"Failed to create tileset from tilesheet\");\n        const layer = map.createBlankLayer(\"ground\", tileset, 0, 0);\n        if (!layer) throw new Error(\"Failed to create blank ground layer\");\n        this.groundLayer = layer;\n        // Fill ground (index 0) and carve walls (index 1) along the border + a few random obstacles\n        this.groundLayer.fill(0, 0, 0, mapWidth, mapHeight);\n        for(let x = 0; x < mapWidth; x++){\n            this.groundLayer.putTileAt(1, x, 0);\n            this.groundLayer.putTileAt(1, x, mapHeight - 1);\n        }\n        for(let y = 0; y < mapHeight; y++){\n            this.groundLayer.putTileAt(1, 0, y);\n            this.groundLayer.putTileAt(1, mapWidth - 1, y);\n        }\n        // random obstacles\n        for(let i = 0; i < Math.floor(mapWidth * mapHeight * 0.05); i++){\n            const rx = phaser__WEBPACK_IMPORTED_MODULE_0__.Math.Between(1, mapWidth - 2);\n            const ry = phaser__WEBPACK_IMPORTED_MODULE_0__.Math.Between(1, mapHeight - 2);\n            this.groundLayer.putTileAt(1, rx, ry);\n        }\n        // Enable collisions for wall tiles (index 1)\n        this.groundLayer.setCollision(1, true);\n        // Player setup\n        const startX = this.configData.initialX ?? tileSize * 2;\n        const startY = this.configData.initialY ?? tileSize * 2;\n        this.player = this.physics.add.sprite(startX, startY, \"player\");\n        this.player.setDepth(10);\n        this.player.setCollideWorldBounds(true);\n        // Camera and world bounds\n        const worldWidth = mapWidth * tileSize;\n        const worldHeight = mapHeight * tileSize;\n        this.cameras.main.setBounds(0, 0, worldWidth, worldHeight);\n        this.cameras.main.startFollow(this.player, true, 0.1, 0.1);\n        this.physics.world.setBounds(0, 0, worldWidth, worldHeight);\n        // Collide player with walls\n        this.physics.add.collider(this.player, this.groundLayer);\n        // Input\n        this.cursors = this.input.keyboard?.createCursorKeys();\n        this.wasd = this.input.keyboard?.addKeys({\n            W: phaser__WEBPACK_IMPORTED_MODULE_0__.Input.Keyboard.KeyCodes.W,\n            A: phaser__WEBPACK_IMPORTED_MODULE_0__.Input.Keyboard.KeyCodes.A,\n            S: phaser__WEBPACK_IMPORTED_MODULE_0__.Input.Keyboard.KeyCodes.S,\n            D: phaser__WEBPACK_IMPORTED_MODULE_0__.Input.Keyboard.KeyCodes.D\n        });\n        // Multiplayer socket\n        this.initMultiplayer();\n    }\n    update() {\n        if (!this.player || !this.player.body) return;\n        const speed = this.playerSpeed;\n        let vx = 0;\n        let vy = 0;\n        // Arrow keys\n        if (this.cursors?.left?.isDown) vx -= 1;\n        if (this.cursors?.right?.isDown) vx += 1;\n        if (this.cursors?.up?.isDown) vy -= 1;\n        if (this.cursors?.down?.isDown) vy += 1;\n        // WASD\n        if (this.wasd?.A?.isDown) vx -= 1;\n        if (this.wasd?.D?.isDown) vx += 1;\n        if (this.wasd?.W?.isDown) vy -= 1;\n        if (this.wasd?.S?.isDown) vy += 1;\n        const body = this.player.body;\n        if (vx === 0 && vy === 0) {\n            body.setVelocity(0, 0);\n        } else {\n            const len = Math.hypot(vx, vy) || 1;\n            body.setVelocity(vx / len * speed, vy / len * speed);\n        }\n        // Throttled position sync\n        const now = this.time.now;\n        if (this.socket && now - this.lastSent > 100) {\n            this.socket.emit(\"move\", {\n                x: this.player.x,\n                y: this.player.y\n            });\n            this.lastSent = now;\n        }\n    }\n    initMultiplayer() {\n        if (this.socket) return; // already connected\n        const socket = (0,socket_io_client__WEBPACK_IMPORTED_MODULE_1__.io)(\"http://localhost:4000\", {\n            transports: [\n                \"websocket\"\n            ],\n            autoConnect: true\n        });\n        this.socket = socket;\n        socket.on(\"connect\", ()=>{\n            this.myId = socket.id;\n        });\n        socket.on(\"initState\", (payload)=>{\n            // Create sprites for existing players (excluding self)\n            Object.entries(payload.players).forEach(([id, pos])=>{\n                if (id === this.myId) return;\n                this.spawnOther(id, pos.x, pos.y);\n            });\n        });\n        socket.on(\"playerJoined\", ({ id, x, y })=>{\n            if (id === this.myId) return;\n            this.spawnOther(id, x, y);\n        });\n        socket.on(\"playerMoved\", ({ id, x, y })=>{\n            const sprite = this.others.get(id);\n            if (sprite) {\n                sprite.x = x;\n                sprite.y = y;\n            }\n        });\n        socket.on(\"playerLeft\", ({ id })=>{\n            const sprite = this.others.get(id);\n            if (sprite) {\n                sprite.destroy();\n                this.others.delete(id);\n            }\n        });\n        // Cleanup on scene shutdown\n        this.events.once(phaser__WEBPACK_IMPORTED_MODULE_0__.Scenes.Events.SHUTDOWN, ()=>{\n            socket.removeAllListeners();\n            socket.disconnect();\n            this.socket = undefined;\n            this.myId = undefined;\n            this.others.forEach((s)=>{\n                s.destroy();\n            });\n            this.others.clear();\n        });\n    }\n    spawnOther(id, x, y) {\n        const s = this.add.sprite(x, y, \"player\").setTint(0x118ab2);\n        s.setDepth(5);\n        this.others.set(id, s);\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-node)/./lib/phaser/GameScene.ts\n");

/***/ })

};
;